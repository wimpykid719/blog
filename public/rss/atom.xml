<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://techblog-pink.vercel.app/</id>
    <title>大学生だった</title>
    <updated>2021-07-05T10:27:16.012Z</updated>
    <generator>Feed</generator>
    <author>
        <name>大学生だった.</name>
        <uri>https://twitter.com/Unemployed_jp</uri>
    </author>
    <link rel="alternate" href="https://techblog-pink.vercel.app/"/>
    <link rel="self" href="https://techblog-pink.vercel.app/rss/atom"/>
    <subtitle>Zennに投稿した記事を使用して作成したオリジナルブログ、プログラミング技術に関する内容を投稿します。</subtitle>
    <logo>https://techblog-pink.vercel.app/favicon/favicon.ico</logo>
    <rights>All rights reserved 2021, 大学生だった</rights>
    <category term="Technologie"/>
    <entry>
        <title type="html"><![CDATA[Vercel functionを使ってQiitaの記事をGitHubリポジトリから自動投稿・更新出来るAPIを作ってみた。]]></title>
        <id>https://techblog-pink.vercel.app/posts/nextjs-api-qiita-post</id>
        <link href="https://techblog-pink.vercel.app/posts/nextjs-api-qiita-post"/>
        <updated>2021-06-20T15:00:00.000Z</updated>
        <summary type="html"><![CDATA[前回Next.jsとVercelを使用して、Zennに投稿した記事を取得して作る[techBlog](https://zenn.dev/unemployed/articles/nextjsbuildtechblog)を作成した。今回はQiitaに投稿した記事...]]></summary>
        <content type="html"><![CDATA[<h2>最初に</h2>
<p>前回Next.jsとVercelを使用して、Zennに投稿した記事を取得して作る<a href="https://zenn.dev/unemployed/articles/nextjs-build-techblog">techBlog</a>を作成した。今回はQiitaに投稿した記事も取得してブログの記事に加えるようにする機能追加とどうせならという事でQiitaの記事をGithubリポジトリで管理してリポジトリに更新があったら自動でQiitaに投稿されるようにZennみたいな機能追加を行いたいと思います。</p>
<h2>追加機能</h2>
<p><img src="https://user-images.githubusercontent.com/23703281/122864935-78af2f00-d360-11eb-908c-a30eaf265122.jpeg" alt="techBlog構成 001">
※よく見かけるサービス構成図なるものを書いてみた。</p>
<p>techBlogに新たに追加する機能をまとめてみた。</p>
<ul>
<li>Zennみたいに連携したリポジトリに記事を追加したらQiitaに投稿・更新を行う。</li>
<li>Qiitaに投稿してるリポジトリデータを取得してブログの記事にする。</li>
</ul>
<h2>必要な物</h2>
<ul>
<li>qiitaのアクセストークン</li>
<li>リポジトリにwebhookの設定をする</li>
<li>githubのアクセストークン（techBlog作成の際に取得した。）</li>
</ul>
<h2>qiitaのアクセストークンを取得</h2>
<p><a href="https://qiita.com/settings/tokens/new">個人アクセストークンの発行</a> Qiitaのアカウント作成後ここから作成することが出来ます。</p>
<p>設定 > アプリケーション > 新しくトークンを発行するでも上記のリンクページにいけます。</p>
<p>権限は <code>read_qiita</code> と <code>write_qiita</code> にチェックを入れる。</p>
<p>あとは発行するを押すと出てくる。表示されたアクセストークンは一度しか表示されないので、コピーしておく。</p>
<h2>Qiitaの記事を管理するリポジトリのwebhook設定</h2>
<p>webhookとは何かイベントが起きた際に外部にHTTPリクエストを投げてくれる機能でこれのおかげで別のサービス同士を連携させたりすることが可能になる。</p>
<p>リポジトリにwebhook設定するにはGithubでwebhookを設定したいリポジトリページに行って > settings > webhooksで設定できる。</p>
<h3>イベントとは</h3>
<p>このイベントはGithubの場合はpushによりリポジトリの更新等が該当する。</p>
<p>他にも <code>Send me everything.</code> や <code>Let me select individual events.</code> 等細かく設定できるようだが、webhookを投げて欲しいタイミングはpush時のみなので <code>Just the push event.</code> にチェックを入れる。</p>
<p><img src="https://user-images.githubusercontent.com/23703281/122698234-d91b6f00-d281-11eb-8cf3-222e237fbe91.png" alt="webhook設定"></p>
<h3>Payload URL</h3>
<p>これはリクエストを投げて欲しい外部URLである。</p>
<p>自分の場合は <code>https://techblog-pink.vercel.app/api/qiita-post</code> ここにAPIを立てるので、このアドレスを指定する。</p>
<h3>Content type</h3>
<p>これはおそらくリクエストを投げる際に一緒に送信するデータのタイプになると思うのですが、Json形式で送って欲しいので <code>application/json</code> を選択する。</p>
<p><code>application/x-www-form-urlencoded</code> はURLにデータを乗せて送信する。</p>
<p>POSTメソッドでもURLにデータを乗せれるんですね。 そういう事するのGET メソッドのイメージがある。</p>
<p>これでwebhookの設定は完了したのであとはコードを書いていく。</p>
<p>と言ってもすでに完成しているので、コードの説明をしていこうと思う。</p>
<h2>Next.jsにAPIを立てる。</h2>
<p><code>pages/api/qiita-post.ts</code> というようにファイルを作成する事でAPIのエンドポイントをNext.jsでは作成できる。</p>
<p>あとはここにレスポンスを受け取った際の処理を記述していく事になる。</p>
<p>記述形式は node.jsのフレームワークexpressと同じだと思う。個人的には使用した事ないので詳しくは分からないが、チュートリアルでAPIを作成した際に</p>
<blockquote>
<p><a href="https://nextjs.org/docs/api-routes/api-middlewares#connectexpress-middleware-support">Connect/Express middleware support</a></p>
</blockquote>
<p>と書かれていたので ConnectとExpressを使っているんだと思う。</p>
<p>使い方はとても簡単で <code>req</code> にwebhook等から受け取ったデータが格納され <code>req.body</code> で取り出せる。</p>
<p><code>res</code> はwebhookを出したサーバに返す値を設定できる。下記の例では ステータスコード200で <code>{ text: 'Helllo' }</code> オブジェクトを返す。</p>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">NextApiRequest</span><span class="token punctuation">,</span> <span class="token maybe-class-name">NextApiResponse</span> <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">'next'</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token operator">:</span> <span class="token maybe-class-name">NextApiRequest</span><span class="token punctuation">,</span> res<span class="token operator">:</span> <span class="token maybe-class-name">NextApiResponse</span></span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// ここに処理を追加していく。</span>
  res<span class="token punctuation">.</span><span class="token method function property-access">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> text<span class="token operator">:</span> <span class="token string">'Hello'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>実際に実際に処理を追加し作成したコード</p>
<p><code>qiita-post.ts</code></p>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> <span class="token maybe-class-name">NextApiRequest</span><span class="token punctuation">,</span> <span class="token maybe-class-name">NextApiResponse</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'next'</span>
<span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> getUpdatedFiles <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">'../../lib/api/qiita'</span>
<span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> makeQiitaArticle <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">'../../lib/api/qiita'</span>
<span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> postQiita <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">'../../lib/api/qiita'</span>
<span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> writeQiitaId <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">'../../lib/api/qiita'</span>
<span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">PushRes</span> <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">'../../types/Response'</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">async</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token operator">:</span> <span class="token maybe-class-name">NextApiRequest</span><span class="token punctuation">,</span> res<span class="token operator">:</span> <span class="token maybe-class-name">NextApiResponse</span></span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
  
  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token property-access">method</span> <span class="token operator">===</span> <span class="token string">'POST'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> files <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getUpdatedFiles</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token property-access">body</span><span class="token punctuation">)</span>
    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">filesフィルタ前の中身：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">files長さ：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>files<span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>

    <span class="token comment">// udefinedが配列に含まれるので取り除く</span>
    <span class="token keyword">const</span> filesRemovedUndefined <span class="token operator">=</span> files<span class="token punctuation">.</span><span class="token method function property-access">filter</span><span class="token punctuation">(</span><span class="token known-class-name class-name">Boolean</span><span class="token punctuation">)</span>
    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">filesフィルタ後の中身：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>filesRemovedUndefined<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">filesフィルタ後の長さ：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>filesRemovedUndefined<span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
    <span class="token comment">// filesRemovedUndefinedに値があれば処理を続ける。</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>filesRemovedUndefined<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> statuses <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token known-class-name class-name">Promise</span><span class="token punctuation">.</span><span class="token method function property-access">all</span><span class="token punctuation">(</span>filesRemovedUndefined<span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span> <span class="token keyword">async</span><span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
        <span class="token comment">//　ここじゃない</span>
        <span class="token keyword">const</span> article <span class="token operator">=</span> <span class="token function">makeQiitaArticle</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>
        <span class="token keyword">const</span> qiitaPostRes <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">postQiita</span><span class="token punctuation">(</span>article<span class="token punctuation">,</span> file<span class="token punctuation">.</span><span class="token property-access">qiitaId</span><span class="token punctuation">)</span>
        <span class="token comment">// falseの場合はwebhookの2回目の通信になるのでここで処理を止める。</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>qiitaPostRes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 多分これが実行された時点で処理止まる気がする。レスポンス返してるから</span>
          <span class="token keyword">return</span> <span class="token punctuation">{</span> status<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span> message<span class="token operator">:</span> <span class="token string">'notting to upadate posts'</span> <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token comment">// 上記の分岐で引っ掛からなければwriteQiitaIdを実行できる。</span>
          <span class="token keyword">const</span> status<span class="token operator">:</span> <span class="token maybe-class-name">PushRes</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">writeQiitaId</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> qiitaPostRes<span class="token punctuation">.</span><span class="token property-access">id</span><span class="token punctuation">)</span>
          <span class="token comment">// 書き換えが成功すればそれを伝える</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'object'</span> <span class="token operator">===</span> <span class="token keyword">typeof</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token property-access">commit</span><span class="token punctuation">.</span><span class="token property-access">message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
            <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token property-access">commit</span><span class="token punctuation">.</span><span class="token property-access">message</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// res.status(201).json({ status: `succeeded ${status.commit.message}` })</span>
            <span class="token keyword">return</span> <span class="token punctuation">{</span> status<span class="token operator">:</span> <span class="token number">201</span><span class="token punctuation">,</span> message<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">succeeded </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>status<span class="token punctuation">.</span>commit<span class="token punctuation">.</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">'string'</span> <span class="token operator">===</span> <span class="token keyword">typeof</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// もしrepositoryの書き換えが必要ない記事の更新の場合はリポジトリの更新が必要ないので</span>
            <span class="token comment">// 処理を止めた事を伝える。</span>
            <span class="token keyword">return</span> <span class="token punctuation">{</span> status<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span> message<span class="token operator">:</span> status <span class="token punctuation">}</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// リポジトリの書き換えで何かエラーが発生した事を伝える。</span>
            <span class="token keyword">return</span> <span class="token punctuation">{</span> status<span class="token operator">:</span> <span class="token number">502</span><span class="token punctuation">,</span> message<span class="token operator">:</span> <span class="token string">'failed to update repository'</span> <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      res<span class="token punctuation">.</span><span class="token method function property-access">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">json</span><span class="token punctuation">(</span> <span class="token punctuation">{</span> allstatus<span class="token operator">:</span> statuses<span class="token punctuation">}</span> <span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span class="token method function property-access">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">json</span><span class="token punctuation">(</span> <span class="token punctuation">{</span> status<span class="token operator">:</span> <span class="token string">'noting to post'</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">//通信が成功したらstatusコード201とJsonを返す。</span>
    <span class="token comment">// res.status(201).json({ body: req.body })</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token method function property-access">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">'John Doe'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>
<h2>処理の順番</h2>
<ol>
<li>ユーザのpushによるリポジトリの更新。</li>
<li>webhookからHTTPリクエストを受け取る。</li>
<li>getUpdatedFiles() 関数が新規投稿・更新予定に必要なデータを <code>[object, object,...]</code> の形で返す。</li>
<li>返された配列に <code>undefined</code> も含まれることがあるのでそれを取り除いて、map関数で一つずつにして makeQiitaAriticle() 関数に渡し、返り値としてqiitaに投稿する際のデータ形式にして返してくれる。</li>
<li>postQiita() 関数に先ほど作成したqiitaの投稿データ形式と更新の場合に必要になる、記事のIDを渡す。更新・投稿した場合はqiitaからのレスポンスを返す。記事自体に変更がなく更新する必要がない場合は <code>false</code> を返す。これは後述で出てくるwriteQiitaId() 関数からリポジトリにpushする際にwebhookが再び走る。再びwriteQiitaId()が実行されpushを投げるループを止めるためにfalseを返している。なので最低でも2回、webhook走る。</li>
<li>writeQiitaId() は新規投稿の際に生成されたqiitaIdをリポジトリにある記事の <code>.md</code> ファイルに書き込む。</li>
<li>そして最後に処理が上手く行ったどうかのレスポンスを返す。</li>
</ol>
<h2>getUpdatedFiles()</h2>
<p>qiita.tsに書かれた関数を一つずつ紹介指定こうと思う。あまり綺麗な設計とは言えない、ブサイクなコードになっているが今後リファクタリングしながら綺麗にしていきたいと思う。</p>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token comment">//1 githubから投稿・更新された記事を取得 webhookのデータが大事</span>
<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getUpdatedFiles</span><span class="token punctuation">(</span><span class="token parameter">payload<span class="token operator">:</span> <span class="token maybe-class-name">Webhook</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token constant">BASE_URL</span> <span class="token operator">=</span> <span class="token string">'https://api.github.com/repos/wimpykid719/qiita-content/commits/'</span>
  <span class="token keyword">const</span> latestCommitsha<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> payload<span class="token punctuation">.</span><span class="token property-access">head_commit</span><span class="token punctuation">.</span><span class="token property-access">id</span>
  
  <span class="token keyword">const</span> updatedFileContents<span class="token operator">:</span> <span class="token maybe-class-name">Commits</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token constant">BASE_URL</span> <span class="token operator">+</span> latestCommitsha<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    headers<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string">"Authorization"</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">token </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">GITHUB_TOKEN</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token property-access">ok</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token method function property-access">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token method function property-access">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> files <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token known-class-name class-name">Promise</span><span class="token punctuation">.</span><span class="token method function property-access">all</span><span class="token punctuation">(</span>updatedFileContents<span class="token punctuation">.</span><span class="token property-access">files</span><span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span> <span class="token keyword">async</span><span class="token punctuation">(</span><span class="token parameter">updatedFile</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
    <span class="token comment">// statusが削除のファイルは無視する。</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>updatedFile<span class="token punctuation">.</span><span class="token property-access">status</span> <span class="token operator">===</span> <span class="token string">'removed'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">'removedのステータスなのでファイルを弾いた'</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// statusがremoved以外でも、拡張子がmdファイル以外の場合は取得しない</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token charset"><span class="token charset-punctuation punctuation">[</span><span class="token charclass class-name">\s</span><span class="token charclass class-name">\S</span><span class="token charset-punctuation punctuation">]</span></span><span class="token quantifier number">*?</span><span class="token special-escape escape">\.</span>md</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span>updatedFile<span class="token punctuation">.</span><span class="token property-access">filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> fileJson<span class="token operator">:</span> <span class="token maybe-class-name">Content</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>updatedFile<span class="token punctuation">.</span><span class="token property-access">contents_url</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      headers<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string">"Authorization"</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">token </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">GITHUB_TOKEN</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token property-access">ok</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token method function property-access">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token method function property-access">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
      <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">fileJsonの中身：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fileJson<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
    
    <span class="token keyword">const</span> buffer <span class="token operator">=</span> <span class="token maybe-class-name">Buffer</span><span class="token punctuation">.</span><span class="token method function property-access">from</span><span class="token punctuation">(</span>fileJson<span class="token punctuation">.</span><span class="token property-access">content</span><span class="token punctuation">,</span> <span class="token string">'base64'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> markdownContents <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token method function property-access">toString</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> matterResult <span class="token operator">=</span> <span class="token function">matter</span><span class="token punctuation">(</span>markdownContents<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>matterResult<span class="token punctuation">.</span><span class="token property-access">data</span><span class="token punctuation">.</span><span class="token property-access">published</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      id<span class="token operator">:</span> fileJson<span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token special-escape escape">\.</span>md<span class="token anchor function">$</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token spread operator">...</span><span class="token punctuation">(</span>matterResult<span class="token punctuation">.</span><span class="token property-access">data</span> <span class="token keyword">as</span> <span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> emoji<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> type<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> topics<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> published<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span> date<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> qiitaId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      content<span class="token operator">:</span> matterResult<span class="token punctuation">.</span><span class="token property-access">content</span><span class="token punctuation">,</span>
      path<span class="token operator">:</span> fileJson<span class="token punctuation">.</span><span class="token property-access">path</span><span class="token punctuation">,</span>
      sha<span class="token operator">:</span> fileJson<span class="token punctuation">.</span><span class="token property-access">sha</span><span class="token punctuation">,</span>
      markdownContents<span class="token operator">:</span> markdownContents<span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> files
<span class="token punctuation">}</span>
</code></pre></div>
<p>webhookから取得した最新のコミットshaを使う事で、最新でコミットされたファイル情報を取得する事ができる。そこにあるコミット情報が <code>status</code> にあり削除、修正、新規追加なのかわかる。</p>
<p><code>contents_url</code> からコミットしたファイルの詳細情報を取得する事ができる。</p>
<p><code>filename</code> は対象となってるファイル名、これらが <code>files</code> に <code>[object, object...]</code> のような感じで格納されている。</p>
<p><code>res.ok</code> で判定しているのは fetchが404でもエラーを投げないためresponseが成功した際に <code>true</code> を返す <code>.ok</code> を使用している。 <code>.status</code> でステータスコードを取得して判定する事も出来る。</p>
<p><code>contents_url</code> にfetchを投げると返って来たJsonにbase64でマークダウンファイルの中身があるのでそれを取り扱えるように文字列に変換する。そしてマークダウンに含まれるメタデータ等と整形してJsonオブジェクトを作成して返す。</p>
<h2>makeQiitaArticle()</h2>
<p>これはqiita APIで投稿する際のデータ形式にオブジェクトを作成して返す。</p>
<p>ドキュメントを参考に作成した。</p>
<p><a href="https://qiita.com/api/v2/docs#post-apiv2items">Qiita API v2 documentation - Qiita:Developer</a></p>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token comment">//2 投稿・更新された記事をqiitaのフォーマットにする。</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">makeQiitaArticle</span><span class="token punctuation">(</span><span class="token parameter">file<span class="token operator">:</span> <span class="token maybe-class-name">QiitaRepository</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> tags <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token property-access">topics</span><span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">topic<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token operator">:</span> topic<span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> article <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">'body'</span><span class="token operator">:</span> file<span class="token punctuation">.</span><span class="token property-access">content</span><span class="token punctuation">,</span>
    <span class="token string">'private'</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token string">'tags'</span><span class="token operator">:</span> tags<span class="token punctuation">,</span>
    <span class="token string">'title'</span><span class="token operator">:</span> file<span class="token punctuation">.</span><span class="token property-access">title</span><span class="token punctuation">,</span>
    <span class="token string">'tweet'</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> article
<span class="token punctuation">}</span>
</code></pre></div>
<h2>postQiita()</h2>
<p>先ほど作成したオブジェクトをfetchで送る。</p>
<p>2回目のwebhookによる処理の場合、ここで処理を止める。</p>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token comment">//3 qiitaに投稿する。</span>
<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">postQiita</span><span class="token punctuation">(</span><span class="token parameter">qiitaArticle<span class="token operator">:</span> <span class="token maybe-class-name">QiitaArticle</span><span class="token punctuation">,</span> idArticle<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> url <span class="token operator">=</span> idArticle <span class="token operator">?</span> 
    <span class="token string">'https://qiita.com/api/v2/items'</span> <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span>idArticle <span class="token operator">:</span>
    <span class="token string">'https://qiita.com/api/v2/items'</span><span class="token punctuation">;</span>
  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">urlの確認：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> patchPostOk <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token punctuation">(</span> <span class="token keyword">async</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> qiitaArticle<span class="token punctuation">,</span> idArticle</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
    <span class="token comment">// idがあるやつはすでに投稿されている記事なので、記事の更新かそれとも2回目のフックか判定する。</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>idArticle<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 記事が存在するのか取得する。記事があるならJsonが返る。</span>
      <span class="token keyword">const</span> qiitaArticleGetRes<span class="token operator">:</span> <span class="token maybe-class-name">QiitaArticleGetRes</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>
        headers<span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token string">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'application/json'</span><span class="token punctuation">,</span>
          <span class="token string">'Authorization'</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Bearer </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">QIITA_TOKEN</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        method<span class="token operator">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token property-access">ok</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token method function property-access">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token method function property-access">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
        <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token comment">// もしなければidはあるが記事はないことになる。つまりidが間違っている。</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>qiitaArticleGetRes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// idがあり、アップ予定の記事タイトルと元々の記事タイトルが違う。これは更新になる。</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>qiitaArticle<span class="token punctuation">.</span><span class="token property-access">title</span> <span class="token operator">===</span> qiitaArticleGetRes<span class="token punctuation">.</span><span class="token property-access">title</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">'タイトル更新'</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// idがあり、アップ予定の記事タグと元々の記事タグが違う。これは更新になる。</span>
      <span class="token keyword">const</span> flags2 <span class="token operator">=</span> qiitaArticle<span class="token punctuation">.</span><span class="token property-access">tags</span><span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">tag</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> flags <span class="token operator">=</span> qiitaArticleGetRes<span class="token punctuation">.</span><span class="token property-access">tags</span><span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resTag</span><span class="token punctuation">)</span><span class="token arrow operator">=></span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span><span class="token punctuation">(</span>tag<span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">.</span><span class="token method function property-access">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> resTag<span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">.</span><span class="token method function property-access">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> flags<span class="token punctuation">.</span><span class="token method function property-access">every</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token arrow operator">=></span> v<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token keyword">const</span> flag <span class="token operator">=</span> flags2<span class="token punctuation">.</span><span class="token method function property-access">some</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token arrow operator">=></span> v<span class="token punctuation">)</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">'タグ更新'</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// idがあり、アップ予定の記事と元々の記事が違う。これは更新になる。</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>qiitaArticle<span class="token punctuation">.</span><span class="token property-access">body</span> <span class="token operator">===</span> qiitaArticleGetRes<span class="token punctuation">.</span><span class="token property-access">body</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">'記事更新'</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// idがあって変更が確認されない場合は2回目のwebhookによるものだから処理を止める必要がある。</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// idがないやつは新規投稿する。</span>
    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">'記事投稿'</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> qiitaArticle<span class="token punctuation">,</span> idArticle<span class="token punctuation">)</span>
  
  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">投稿できるか確認：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>patchPostOk<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>patchPostOk<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> method <span class="token operator">=</span> idArticle <span class="token operator">?</span> <span class="token string">'PATCH'</span><span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">;</span>
  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">methodの確認：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>method<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">記事のタイトル：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>qiitaArticle<span class="token punctuation">.</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>

  
  <span class="token keyword">const</span> jsonQiitaArticle<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span>qiitaArticle<span class="token punctuation">)</span>
  <span class="token keyword">const</span> qiitaPostRes<span class="token operator">:</span> <span class="token maybe-class-name">QiitaPostRes</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    headers<span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'application/json'</span><span class="token punctuation">,</span>
      <span class="token string">'Authorization'</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Bearer </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">QIITA_TOKEN</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    method<span class="token operator">:</span> method<span class="token punctuation">,</span>
    body<span class="token operator">:</span> jsonQiitaArticle<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token property-access">ok</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token method function property-access">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token method function property-access">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> qiitaPostRes
<span class="token punctuation">}</span>
</code></pre></div>
<p><code>patchPostOk</code> にPath・Postを行っても良い場合に <code>True</code> を返し、2回目のwebhookのため処理を止める場合に <code>False</code> が入る。</p>
<p>それを調べる方法としてqiitaIdを用いて行う。</p>
<p>qiitaIdがない物は初めての投稿となるため投稿する必要があるデータになる。</p>
<p>qiitaIdがある物は、記事の更新の可能性があるのでまず、そのqiitaIdを持つ記事にqiita APIを使って記事情報を取得するそしてそれらを比較して差異があれば、記事の更新だと判断する。差異が見られなければ2回目のwebhookによる処理と判断し以降にfetchを投げる処理を行わないようにする。</p>
<h2>writeQiitaId()</h2>
<p>ここでは新規投稿時に受け取ったqiitaIdをGitHubリポジトリにあるマークダウンに書き込む。</p>
<p>書き込みは文字列になっているので正規表現で置き換えたコンテンツをGitHub APIでコミット・プッシュする。その際に更新したいファイルの最新のshaが必要となる。</p>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token comment">//4 githubのリポジトリにqiitaIdを追加する。</span>
<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">writeQiitaId</span><span class="token punctuation">(</span><span class="token parameter">file<span class="token operator">:</span> <span class="token maybe-class-name">QiitaRepository</span><span class="token punctuation">,</span> qiitaId<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">qiitaからのID： </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>qiitaId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">fileからのID： </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>file<span class="token punctuation">.</span>qiitaId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token constant">BASE_URL</span> <span class="token operator">=</span> <span class="token string">'https://api.github.com/repos/wimpykid719/qiita-content/contents/'</span>
  <span class="token keyword">const</span> contentBeforeAddId <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token property-access">markdownContents</span>
  <span class="token comment">// fileのidは空か同じものが入っているので、一致しなければ新規投稿を意味する。</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token property-access">qiitaId</span> <span class="token operator">===</span> qiitaId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">sha：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>file<span class="token punctuation">.</span>sha<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
    <span class="token comment">//markdownの文字列に正規表現でqiitaIdを追加する。</span>
    <span class="token keyword">const</span> contentAddId <span class="token operator">=</span> contentBeforeAddId<span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token group punctuation">(?&#x3C;=</span>---<span class="token charset"><span class="token charset-punctuation punctuation">[</span><span class="token charclass class-name">\s</span><span class="token charclass class-name">\S</span><span class="token charset-punctuation punctuation">]</span></span><span class="token quantifier number">*?</span><span class="token escape">\n</span>qiitaId:<span class="token charclass class-name">\s</span><span class="token quantifier number">*</span>'<span class="token group punctuation">)</span><span class="token charclass class-name">.</span><span class="token quantifier number">*?</span><span class="token group punctuation">(?=</span>'<span class="token charset"><span class="token charset-punctuation punctuation">[</span><span class="token charclass class-name">\s</span><span class="token charclass class-name">\S</span><span class="token charset-punctuation punctuation">]</span></span><span class="token quantifier number">*?</span>---<span class="token group punctuation">)</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>qiitaId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> buffer <span class="token operator">=</span> <span class="token maybe-class-name">Buffer</span><span class="token punctuation">.</span><span class="token method function property-access">from</span><span class="token punctuation">(</span>contentAddId<span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> content <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token method function property-access">toString</span><span class="token punctuation">(</span><span class="token string">"base64"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> resRepo<span class="token operator">:</span> <span class="token maybe-class-name">PushRes</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token constant">BASE_URL</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token property-access">path</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      headers<span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string">'Accept'</span><span class="token operator">:</span> <span class="token string">'application/vnd.github.v3+json'</span><span class="token punctuation">,</span>
        <span class="token string">'Authorization'</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">token </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">GITHUB_TOKEN</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      method<span class="token operator">:</span> <span class="token string">'PUT'</span><span class="token punctuation">,</span>
      body<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">{\</span>
<span class="token string">        "message":"write </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>qiitaId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">",\</span>
<span class="token string">        "content":"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>content<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">",\</span>
<span class="token string">        "sha":"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>file<span class="token punctuation">.</span>sha<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"\</span>
<span class="token string">      }</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token property-access">ok</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token method function property-access">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token method function property-access">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
      <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> resRepo
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token string">'stop to rewrite repository'</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>上述のコードだと、複数のファイルの場合、1ファイル1コミット見たいな感じになるので変更をまとめてコミットする事ができない。それを行うにはGit Date APIを用いてBlod、Treeのgitの根本的な仕組みを理解する必要があり少々難解だったため、次回Gitの仕組みに関する記事を書いてプログラムからGitHubのリポジトリを簡単に操作出来るライブラリ作成に挑戦しようと思う。</p>
<h2>GitHubリポジトリにあるQiita記事データを取得してブログに追加する。</h2>
<p>今度はブログにQiita投稿している記事を追加する機能を <code>getPostsData()</code> 関数に追加する。</p>
<p>前回のZennの投稿記事を管理しているリポジトリデータを取得して記事の形式にするのと同じ事をQiitaリポジトリ にもするそして最後2つの配列を合体して一つの配列 <code>allDatas</code> にして返す。</p>
<p>lib/posts.tsx</p>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getPostsData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> zennArticles<span class="token operator">:</span> <span class="token maybe-class-name">ArticleResponse</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetchGithubRepo</span><span class="token punctuation">(</span><span class="token string">'https://api.github.com/repos/wimpykid719/zenn-content/contents/articles'</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> datas <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">zennArticles</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>zennArticles<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token known-class-name class-name">Promise</span><span class="token punctuation">.</span><span class="token method function property-access">all</span><span class="token punctuation">(</span>zennArticles<span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">article<span class="token operator">:</span> <span class="token maybe-class-name">ArticleResponse</span></span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">fetchGithubMakeArticle</span><span class="token punctuation">(</span><span class="token string">'https://api.github.com/repos/wimpykid719/zenn-content/contents/articles/'</span><span class="token punctuation">,</span> article<span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>zennArticles<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> qiitaArticles<span class="token operator">:</span> <span class="token maybe-class-name">ArticleResponse</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetchGithubRepo</span><span class="token punctuation">(</span><span class="token string">'https://api.github.com/repos/wimpykid719/qiita-content/contents/articles'</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> datas2 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">qiitaArticles</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>qiitaArticles<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token known-class-name class-name">Promise</span><span class="token punctuation">.</span><span class="token method function property-access">all</span><span class="token punctuation">(</span>qiitaArticles<span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">article<span class="token operator">:</span> <span class="token maybe-class-name">ArticleResponse</span></span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">fetchGithubMakeArticle</span><span class="token punctuation">(</span><span class="token string">'https://api.github.com/repos/wimpykid719/qiita-content/contents/articles/'</span><span class="token punctuation">,</span> article<span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>qiitaArticles<span class="token punctuation">)</span>

  <span class="token keyword">const</span> allDatas <span class="token operator">=</span> datas<span class="token punctuation">.</span><span class="token method function property-access">concat</span><span class="token punctuation">(</span>datas2<span class="token punctuation">)</span>

  <span class="token keyword">const</span> removeFalsyDatas <span class="token operator">=</span> allDatas<span class="token punctuation">.</span><span class="token method function property-access">filter</span><span class="token punctuation">(</span><span class="token known-class-name class-name">Boolean</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> removeFalsyDatas<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>そこでGitHubのレポジトリにアクセスする部分とmdファイルを変換する部分はほぼ同じ処理になるので共通化する関数としてutilityフォルダに <code>fetchGithubRepo()</code> と <code>fetchGithubMakeArticle()</code> に分けた。</p>
<h2>fetchGithubRepo()</h2>
<p>今までfetch処理がthenとawaitを混合して書いていたので、それをawaitのみに統一したこちらの方が可読性が高く主流な書き方となりつつあるので、他の関数に記述されたfetch処理もこのように書き換えた方が良いかもしれない。fetchはステータスコードエラーではエラー処理を排出しないのでif文を使って排出するようにしている。</p>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fetchGithubRepo</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      headers<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string">"Authorization"</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">token </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">GITHUB_TOKEN</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">.</span><span class="token property-access">ok</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">ステータスコードエラー：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>res<span class="token punctuation">.</span>status<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token method function property-access">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">repofetchデータの処理中にエラー：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>err<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>
<h2>fetchGithubMakeArticle()</h2>
<p>これはリポジトリから個別にmdファイルを読み込んでブログに投稿出来る形式のオブジェクト作る。</p>
<p>qiitaIdを持つ場合は <code>from: 'Qiita'</code> とどこからの記事なのか分かるようにしている。Zennからの場合は <code>from: 'Zenn'</code> となる。</p>
<p><img src="https://user-images.githubusercontent.com/23703281/122698265-ecc6d580-d281-11eb-84fa-696073a934b0.jpeg" alt="fromQiita"></p>
<p>このような感じに左下部で表示する際に使用するになっている。</p>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fetchGithubMakeArticle</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token operator">:</span> string<span class="token punctuation">,</span> fileName<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url <span class="token operator">+</span> fileName<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      headers<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string">"Authorization"</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">token </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">GITHUB_TOKEN</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">.</span><span class="token property-access">ok</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">ステータスコードエラー：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>res<span class="token punctuation">.</span>status<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token method function property-access">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">const</span> buffer <span class="token operator">=</span> <span class="token maybe-class-name">Buffer</span><span class="token punctuation">.</span><span class="token method function property-access">from</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token property-access">content</span><span class="token punctuation">,</span> <span class="token string">'base64'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> fileContents <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token method function property-access">toString</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> matterResult <span class="token operator">=</span> <span class="token function">matter</span><span class="token punctuation">(</span>fileContents<span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>matterResult<span class="token punctuation">.</span><span class="token property-access">data</span><span class="token punctuation">.</span><span class="token property-access">published</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>matterResult<span class="token punctuation">.</span><span class="token property-access">data</span><span class="token punctuation">.</span><span class="token property-access">qiitaId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
          id<span class="token operator">:</span> fileName<span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token special-escape escape">\.</span>md<span class="token anchor function">$</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token spread operator">...</span><span class="token punctuation">(</span>matterResult<span class="token punctuation">.</span><span class="token property-access">data</span> <span class="token keyword">as</span> <span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> emoji<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> type<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> topics<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> published<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span> date<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          content<span class="token operator">:</span> matterResult<span class="token punctuation">.</span><span class="token property-access">content</span><span class="token punctuation">,</span>
          from <span class="token operator">:</span> <span class="token string">'Qiita'</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        id<span class="token operator">:</span> fileName<span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token special-escape escape">\.</span>md<span class="token anchor function">$</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token spread operator">...</span><span class="token punctuation">(</span>matterResult<span class="token punctuation">.</span><span class="token property-access">data</span> <span class="token keyword">as</span> <span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> emoji<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> type<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> topics<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> published<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span> date<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        content<span class="token operator">:</span> matterResult<span class="token punctuation">.</span><span class="token property-access">content</span><span class="token punctuation">,</span>
        from<span class="token operator">:</span> <span class="token string">'Zenn'</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">contentfetchデータの処理中にエラー：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>err<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
<span class="token punctuation">}</span>
</code></pre></div>
<h2>最後に</h2>
<p>なんとかブログに機能を無事に追加する事ができた。前回の記事で掲げたやる事リストには全く載ってなかったが、Vercelのサーバレスファンクションを使う事が出来てよかった。これが無料で出来るのは本当にありがたい。</p>
<p>作り始めた時は小さいスクリプトを組んで各機能に必要な動作が出来るか一個ずつ確認して出来るなと思ったら関数を書き始めて、それを組み合わせて目的の機能にしようとした時にエラーが連発して、そこでとても時間を浪費した。</p>
<h3>反省</h3>
<p>テストを手動で行っていたが、とても時間を食った。Vercelはブランチを切ってpushするとテスト環境のみに変更を加えてをプロダクトは変更を加えてない状態にしてくれる（これはとてもありがたい）。ただ毎回ビルドするのに1分くらいかかるため時間が取られた。コードを少し直してビルドを100回くらいは繰り返したと思う。おかげでコミット数だけはとても稼げて、すごい開発してるやつ風の草を生やせた。そこからGitHubに実際に記事を追加してwebhookにリクエストを出してもらったり、記事を消したり実際の操作をとにかく繰り返して時間がかかった。あとVercelのコンソールログは変数の中身が長いと表示出来ないみたいで動作時点での値を全て見る事が出来なかった。そのため引数を間違えたりしてとても時間と精神を持ってかれた。webhookを用いたプログラムでも、ローカルで開発出来る環境を作るべきだった。今思いつくのはwebhookで貰うJsonオブジェクトをコピーしておきそれをローカル環境で使う事くらい。</p>
<p>テストコードを書いた方が良かったのではと思う。HTTPリクエストを使用するテストコードの書き方とかイメージ出来なかったので、手を出す事が出来なかった。それもwebhookで貰う値だけコピーして使えばローカルでのテストコードが書けそうな気はする。</p>
<p>業務で作業している方々はどのようにテストをしているのか気になる。もし自分だったらこんな感じでテストコード書くよ等あったら教えて頂けると嬉しいです。</p>
<p>最後まで記事を読んで頂きありがとうございました。</p>
<h3>参照</h3>
<p><a href="https://qiita.com/kai_kou/items/663d3f7bbc4da4ccf62d">Qiita API v2を利用してcurlで投稿してみた - Qiita</a></p>
<p><a href="https://qiita.com/tomowarkar/items/11488231c6d22d960323">Qiita API で投稿を自動化する - Qiita</a></p>
<p><a href="https://qiita.com/noraworld/items/79100783ba95d8c48924#github-webhook-%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B">Qiita に投稿する技術記事を GitHub で管理する方法 - Qiita</a></p>
<p><a href="https://docs.github.com/ja/developers/webhooks-and-events/webhooks/webhook-events-and-payloads">webhook イベントとペイロード</a></p>
<p><a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify">JSON.stringify() - JavaScript | MDN</a></p>
<p><a href="https://developer.mozilla.org/ja/docs/Web/API/Fetch_API/Using_Fetch">Fetch の使用 - Web API | MDN</a></p>
<p><a href="https://docs.github.com/ja/rest/reference/repos#get-repository-content">リポジトリ</a></p>
<p><a href="https://int128.hatenablog.com/entry/2017/09/05/161641">GitHubのGit Data APIでコミットを作成する - GeekFactory</a></p>
<p><a href="https://engineering.mercari.com/blog/entry/2016-02-08-173000/">Gitのコミットハッシュ値は何を元にどうやって生成されているのか</a></p>
<p><a href="https://qiita.com/may88seiji/items/e89ecf9232dfbe79d84f">js 偽とみなされる値を配列から取り除く - Qiita</a></p>
<p>Gitの仕組みに関してはこの動画がとても分かりやすかったので、次回からこれを元にGitの勉強をしようと思う。</p>
<p><a href="https://www.youtube.com/watch?v=MyvyqdQ3OjI&#x26;list=LL&#x26;index=6">Git Internals - Git Objects</a></p>
<p>記事に関するコメント等は</p>
<p>🕊：<a href="https://twitter.com/Unemployed_jp">Twitter</a>
📺：<a href="https://www.youtube.com/channel/UCT3wLdiZS3Gos87f9fu4EOQ/featured?view_as=subscriber">Youtube</a>
📸：<a href="https://www.instagram.com/unemployed_jp/">Instagram</a>
👨🏻‍💻：<a href="https://github.com/wimpykid719?tab=repositories">Github</a>
😥：<a href="https://ja.stackoverflow.com/users/edit/22565">Stackoverflow</a></p>
<p>でも受け付けています。どこかにはいます。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django公式チュートリアル（5~7）で分からない所、徹底的に調べた。]]></title>
        <id>https://techblog-pink.vercel.app/posts/django-tutorial2</id>
        <link href="https://techblog-pink.vercel.app/posts/django-tutorial2"/>
        <updated>2021-05-25T15:00:00.000Z</updated>
        <summary type="html"><![CDATA[前回のチュートリアルで作成した投票アプリに対してテストコードを書く所から始める。内容はチュートリアル5〜7をカバーする予定になる。チュートリアルが用意してくれたバグに対してテストコードを書いていく。まずはバグを確...]]></summary>
        <content type="html"><![CDATA[<h2>最初に</h2>
<p>前回のチュートリアルで作成した投票アプリに対してテストコードを書く所から始める。内容はチュートリアル5〜7をカバーする予定になる。</p>
<h2>Djangoでテストコードを書く</h2>
<p>チュートリアルが用意してくれたバグに対してテストコードを書いていく。</p>
<p>まずはバグを確認する。 <code>Qustion.was_published_recently()</code> のメソッドはQuestionが昨日以降に作成された場合に <code>True</code> を返すが 未来の日付になっている場合にもTrueを返す。これがバグになる。自分は前編の記事で登場した <code>models.py</code> に書かれた <code>was_published_recently()</code> はバグに対応済みなので下記のコードに入れ替えてバグを作り出す必要がある。</p>
<p>これだと <code>pub_date</code> が未来の場合も <code>True</code> を返す。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">was_published_recently</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">return</span> self<span class="token punctuation">.</span>pub_date <span class="token operator">>=</span> timezone<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> 
</code></pre></div>
<h3>バグの確認</h3>
<p>コードに故意にバグを生み出した所でバグを確認したいと思う。</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">python manage.py shell
</code></pre></div>
<p>データベース APIを叩いていく。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">import</span> datetime
<span class="token keyword">from</span> django<span class="token punctuation">.</span>utils <span class="token keyword">import</span> timezone
<span class="token keyword">from</span> polls<span class="token punctuation">.</span>models <span class="token keyword">import</span> Question

<span class="token comment"># 投稿日を今から30日後に設定した Questionオブジェクトを作成する。</span>
<span class="token comment"># この状態ではQuestionクラスからインスタンスを生成しただけでデータベースに保存はされていない。</span>
future_question <span class="token operator">=</span> Question<span class="token punctuation">(</span>pub_date<span class="token operator">=</span>timezone<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 結果</span>
<span class="token boolean">True</span>
</code></pre></div>
<h3>テストを作成する。</h3>
<p>pollsアプリのディレクトリに <code>tests.py</code> というファイルがあると思うのでそこにテストコードを書いていく。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">import</span> datetime
<span class="token keyword">from</span> django<span class="token punctuation">.</span>test <span class="token keyword">import</span> TestCase
<span class="token keyword">from</span> django<span class="token punctuation">.</span>utils <span class="token keyword">import</span> timezone
<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Question

<span class="token keyword">class</span> <span class="token class-name">QuestionModelTests</span><span class="token punctuation">(</span>TestCase<span class="token punctuation">)</span><span class="token punctuation">:</span>

  <span class="token keyword">def</span> <span class="token function">test_was_published_recently_with_future_question</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""</span>
<span class="token triple-quoted-string string">      was_published_recently()はpubdateが現在時刻より未来に設定された</span>
<span class="token triple-quoted-string string">      場合はFalseを返さないといけない。</span>
<span class="token triple-quoted-string string">    """</span>
    time <span class="token operator">=</span> timezone<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> detetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span>
    future_question <span class="token operator">=</span> Question<span class="token punctuation">(</span>pub_date<span class="token operator">=</span>time<span class="token punctuation">)</span>
    <span class="token comment"># ここで返却値がFalse出ない場合はテストに通らない事を設定している。</span>
    self<span class="token punctuation">.</span>assertIs<span class="token punctuation">(</span>future_question<span class="token punctuation">.</span>was_published_recently<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>
</code></pre></div>
<h3>テストを実行する。</h3>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">python manage.py <span class="token builtin class-name">test</span> polls

<span class="token comment"># 実行結果</span>
Creating <span class="token builtin class-name">test</span> database <span class="token keyword">for</span> <span class="token builtin class-name">alias</span> <span class="token string">'default'</span><span class="token punctuation">..</span>.
System check identified no issues <span class="token punctuation">(</span><span class="token number">0</span> silenced<span class="token punctuation">)</span>.
F
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
FAIL: test_was_published_recently_with_future_question <span class="token punctuation">(</span>polls.tests.QuestionModelTests<span class="token punctuation">)</span>
----------------------------------------------------------------------
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>:
  File <span class="token string">"/path/to/mysite/polls/tests.py"</span>, line <span class="token number">16</span>, <span class="token keyword">in</span> test_was_published_recently_with_future_question
    self.assertIs<span class="token punctuation">(</span>future_question.was_published_recently<span class="token punctuation">(</span><span class="token punctuation">)</span>, False<span class="token punctuation">)</span>
AssertionError: True is not False

----------------------------------------------------------------------
Ran <span class="token number">1</span> <span class="token builtin class-name">test</span> <span class="token keyword">in</span> <span class="token number">0</span>.001s

FAILED <span class="token punctuation">(</span>failures<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
Destroying <span class="token builtin class-name">test</span> database <span class="token keyword">for</span> <span class="token builtin class-name">alias</span> <span class="token string">'default'</span><span class="token punctuation">..</span>.
</code></pre></div>
<p>テストは失敗したと出力されると思う。</p>
<h3>バグを修正する</h3>
<p><code>models.py</code> の記述された関数 <code>was_published_recently()</code> を元に戻してバグがない状態にしたいと思う。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">was_published_recently</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    now <span class="token operator">=</span> timezone<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> now <span class="token operator">-</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&#x3C;=</span> self<span class="token punctuation">.</span>pub_date <span class="token operator">&#x3C;=</span> now
</code></pre></div>
<p>もう一度実行してみる。</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">python manage.py <span class="token builtin class-name">test</span> polls

<span class="token comment"># 実行結果</span>

Creating <span class="token builtin class-name">test</span> database <span class="token keyword">for</span> <span class="token builtin class-name">alias</span> <span class="token string">'default'</span><span class="token punctuation">..</span>.
System check identified no issues <span class="token punctuation">(</span><span class="token number">0</span> silenced<span class="token punctuation">)</span>.
<span class="token builtin class-name">.</span>
----------------------------------------------------------------------
Ran <span class="token number">1</span> <span class="token builtin class-name">test</span> <span class="token keyword">in</span> <span class="token number">0</span>.001s

OK
Destroying <span class="token builtin class-name">test</span> database <span class="token keyword">for</span> <span class="token builtin class-name">alias</span> <span class="token string">'default'</span><span class="token punctuation">..</span>.
</code></pre></div>
<p>今度はテストはOKと出力され、テストに通った。</p>
<h2>複数のテストを実行する</h2>
<p>先ほど作成した <code>QuestionModelTests</code> クラスに別のテストも追加してみましょう。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">import</span> datetime
<span class="token keyword">from</span> django<span class="token punctuation">.</span>test <span class="token keyword">import</span> TestCase
<span class="token keyword">from</span> django<span class="token punctuation">.</span>utils <span class="token keyword">import</span> timezone
<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Question

<span class="token keyword">class</span> <span class="token class-name">QuestionModelTests</span><span class="token punctuation">(</span>TestCase<span class="token punctuation">)</span><span class="token punctuation">:</span>

  <span class="token keyword">def</span> <span class="token function">test_was_published_recently_with_future_question</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""</span>
<span class="token triple-quoted-string string">      was_published_recently()はpubdateが現在時刻より未来に設定された</span>
<span class="token triple-quoted-string string">      場合はFalseを返さないといけない。</span>
<span class="token triple-quoted-string string">    """</span>
    time <span class="token operator">=</span> timezone<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> detetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span>
    future_question <span class="token operator">=</span> Question<span class="token punctuation">(</span>pub_date<span class="token operator">=</span>time<span class="token punctuation">)</span>
    <span class="token comment"># ここで返却値がFalse出ない場合はテストに通らない事を設定している。</span>
    self<span class="token punctuation">.</span>assertIs<span class="token punctuation">(</span>future_question<span class="token punctuation">.</span>was_published_recently<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>

  <span class="token comment"># 新しくテストを追加していく。</span>
  <span class="token keyword">def</span> <span class="token function">test_was_published_recently_with_old_question</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""</span>
<span class="token triple-quoted-string string">      was_published_recently()はpub_dateが1日より過去の場合</span>
<span class="token triple-quoted-string string">      Falseを返す</span>
<span class="token triple-quoted-string string">    """</span>
    <span class="token comment"># 現在時刻より一日1秒前の質問のインスタンスを作成する。</span>
    time <span class="token operator">=</span> timezone<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> seconds<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
    old_question <span class="token operator">=</span> Question<span class="token punctuation">(</span>pub_date<span class="token operator">=</span>time<span class="token punctuation">)</span>
    <span class="token comment"># 返り値がFalseならテストに通る。</span>
    self<span class="token punctuation">.</span>assertIs<span class="token punctuation">(</span>old_question<span class="token punctuation">.</span>was_published_recently<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>

  <span class="token keyword">def</span> <span class="token function">test_was_published_recently_with_recent_question</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""</span>
<span class="token triple-quoted-string string">      was_published_recently()はpub_dateが1日以内ならTrueを返す</span>
<span class="token triple-quoted-string string">    """</span>
    <span class="token comment"># 一日以内の質問インスタンスを作成する。</span>
    time <span class="token operator">=</span> timezone<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>hours<span class="token operator">=</span><span class="token number">23</span><span class="token punctuation">,</span> minutes<span class="token operator">=</span><span class="token number">59</span><span class="token punctuation">,</span> seconds<span class="token operator">=</span><span class="token number">59</span><span class="token punctuation">)</span>
    recent_question <span class="token operator">=</span> Question<span class="token punctuation">(</span>pub_date<span class="token operator">=</span>time<span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>assertIs<span class="token punctuation">(</span>recent_question<span class="token punctuation">.</span>was_published_recently<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span> 
</code></pre></div>
<p>これで過去、現在、未来に対してのテストが揃った。これで期待通りに動作する事を保証できるようになった。</p>
<h2>Djangoのviewをテストする。</h2>
<p>ビューレベルでのユーザ動作をシュミレートする事ができるClientを用意しているので、 <code>tests.py</code> や shellで使用する事ができる。</p>
<p>最初はshellから使用してみる。</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">python manage.py shell
</code></pre></div>
<p>下記のコードを一行ずつshellで実行する。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>test<span class="token punctuation">.</span>utils <span class="token keyword">import</span> setup_test_environment

<span class="token comment"># テンプレートのレンダラーをインストールする</span>
<span class="token comment"># response.context等の属性を調査できるようになる。</span>
setup_test_environment<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">from</span> django<span class="token punctuation">.</span>test <span class="token keyword">import</span> Client
<span class="token comment"># クライアントインスタンスを作成してページアクセスしたように操作する。</span>
client <span class="token operator">=</span> Client<span class="token punctuation">(</span><span class="token punctuation">)</span>

response <span class="token operator">=</span> client<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>
<span class="token comment"># 実行結果</span>
Not Found<span class="token punctuation">:</span> <span class="token operator">/</span>

response<span class="token punctuation">.</span>status_code
<span class="token comment"># 実行結果</span>
<span class="token number">404</span>

<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> reverse
response <span class="token operator">=</span> client<span class="token punctuation">.</span>get<span class="token punctuation">(</span>reverse<span class="token punctuation">(</span><span class="token string">'polls:index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
response<span class="token punctuation">.</span>status_code

<span class="token comment"># 実行結果</span>
<span class="token number">200</span>

<span class="token comment"># ページのhtmlが返ってくる。</span>
response<span class="token punctuation">.</span>content

<span class="token comment"># 実行結果</span>
<span class="token string">b'\n  &#x3C;ul>\n    \n      &#x3C;li>&#x3C;a href="/polls/3/">test3&#x3C;/a>&#x3C;/li>\n    \n      &#x3C;li>&#x3C;a href="/polls/2/">hello&#x3C;/a>&#x3C;/li>\n    \n      &#x3C;li>&#x3C;a href="/polls/1/">what&#x26;#x27;s up?&#x3C;/a>&#x3C;/li>\n    \n  &#x3C;/ul>\n\n'</span>

response<span class="token punctuation">.</span>context<span class="token punctuation">[</span><span class="token string">'latest_question_list'</span><span class="token punctuation">]</span>

<span class="token comment"># 実行結果</span>
<span class="token operator">&#x3C;</span>QuerySet <span class="token punctuation">[</span><span class="token operator">&#x3C;</span>Question<span class="token punctuation">:</span> test3<span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&#x3C;</span>Question<span class="token punctuation">:</span> hello<span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&#x3C;</span>Question<span class="token punctuation">:</span> what's up?<span class="token operator">></span><span class="token punctuation">]</span><span class="token operator">></span>
</code></pre></div>
<p>現在の投票一覧は最新5件を取得しているため、未来の投稿日の質問も表示している。これを</p>
<p><code>views.py</code> の <code>get_queryset()</code> に変更を加えていく。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponseRedirect
<span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> get_object_or_404<span class="token punctuation">,</span> render
<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> reverse
<span class="token keyword">from</span> django<span class="token punctuation">.</span>views <span class="token keyword">import</span> generic

<span class="token comment"># 新しく追加した</span>
<span class="token keyword">from</span> django<span class="token punctuation">.</span>utils <span class="token keyword">import</span> timezone

<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Choice<span class="token punctuation">,</span> Question

<span class="token keyword">class</span> <span class="token class-name">IndexView</span><span class="token punctuation">(</span>generic<span class="token punctuation">.</span>ListView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># デフォルトのビューを使用せず、元々作成してあったものを使用する。</span>
    template_name <span class="token operator">=</span> <span class="token string">'polls/index.html'</span>
    <span class="token comment"># 自動で渡されるquestion_listというコンテキスト変数の変数名を独自のものに変更している。</span>
    context_object_name <span class="token operator">=</span> <span class="token string">'latest_question_list'</span>
    
    <span class="token comment"># 変更する箇所</span>
    <span class="token keyword">def</span> <span class="token function">get_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""</span>
<span class="token triple-quoted-string string">         最新の5件を取得する。ただし投稿日が現在時刻より前にある投稿のみ表示。</span>
<span class="token triple-quoted-string string">         filter(pub_date__lte=timezone.now()) = </span>
<span class="token triple-quoted-string string">         if Question.pub_date &#x3C;= timezone.now():</span>
<span class="token triple-quoted-string string">           return Question.pub_date</span>
<span class="token triple-quoted-string string">        """</span>
        <span class="token keyword">return</span> Question<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>
          pub_date__lte<span class="token operator">=</span>timezone<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">'-pub_date'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>

<span class="token keyword">class</span> <span class="token class-name">DetailView</span><span class="token punctuation">(</span>generic<span class="token punctuation">.</span>DetailView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 自分がどのモデルに対して動作するかを伝えている。</span>
    <span class="token comment"># おそらくget_object_or_404(Question, pk=question_id)のQuestion部分を担っている。</span>
    <span class="token comment"># pkの部分はurls.pyで先に指定してある。</span>
    model <span class="token operator">=</span> Question
    template_name <span class="token operator">=</span> <span class="token string">'polls/detail.html'</span>

<span class="token keyword">class</span> <span class="token class-name">ResultsView</span><span class="token punctuation">(</span>generic<span class="token punctuation">.</span>DetailView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    model <span class="token operator">=</span> Question
    template_name <span class="token operator">=</span> <span class="token string">'polls/results.html'</span>

<span class="token keyword">def</span> <span class="token function">vote</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> question_id<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment"># 前回のまま変更しない。</span>
</code></pre></div>
<p>Djangoでは querySetの <code>filter()</code> を使用する際に変数を比較したい場合下記のような記述を取る事が出来る。</p>
<p>下記は <code>Product.weight</code> の値が2以下の場合 Trueになり返却されるオブジェクトになる。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token comment"># weight &#x3C;= 2</span>
products <span class="token operator">=</span> Product<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>weight__lte<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
</code></pre></div>
<p>他にも比較したり出来る、下記のサイトで説明されている。</p>
<p><a href="https://qiita.com/uenosy/items/54136aff0f6373957d22">Django逆引きチートシート（QuerySet編） - Qiita</a></p>
<h2>viewのテストを追加する</h2>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">import</span> datetime
<span class="token keyword">from</span> django<span class="token punctuation">.</span>test <span class="token keyword">import</span> TestCase
<span class="token keyword">from</span> django<span class="token punctuation">.</span>utils <span class="token keyword">import</span> timezone
<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Question
<span class="token comment"># 新しく追加した。</span>
<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> reverse

<span class="token keyword">class</span> <span class="token class-name">QuestionModelTests</span><span class="token punctuation">(</span>TestCase<span class="token punctuation">)</span><span class="token punctuation">:</span>

  <span class="token keyword">def</span> <span class="token function">test_was_published_recently_with_future_question</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""</span>
<span class="token triple-quoted-string string">      was_published_recently()はpubdateが現在時刻より未来に設定された</span>
<span class="token triple-quoted-string string">      場合はFalseを返さないといけない。</span>
<span class="token triple-quoted-string string">    """</span>
    time <span class="token operator">=</span> timezone<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> detetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span>
    future_question <span class="token operator">=</span> Question<span class="token punctuation">(</span>pub_date<span class="token operator">=</span>time<span class="token punctuation">)</span>
    <span class="token comment"># ここで返却値がFalse出ない場合はテストに通らない事を設定している。</span>
    self<span class="token punctuation">.</span>assertIs<span class="token punctuation">(</span>future_question<span class="token punctuation">.</span>was_published_recently<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>

  <span class="token comment"># 新しくテストを追加していく。</span>
  <span class="token keyword">def</span> <span class="token function">test_was_published_recently_with_old_question</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""</span>
<span class="token triple-quoted-string string">      was_published_recently()はpub_dateが1日より過去の場合</span>
<span class="token triple-quoted-string string">      Falseを返す</span>
<span class="token triple-quoted-string string">    """</span>
    <span class="token comment"># 現在時刻より一日1秒前の質問のインスタンスを作成する。</span>
    time <span class="token operator">=</span> timezone<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> seconds<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
    old_question <span class="token operator">=</span> Question<span class="token punctuation">(</span>pub_date<span class="token operator">=</span>time<span class="token punctuation">)</span>
    <span class="token comment"># 返り値がFalseならテストに通る。</span>
    self<span class="token punctuation">.</span>assertIs<span class="token punctuation">(</span>old_question<span class="token punctuation">.</span>was_published_recently<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>

  <span class="token keyword">def</span> <span class="token function">test_was_published_recently_with_recent_question</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""</span>
<span class="token triple-quoted-string string">      was_published_recently()はpub_dateが1日以内ならTrueを返す</span>
<span class="token triple-quoted-string string">    """</span>
    <span class="token comment"># 一日以内の質問インスタンスを作成する。</span>
    time <span class="token operator">=</span> timezone<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>hours<span class="token operator">=</span><span class="token number">23</span><span class="token punctuation">,</span> minutes<span class="token operator">=</span><span class="token number">59</span><span class="token punctuation">,</span> seconds<span class="token operator">=</span><span class="token number">59</span><span class="token punctuation">)</span>
    recent_question <span class="token operator">=</span> Question<span class="token punctuation">(</span>pub_date<span class="token operator">=</span>time<span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>assertIs<span class="token punctuation">(</span>recent_question<span class="token punctuation">.</span>was_published_recently<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>
　
　<span class="token comment"># 新しく追加した</span>
  <span class="token keyword">def</span> <span class="token function">create_question</span><span class="token punctuation">(</span>question_text<span class="token punctuation">,</span> days<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""</span>
<span class="token triple-quoted-string string">      引数から質問を作成する。過去に投稿された質問を作りたいなら-1~nの値を第二引数に取る、</span>
<span class="token triple-quoted-string string">      まだ公開されてない質問を作成したいなら+1~nの値を第二引数に取る。</span>
<span class="token triple-quoted-string string">      現在から10日後の投稿日の質問を作成したいなら</span>
<span class="token triple-quoted-string string">      例： create_question('今日は何食べる?' , 10)</span>
<span class="token triple-quoted-string string">      </span>
<span class="token triple-quoted-string string">　　　　15日前の質問を作成したいなら</span>
<span class="token triple-quoted-string string">          create_question('今日は何食べる?' , -15)</span>
<span class="token triple-quoted-string string">    """</span>
    time <span class="token operator">=</span> timezone<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span>days<span class="token punctuation">)</span>
    <span class="token keyword">return</span> Question<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>question_text<span class="token operator">=</span>question_text<span class="token punctuation">,</span> pub_date<span class="token operator">=</span>time<span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">QestionIndexViewTests</span><span class="token punctuation">(</span>TestCase<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">def</span> <span class="token function">test_no_question</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""</span>
<span class="token triple-quoted-string string">      質問がデータベースにない際に適切なメッセージを</span>
<span class="token triple-quoted-string string">      表示出来てるか確認する。</span>
<span class="token triple-quoted-string string">    """</span>
    response <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>get<span class="token punctuation">(</span>reverse<span class="token punctuation">(</span><span class="token string">'polls:index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment"># テスト合格条件</span>
    <span class="token comment"># ステータスコードが200である事</span>
    self<span class="token punctuation">.</span>assertEqual<span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>
    <span class="token comment"># コンテンツに No polls are availableが含まれる事</span>
    self<span class="token punctuation">.</span>assertContains<span class="token punctuation">(</span>response<span class="token punctuation">,</span> <span class="token string">"No polls are available."</span><span class="token punctuation">)</span>
    <span class="token comment"># データベースが空である事</span>
    self<span class="token punctuation">.</span>assertQuerysetEqual<span class="token punctuation">(</span>response<span class="token punctuation">.</span>context<span class="token punctuation">[</span><span class="token string">'latest_question_list'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token keyword">def</span> <span class="token function">test_past_question</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""</span>
<span class="token triple-quoted-string string">      過去の投稿日の質問一覧が表示されるか確認する。</span>
<span class="token triple-quoted-string string">    """</span>
    <span class="token comment"># 投稿日が30日前の質問を作成する。ダミーデータなので実際のデータベースにデータ作成されることはない。</span>
    <span class="token comment"># そしてメソッドが終了すればダミーデータは破棄される。</span>
    <span class="token comment"># なので新しくテストする際は質問は空の状態から始まる。</span>
    question <span class="token operator">=</span> create_question<span class="token punctuation">(</span>question_text<span class="token operator">=</span><span class="token string">"過去の質問"</span><span class="token punctuation">,</span> days<span class="token operator">=</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">)</span>
    response <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>get<span class="token punctuation">(</span>reverse<span class="token punctuation">(</span><span class="token string">'polls:index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment"># テスト合格条件</span>
    <span class="token comment"># 先ほど作成した質問が表示されているか表示する。</span>
    self<span class="token punctuation">.</span>assertQuerysetEqual<span class="token punctuation">(</span>response<span class="token punctuation">.</span>context<span class="token punctuation">[</span><span class="token string">'latest_quesiton_list'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>question<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span>

  <span class="token keyword">def</span> <span class="token function">test_future_question</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""</span>
<span class="token triple-quoted-string string">      投稿日が未来の質問が表示されていないか確認する。</span>
<span class="token triple-quoted-string string">    """</span>
    create_question<span class="token punctuation">(</span>question_text<span class="token operator">=</span><span class="token string">"未来の質問"</span><span class="token punctuation">,</span> days<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span>
    response <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>get<span class="token punctuation">(</span>reverse<span class="token punctuation">(</span><span class="token string">'polls:index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment"># テスト合格条件</span>
    <span class="token comment"># コンテンツに No polls are awailableが含まれる事</span>
    self<span class="token punctuation">.</span>assertContains<span class="token punctuation">(</span>response<span class="token punctuation">,</span> <span class="token string">"No polls are available."</span><span class="token punctuation">)</span>
    <span class="token comment"># 最新の質問5件が質問が空な事</span>
    self<span class="token punctuation">.</span>assertQuerysetEqual<span class="token punctuation">(</span>response<span class="token punctuation">.</span>context<span class="token punctuation">[</span><span class="token string">'latest_question_list'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token keyword">def</span> <span class="token function">test_future_question_and_past_question</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""</span>
<span class="token triple-quoted-string string">      過去・未来の質問の両方ある時に過去の質問だけ表示される。</span>
<span class="token triple-quoted-string string">    """</span>
    <span class="token comment"># 片方だけ変数に入れるのはテストの合格条件を判別する際に過去質問が表示されているのを確認するため</span>
    question <span class="token operator">=</span> create_question<span class="token punctuation">(</span>question_text<span class="token operator">=</span><span class="token string">"Past question."</span><span class="token punctuation">,</span> days<span class="token operator">=</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">)</span>
    create_question<span class="token punctuation">(</span>question_text<span class="token operator">=</span><span class="token string">"Future question."</span><span class="token punctuation">,</span> days<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span>
    response <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>get<span class="token punctuation">(</span>reverse<span class="token punctuation">(</span><span class="token string">'polls:index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>assertQuerysetEqual<span class="token punctuation">(</span>
      response<span class="token punctuation">.</span>context<span class="token punctuation">[</span><span class="token string">'latest_question_list'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">[</span>question<span class="token punctuation">]</span><span class="token punctuation">,</span>
     <span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">test_two_past_questions</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
      <span class="token triple-quoted-string string">"""</span>
<span class="token triple-quoted-string string">        過去の質問2つが表示されているか確認する。</span>
<span class="token triple-quoted-string string">      """</span>
      question1 <span class="token operator">=</span> create_question<span class="token punctuation">(</span>question_text<span class="token operator">=</span><span class="token string">"Past question 1."</span><span class="token punctuation">,</span> days<span class="token operator">=</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">)</span>
      question2 <span class="token operator">=</span> create_question<span class="token punctuation">(</span>question_text<span class="token operator">=</span><span class="token string">"Past question 2."</span><span class="token punctuation">,</span> days<span class="token operator">=</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span>
      response <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>get<span class="token punctuation">(</span>reverse<span class="token punctuation">(</span><span class="token string">'polls:index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      self<span class="token punctuation">.</span>assertQuerysetEqual<span class="token punctuation">(</span>
        response<span class="token punctuation">.</span>context<span class="token punctuation">[</span><span class="token string">'latest_question_list'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span>question2<span class="token punctuation">,</span> question1<span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span>
</code></pre></div>
<p>システムに問題がなければテストに全て合格する。作成された質問はデータベースに保存される事なく各テストが実行されて終わるたびに破棄される。</p>
<h2>DetailViewのテスト</h2>
<p>上記のテストは上手く動作して未来の質問はindexに表示されないが、 <code>detail.html</code> への正しいURLを知っていたり推測したユーザは、まだページに到達する事が出来る。そのため同じように未来の投稿日の場合はページを表示しないように <code>polls/views.py</code> コードを書き換える必要がある。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">DetailView</span><span class="token punctuation">(</span>generic<span class="token punctuation">.</span>DetailView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># テンプレートで変数にアクセスする際はquestionになる。</span>
    model <span class="token operator">=</span> Question
    template_name <span class="token operator">=</span> <span class="token string">'polls/detail.html'</span>
    
    <span class="token comment"># 新しく追加した</span>
    <span class="token keyword">def</span> <span class="token function">get_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
      <span class="token triple-quoted-string string">"""</span>
<span class="token triple-quoted-string string">        まだ公開されていない質問は除外する。</span>
<span class="token triple-quoted-string string">      """</span>
      <span class="token keyword">return</span> Question<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>pub_date__lte<span class="token operator">=</span>timezone<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div>
<p>そして新たに追加した機能が動作するか確認するテストを書く。</p>
<p><code>tests.py</code> に下記のコードを追加する。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">QuestionDataViewTests</span><span class="token punctuation">(</span>TestCase<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">def</span> <span class="token function">test_future_question</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""</span>
<span class="token triple-quoted-string string">      detail.htmlの未来の日付のページにアクセスする場合は404を表示する、</span>
<span class="token triple-quoted-string string">    """</span>
    <span class="token comment"># 現在から5日後の質問を作成する</span>
    future_question <span class="token operator">=</span> create_question<span class="token punctuation">(</span>question_text <span class="token operator">=</span> <span class="token string">'未来の質問'</span><span class="token punctuation">,</span> days<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>
    url <span class="token operator">=</span> reverse<span class="token punctuation">(</span><span class="token string">'polls:detail'</span><span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>future_question<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    response <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
    <span class="token comment"># 合格条件</span>
    <span class="token comment"># ページにアクセスした際のステータスコードが404</span>
    self<span class="token punctuation">.</span>assertEqual<span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">,</span> <span class="token number">404</span><span class="token punctuation">)</span>

  <span class="token keyword">def</span> <span class="token function">test_past_question</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""</span>
<span class="token triple-quoted-string string">      過去の質問の場合はページを表示する。</span>
<span class="token triple-quoted-string string">    """</span>
    past_question <span class="token operator">=</span> create_question<span class="token punctuation">(</span>question_text<span class="token operator">=</span><span class="token string">'過去の質問'</span><span class="token punctuation">,</span> days<span class="token operator">=</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span>
    url <span class="token operator">=</span> reverse<span class="token punctuation">(</span><span class="token string">'polls:detail'</span><span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>past_question<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    response <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
    <span class="token comment"># ページに過去の質問が含まれている。</span>
    self<span class="token punctuation">.</span>assertContains<span class="token punctuation">(</span>response<span class="token punctuation">,</span> past_question<span class="token punctuation">.</span>question_text<span class="token punctuation">)</span>
</code></pre></div>
<p>detailビューのテストも書いてきましたが、同様にresultsビューが必要になるが似たようなコードになるのでチュートリアルでは紹介されていない。</p>
<p>別の問題として現在の状態ではChoice（質問に対する選択肢）を持たない質問が公開されている。それを <code>views.py</code> で処理する事が出来るので機能を追加して、ChoicesがないQuestionを作成し、それが公開されないことをテスト、同じようにChoiceがあるQuestionを作成し、それが公開されることをテストをする。</p>
<h2>get_queryset()に選択肢がない質問を表示しないようにfilterを追加する。</h2>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">IndexView</span><span class="token punctuation">(</span>generic<span class="token punctuation">.</span>ListView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    template_name <span class="token operator">=</span> <span class="token string">'polls/index.html'</span>
    <span class="token comment"># テンプレート側でQuestion.objects.order_by('-pub_date')[:5]を呼び出す際の名前を設定している。</span>
    context_object_name <span class="token operator">=</span> <span class="token string">'latest_question_list'</span>

    <span class="token keyword">def</span> <span class="token function">get_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
　　　　　<span class="token comment"># filter内の条件は現在より過去の質問かつ選択肢がある場合に質問オブジェクトを返すようになっている。</span>
        <span class="token keyword">return</span> Question<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>pub_date__lte<span class="token operator">=</span>timezone<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> choice__isnull<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">.</span>distinct<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">'-pub_date'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>

<span class="token keyword">class</span> <span class="token class-name">DetailView</span><span class="token punctuation">(</span>generic<span class="token punctuation">.</span>DetailView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># テンプレートで変数にアクセスする際はquestionになる。</span>
    model <span class="token operator">=</span> Question
    template_name <span class="token operator">=</span> <span class="token string">'polls/detail.html'</span>
    <span class="token keyword">def</span> <span class="token function">get_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>Question<span class="token punctuation">.</span>objects<span class="token punctuation">)</span>
        <span class="token keyword">return</span> Question<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>pub_date__lte<span class="token operator">=</span>timezone<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> choice__isnull<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">.</span>distinct<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div>
<p><code>choice__isnull=False</code> で逆参照を行い 各質問にぶら下がる選択肢を確認する。 選択肢がある場合はおそらく内部でこんな感じに取得できると考えている。 Djangoのシェルに移動して直接データベースAPIを操作して選択肢があり参照関係になっている質問を確認する事ができる。</p>
<p><img src="https://storage.googleapis.com/zenn-user-upload/2010557ea93110bd32304c66.png" alt=""></p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token comment"># 登録された選択肢を全て取り出して、それぞれがどこの質問に結びつけらているか表示している。</span>
<span class="token comment"># 図でいう1, 1, 2を取り出しているのでそれに結びついたQuestionオブジェクトが表示されている。</span>
<span class="token punctuation">[</span>obj<span class="token punctuation">.</span>question <span class="token keyword">for</span> obj <span class="token keyword">in</span> Choice<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token comment"># 実行結果</span>
<span class="token punctuation">[</span><span class="token operator">&#x3C;</span>Question<span class="token punctuation">:</span> what<span class="token string">'s up?>, &#x3C;Question: what'</span>s up?<span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&#x3C;</span>Question<span class="token punctuation">:</span> hello<span class="token operator">></span><span class="token punctuation">]</span>
</code></pre></div>
<p>そして参照関係にない質問は <code>obj.questtion</code> しても空なので <code>false</code> になりその質問には選択肢がないと判断する事ができる。</p>
<h3>distinct()で重複する結果を表示しないようにする。</h3>
<p><img src="https://user-images.githubusercontent.com/23703281/120579717-f7503500-c462-11eb-828d-7cd32685cc2a.png" alt="Join 001"></p>
<p>親テーブルと子テーブルをJoinして作成された新しいテーブルになる。</p>
<p>そして同じフィールドに別の値を入れる事が出来ないので選択肢に対してどの質問が参照されているのかという表示方法になる。</p>
<p>そのため、1つの質問で複数の選択肢を参照している質問は参照する選択肢の数だけ表示されることになる。</p>
<p><img src="https://user-images.githubusercontent.com/23703281/120579889-34b4c280-c463-11eb-8eeb-527e5a8dece5.png" alt="polls_filter_join"></p>
<p><a href="http://127.0.0.1:8000/polls/">http://127.0.0.1:8000/polls/</a></p>
<p>アクセスすると質問が重複して表示される。</p>
<p>この重複項目をなくすために <code>distict()</code> を使用する。</p>
<p><img src="https://user-images.githubusercontent.com/23703281/120580005-5dd55300-c463-11eb-8b34-2399662f8223.png" alt="distinct"></p>
<p>そうすると重複項目がなくなり、選択肢がない質問だけを表示する事ができる。</p>
<h2>新しく追加した機能のテストコードを書いていく。</h2>
<p>まず <code>tests.py</code> の <code>create_question()</code> で選択肢を含む質問を作成できるようにする。</p>
<p><code>choice_texts</code> に値がある場合は、それを元に選択肢を作成する。複数作成することもできる。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">create_question</span><span class="token punctuation">(</span>question_text<span class="token punctuation">,</span> days<span class="token punctuation">,</span> choice_texts<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token triple-quoted-string string">"""</span>
<span class="token triple-quoted-string string">    質問を `question_text` と投稿された日から作成する。現在より過去の時間で投稿したい場合は days= -days、</span>
<span class="token triple-quoted-string string">    未来の時間で投稿したい場合は対してはdays= +daysとする。</span>
<span class="token triple-quoted-string string">  """</span>
  time <span class="token operator">=</span> timezone<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span>days<span class="token punctuation">)</span>
  q <span class="token operator">=</span> Question<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>question_text<span class="token operator">=</span>question_text<span class="token punctuation">,</span> pub_date<span class="token operator">=</span>time<span class="token punctuation">)</span>
  <span class="token comment"># 選択肢がある場合とない場合で変数に格納した際返ってくるモデルが変わるから注意が必要</span>
  <span class="token comment"># 選択肢があるとChoiceオブジェクトが変える。ないとQuestionオブジェクトになる。</span>
  <span class="token keyword">if</span> choice_texts<span class="token punctuation">:</span>
    <span class="token keyword">for</span> choice_text <span class="token keyword">in</span> choice_texts<span class="token punctuation">:</span>
      <span class="token keyword">return</span> q<span class="token punctuation">.</span>choice_set<span class="token punctuation">.</span>create<span class="token punctuation">(</span>choice_text<span class="token operator">=</span>choice_text<span class="token punctuation">,</span> votes<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> q
</code></pre></div>
<p>これを使って、先ほど追加した indexページ、detailページで選択肢がない質問が表示されていないか確認するテストコードを書いていく、そして前回作成したテストも選択肢がない質問の場合ページが表示されなくなっているので、作成する質問に選択肢を付けてあげないとテストが通らなくなっている。</p>
<p>その修正も行う。このように一部変更を加えたために今まで通ってたテストを含めて、全体を修正しなくてはならないコードはとても修正が大変なので良いコードとは言えないかもしれない。もしもっと良いテストコードの書き方があったら教えて下さい。</p>
<p><code>tests.py</code> これがテストの全体コードになる。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">import</span> datetime
<span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> response
<span class="token keyword">from</span> django<span class="token punctuation">.</span>test <span class="token keyword">import</span> TestCase
<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> reverse
<span class="token keyword">from</span> django<span class="token punctuation">.</span>utils <span class="token keyword">import</span> timezone
<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Choice<span class="token punctuation">,</span> Question

<span class="token comment"># テストコードの書き方はTestCaseを継承する事</span>
<span class="token comment"># メソッド名をtestから始める事でDjango側で実行してくれるようになる。</span>

<span class="token keyword">class</span> <span class="token class-name">QuestionModelTests</span><span class="token punctuation">(</span>TestCase<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">def</span> <span class="token function">test_was_published_recently_with_future_question</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""</span>
<span class="token triple-quoted-string string">      was_published_recently()はpub_dateが未来の場合Falseを返す。</span>
<span class="token triple-quoted-string string">    """</span>

    time <span class="token operator">=</span> timezone<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span>
    future_question <span class="token operator">=</span> Question<span class="token punctuation">(</span>pub_date<span class="token operator">=</span>time<span class="token punctuation">)</span>

    self<span class="token punctuation">.</span>assertIs<span class="token punctuation">(</span>future_question<span class="token punctuation">.</span>was_published_recently<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>

  <span class="token keyword">def</span> <span class="token function">test_was_published_recently_with_recent_question</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""</span>
<span class="token triple-quoted-string string">      was_published_recently()はpub_dateが昨日までに投稿されたものなら　Trueを返す。</span>
<span class="token triple-quoted-string string">    """</span>
    time <span class="token operator">=</span> timezone<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>hours<span class="token operator">=</span><span class="token number">23</span><span class="token punctuation">,</span> minutes<span class="token operator">=</span><span class="token number">59</span><span class="token punctuation">,</span> seconds<span class="token operator">=</span><span class="token number">59</span><span class="token punctuation">)</span>
    recent_question <span class="token operator">=</span> Question<span class="token punctuation">(</span>pub_date<span class="token operator">=</span>time<span class="token punctuation">)</span>

    self<span class="token punctuation">.</span>assertIs<span class="token punctuation">(</span>recent_question<span class="token punctuation">.</span>was_published_recently<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>
  
<span class="token keyword">def</span> <span class="token function">create_question</span><span class="token punctuation">(</span>question_text<span class="token punctuation">,</span> days<span class="token punctuation">,</span> choice_texts<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token triple-quoted-string string">"""</span>
<span class="token triple-quoted-string string">    質問を `question_text` と投稿された日から作成する。現在より過去の時間で投稿したい場合は days= -days、</span>
<span class="token triple-quoted-string string">    未来の時間で投稿したい場合は対してはdays= +daysとする。</span>
<span class="token triple-quoted-string string">  """</span>
  time <span class="token operator">=</span> timezone<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span>days<span class="token punctuation">)</span>
  q <span class="token operator">=</span> Question<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>question_text<span class="token operator">=</span>question_text<span class="token punctuation">,</span> pub_date<span class="token operator">=</span>time<span class="token punctuation">)</span>
  <span class="token comment"># 選択肢がある場合とない場合で変数に格納した際返ってくるモデルが変わるから注意が必要</span>
  <span class="token comment"># 選択肢があるとChoiceオブジェクトが変える。ないとQuestionオブジェクトになる。</span>
  <span class="token keyword">if</span> choice_texts<span class="token punctuation">:</span>
    <span class="token keyword">for</span> choice_text <span class="token keyword">in</span> choice_texts<span class="token punctuation">:</span>
      <span class="token keyword">return</span> q<span class="token punctuation">.</span>choice_set<span class="token punctuation">.</span>create<span class="token punctuation">(</span>choice_text<span class="token operator">=</span>choice_text<span class="token punctuation">,</span> votes<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> q

<span class="token keyword">class</span> <span class="token class-name">QuestionIndexViewTests</span><span class="token punctuation">(</span>TestCase<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">def</span> <span class="token function">test_no_questions</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># reverse('polls:index')でpollsのindexページURLを返している。それを利用してアクセスしている。</span>
    response <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>get<span class="token punctuation">(</span>reverse<span class="token punctuation">(</span><span class="token string">'polls:index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>assertEqual<span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>assertContains<span class="token punctuation">(</span>response<span class="token punctuation">,</span> <span class="token string">"No polls are available"</span><span class="token punctuation">)</span>

    self<span class="token punctuation">.</span>assertQuerysetEqual<span class="token punctuation">(</span>response<span class="token punctuation">.</span>context<span class="token punctuation">[</span><span class="token string">'latest_question_list'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token keyword">def</span> <span class="token function">test_past_question</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    question <span class="token operator">=</span> create_question<span class="token punctuation">(</span>question_text<span class="token operator">=</span><span class="token string">"Past question."</span><span class="token punctuation">,</span> days<span class="token operator">=</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">,</span> choice_texts<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'game set'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    response <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>get<span class="token punctuation">(</span>reverse<span class="token punctuation">(</span><span class="token string">'polls:index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>assertQuerysetEqual<span class="token punctuation">(</span>
      response<span class="token punctuation">.</span>context<span class="token punctuation">[</span><span class="token string">'latest_question_list'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">[</span>question<span class="token punctuation">.</span>question<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
  
  <span class="token keyword">def</span> <span class="token function">test_future_question</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    create_question<span class="token punctuation">(</span>question_text<span class="token operator">=</span><span class="token string">"Future question."</span><span class="token punctuation">,</span> days<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> choice_texts<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'game set'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    response <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>get<span class="token punctuation">(</span>reverse<span class="token punctuation">(</span><span class="token string">'polls:index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>assertContains<span class="token punctuation">(</span>response<span class="token punctuation">,</span> <span class="token string">"No polls are available"</span><span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>assertQuerysetEqual<span class="token punctuation">(</span>response<span class="token punctuation">.</span>context<span class="token punctuation">[</span><span class="token string">'latest_question_list'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token keyword">def</span> <span class="token function">test_future_question_and_past_question</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 片方だけ変数に入れるのはテストの合格条件を判別する際に過去質問が表示されているのを確認するため</span>
    question <span class="token operator">=</span> create_question<span class="token punctuation">(</span>question_text<span class="token operator">=</span><span class="token string">"Past question."</span><span class="token punctuation">,</span> days<span class="token operator">=</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">,</span> choice_texts<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'game set'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    create_question<span class="token punctuation">(</span>question_text<span class="token operator">=</span><span class="token string">"Future question."</span><span class="token punctuation">,</span> days<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> choice_texts<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'game set'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    response <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>get<span class="token punctuation">(</span>reverse<span class="token punctuation">(</span><span class="token string">'polls:index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>assertQuerysetEqual<span class="token punctuation">(</span>
      response<span class="token punctuation">.</span>context<span class="token punctuation">[</span><span class="token string">'latest_question_list'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">[</span>question<span class="token punctuation">.</span>question<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
  
  <span class="token keyword">def</span> <span class="token function">test_two_past_question</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    question1 <span class="token operator">=</span> create_question<span class="token punctuation">(</span>question_text<span class="token operator">=</span><span class="token string">"Past question 1."</span><span class="token punctuation">,</span> days<span class="token operator">=</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">,</span> choice_texts<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'game set'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    question2 <span class="token operator">=</span> create_question<span class="token punctuation">(</span>question_text<span class="token operator">=</span><span class="token string">"Past qustion 2."</span><span class="token punctuation">,</span> days<span class="token operator">=</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> choice_texts<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'game set'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    response <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>get<span class="token punctuation">(</span>reverse<span class="token punctuation">(</span><span class="token string">'polls:index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>assertQuerysetEqual<span class="token punctuation">(</span>
      response<span class="token punctuation">.</span>context<span class="token punctuation">[</span><span class="token string">'latest_question_list'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>question2<span class="token punctuation">.</span>question<span class="token punctuation">,</span> question1<span class="token punctuation">.</span>question<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>

  <span class="token keyword">def</span> <span class="token function">test_choice_question</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""</span>
<span class="token triple-quoted-string string">      Indexページで</span>
<span class="token triple-quoted-string string">      選択肢のある質問を表示する。</span>
<span class="token triple-quoted-string string">    """</span>
    choice_question <span class="token operator">=</span> create_question<span class="token punctuation">(</span>question_text<span class="token operator">=</span><span class="token string">'Indexページでの選択肢のある質問'</span><span class="token punctuation">,</span> days<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> choice_texts<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'game set'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    url <span class="token operator">=</span> reverse<span class="token punctuation">(</span><span class="token string">'polls:index'</span><span class="token punctuation">)</span>
    response <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>assertContains<span class="token punctuation">(</span>response<span class="token punctuation">,</span> choice_question<span class="token punctuation">.</span>question<span class="token punctuation">)</span>
  
  <span class="token keyword">def</span> <span class="token function">test_no_choice_question</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""</span>
<span class="token triple-quoted-string string">      Indexページで</span>
<span class="token triple-quoted-string string">      選択肢がない質問は表示しない。</span>
<span class="token triple-quoted-string string">    """</span>
    no_choice_question <span class="token operator">=</span> create_question<span class="token punctuation">(</span>question_text<span class="token operator">=</span><span class="token string">'Indexページでの選択肢のない質問'</span><span class="token punctuation">,</span> days<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    url <span class="token operator">=</span> reverse<span class="token punctuation">(</span><span class="token string">'polls:index'</span><span class="token punctuation">)</span>
    response <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>assertNotContains<span class="token punctuation">(</span>response<span class="token punctuation">,</span> no_choice_question<span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">QuestionDataViewTests</span><span class="token punctuation">(</span>TestCase<span class="token punctuation">)</span><span class="token punctuation">:</span>

  <span class="token keyword">def</span> <span class="token function">test_future_question</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""</span>
<span class="token triple-quoted-string string">      detail.htmlの未来の日付のページにアクセスする場合は404を表示する、</span>
<span class="token triple-quoted-string string">    """</span>
    <span class="token comment"># 現在から5日後の質問を作成する</span>
    future_question <span class="token operator">=</span> create_question<span class="token punctuation">(</span>question_text <span class="token operator">=</span> <span class="token string">'未来の質問'</span><span class="token punctuation">,</span> days<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>
    url <span class="token operator">=</span> reverse<span class="token punctuation">(</span><span class="token string">'polls:detail'</span><span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>future_question<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    response <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
    <span class="token comment"># 合格条件</span>
    <span class="token comment"># ページにアクセスした際のステータスコードが404</span>
    self<span class="token punctuation">.</span>assertEqual<span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">,</span> <span class="token number">404</span><span class="token punctuation">)</span>

  <span class="token keyword">def</span> <span class="token function">test_past_question</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""</span>
<span class="token triple-quoted-string string">      Detailページ</span>
<span class="token triple-quoted-string string">      過去の質問の場合はページを表示する。</span>
<span class="token triple-quoted-string string">    """</span>
    past_question <span class="token operator">=</span> create_question<span class="token punctuation">(</span>question_text<span class="token operator">=</span><span class="token string">'過去の質問'</span><span class="token punctuation">,</span> days<span class="token operator">=</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> choice_texts<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'geme set'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    url <span class="token operator">=</span> reverse<span class="token punctuation">(</span><span class="token string">'polls:detail'</span><span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>past_question<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    response <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
    <span class="token comment"># ページに過去の質問が含まれている。</span>
    self<span class="token punctuation">.</span>assertContains<span class="token punctuation">(</span>response<span class="token punctuation">,</span> past_question<span class="token punctuation">.</span>question<span class="token punctuation">)</span>
  
  <span class="token keyword">def</span> <span class="token function">test_choice_question</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""</span>
<span class="token triple-quoted-string string">      Detailページ</span>
<span class="token triple-quoted-string string">      選択肢のある質問を表示する。</span>
<span class="token triple-quoted-string string">    """</span>
    choice_question <span class="token operator">=</span> create_question<span class="token punctuation">(</span>question_text<span class="token operator">=</span><span class="token string">'detailページでの選択肢がある質問'</span><span class="token punctuation">,</span> days<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> choice_texts<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'game set'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    url <span class="token operator">=</span> reverse<span class="token punctuation">(</span><span class="token string">'polls:detail'</span><span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>choice_question<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    response <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>assertContains<span class="token punctuation">(</span>response<span class="token punctuation">,</span> choice_question<span class="token punctuation">.</span>choice_text<span class="token punctuation">)</span>

  <span class="token keyword">def</span> <span class="token function">test_no_choice_question</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""</span>
<span class="token triple-quoted-string string">      選択肢がない質問は表示しない。</span>
<span class="token triple-quoted-string string">    """</span>
    no_choice_question <span class="token operator">=</span> create_question<span class="token punctuation">(</span>question_text<span class="token operator">=</span><span class="token string">'detailページでの選択肢のない質問'</span><span class="token punctuation">,</span> days<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    url <span class="token operator">=</span> reverse<span class="token punctuation">(</span><span class="token string">'polls:detail'</span><span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>no_choice_question<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    response <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>assertEqual<span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">,</span> <span class="token number">404</span><span class="token punctuation">)</span>
</code></pre></div>
<p>まずは今まで動作していたテストが選択肢がない質問だったので、選択肢 <code>['game set']</code> を追加して再び動作するように変更する。</p>
<p>その際に <code>choice_set.create</code> で選択肢を追加した場合、返り値が Questionオブジェクトではなく Choiceオブジェクトになるので質問を取り出す際は <code>返り値.question</code> とする必要がある。</p>
<p>問題なければ、テストが13個実行され OK と表示される。</p>
<h2>スタイルシート・静的ファイルを追加する。</h2>
<h3>スタイルシートを追加</h3>
<p>pollsディレクトリにstaticディレクトリを作成する。そうするとDjangoはそこから静的ファイルを探してくれる。 <code>polls/static/polls</code> と templateディレクトリを作成した時みたいになる。</p>
<p>先ほど追加したディレクトリに <code>style.css</code> を追加する。 <code>polls/static/polls/style.css</code> のようになる。</p>
<p>style.css</p>
<div class="remark-highlight"><pre class="language-css"><code class="language-css"><span class="token selector">li a</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token color">green</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>polls/templates/polls/index.html の上部に下記のコードを追加する。</p>
<div class="remark-highlight"><pre class="language-css"><code class="language-css"><span class="token punctuation">{</span>% load static %<span class="token punctuation">}</span>

&#x3C;link rel=<span class="token string">"stylesheet"</span> type=<span class="token string">"text/css"</span> href=<span class="token string">"{% static 'polls/style.css' %}"</span>>
</code></pre></div>
<h3>画像を追加する</h3>
<p><code>polls/static/polls/images/</code> とディレクトリを作成する。その中に 好きな画像をおく。</p>
<p>スタイルシートで背景画像として読み込む</p>
<div class="remark-highlight"><pre class="language-css"><code class="language-css"><span class="token selector">body</span> <span class="token punctuation">{</span>
    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token color">white</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"images/background.gif"</span><span class="token punctuation">)</span></span> no-repeat<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">li a</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token color">green</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>
<h2>adminのフォームをカスタマイズする</h2>
<h3>編集フォームでのフィールドの並び順を替える</h3>
<p>質問の詳細ページでのフィールドの並び順を変更する。</p>
<p>polls/admin.py</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin

<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Question

<span class="token keyword">class</span> <span class="token class-name">QuestionAdmin</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span>ModelAdmin<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># この順番で表示されるようになる。</span>
    fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'pub_date'</span><span class="token punctuation">,</span> <span class="token string">'question_text'</span><span class="token punctuation">]</span>

<span class="token comment"># 第二引数で作成したclassを渡す</span>
admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>Question<span class="token punctuation">,</span> QuestionAdmin<span class="token punctuation">)</span>
admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>Choice<span class="token punctuation">)</span>
</code></pre></div>
<p>変更前</p>
<p><img src="https://user-images.githubusercontent.com/23703281/120580070-83625c80-c463-11eb-8a4b-1eb945075646.png" alt="QuestionAdmin変更前"></p>
<p>変更後</p>
<p>pub_dateとquestion_textの位置が入れ替わってる。</p>
<p><img src="https://user-images.githubusercontent.com/23703281/120580139-9b39e080-c463-11eb-8426-11248fac4d00.png" alt="QuestionAdmin変更後"></p>
<h3>フィールドを分割する。</h3>
<p>polls/admin.py</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin

<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Question

<span class="token keyword">class</span> <span class="token class-name">QuestionAdmin</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span>ModelAdmin<span class="token punctuation">)</span><span class="token punctuation">:</span>
    fieldsets <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span>               <span class="token punctuation">{</span><span class="token string">'fields'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'question_text'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">(</span><span class="token string">'Date information'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'fields'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'pub_date'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span>

admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>Question<span class="token punctuation">,</span> QuestionAdmin<span class="token punctuation">)</span>
</code></pre></div>
<h3>ChoiceオブジェクトをQuestionフォームから追加・編集する。</h3>
<p>現在Choiceフォームから質問に選択肢を追加・編集可能ですが、これだとページを移動したりと効率が悪いので Questionフォームから追加・編集できるようにする。</p>
<p>polls/admin.py</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin

<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Choice<span class="token punctuation">,</span> Question

<span class="token keyword">class</span> <span class="token class-name">ChoiceInline</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span>StackedInline<span class="token punctuation">)</span><span class="token punctuation">:</span>
    model <span class="token operator">=</span> Choice
    extra <span class="token operator">=</span> <span class="token number">3</span>

<span class="token keyword">class</span> <span class="token class-name">QuestionAdmin</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span>ModelAdmin<span class="token punctuation">)</span><span class="token punctuation">:</span>
    fieldsets <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span>               <span class="token punctuation">{</span><span class="token string">'fields'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'question_text'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">(</span><span class="token string">'Date information'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'fields'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'pub_date'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'classes'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'collapse'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span>
    inlines <span class="token operator">=</span> <span class="token punctuation">[</span>ChoiceInline<span class="token punctuation">]</span>

admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>Question<span class="token punctuation">,</span> QuestionAdmin<span class="token punctuation">)</span>
</code></pre></div>
<p>コードを追加するとQuestionフォームに3つ（extraで数の調整ができる）の <code>choice_text, votes</code> を設定できる項目が追加される。</p>
<p>今のままだと多くの画面スペースを必要とするのでこれを小さくする。</p>
<p><code>class ChoiceInline</code> の引数を <code>TabularInline</code>  に変更する。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ChoiceInline</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span>TabularInline<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment">#...</span>
</code></pre></div>
<p>これでコンパクトになったと思う。</p>
<h2>pollsの質問一覧ページをカスタマイズする。</h2>
<p>チェンジリストページと呼ばれるページで（<a href="http://127.0.0.1:8000/admin/polls/question/">http://127.0.0.1:8000/admin/polls/question/</a>）質問の一覧が表示されている。</p>
<p>現在は オブジェクトの名前（どんな質問が格納されているのがわかる）だけが表示されていますが、各フィールドの値を表示してより多くの情報をここで確認できるようにする。</p>
<p>polls/admin.py</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">QuestionAdmin</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span>ModelAdmin<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># ...</span>
    list_display <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'question_text'</span><span class="token punctuation">,</span> <span class="token string">'pub_date'</span><span class="token punctuation">,</span> <span class="token string">'was_published_recently'</span><span class="token punctuation">)</span>
</code></pre></div>
<p>各カラムのヘッダーをクリックすると並び替えを行えるが、 <code>was_published_recently</code> だけは並び替えをサポート出来ていないので、 <code>@</code> デコレータを使用して並び替えの対応させていく。</p>
<p>デコレータなのでクラスメソッドの直前に追加する。</p>
<p>polls/models.py</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin

<span class="token keyword">class</span> <span class="token class-name">Question</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># ...</span>

    <span class="token comment"># ここを新しく追加した。</span>
    <span class="token decorator annotation punctuation">@admin<span class="token punctuation">.</span>display</span><span class="token punctuation">(</span>
        boolean<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
        ordering<span class="token operator">=</span><span class="token string">'pub_date'</span><span class="token punctuation">,</span>
        description<span class="token operator">=</span><span class="token string">'Published recently?'</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">was_published_recently</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        now <span class="token operator">=</span> timezone<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> now <span class="token operator">-</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&#x3C;=</span> self<span class="token punctuation">.</span>pub_date <span class="token operator">&#x3C;=</span> now
</code></pre></div>
<h3>質問を日付でフィルター掛けれるようにする。</h3>
<p><code>pub_date</code> の日付を元に質問を絞れるようにする。フィルタは対象のフィールドの種類によって変化する。 <code>pub_date</code> は <code>DateTimeField</code> なので、Django はこのフィールドにふさわしいフィルタオプションが、「すべての期間 ("Any date")」「今日 ("Today")」「今週 ("Past 7 days")」「今月 ("This month")」</p>
<p>を用意してくれる。</p>
<p>polls/admin.py</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin

<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Choice<span class="token punctuation">,</span> Question

<span class="token keyword">class</span> <span class="token class-name">ChoiceInline</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span>StackedInline<span class="token punctuation">)</span><span class="token punctuation">:</span>
    model <span class="token operator">=</span> Choice
    extra <span class="token operator">=</span> <span class="token number">3</span>

<span class="token keyword">class</span> <span class="token class-name">QuestionAdmin</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span>ModelAdmin<span class="token punctuation">)</span><span class="token punctuation">:</span>
    fieldsets <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span>               <span class="token punctuation">{</span><span class="token string">'fields'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'question_text'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">(</span><span class="token string">'Date information'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'fields'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'pub_date'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'classes'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'collapse'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span>
    inlines <span class="token operator">=</span> <span class="token punctuation">[</span>ChoiceInline<span class="token punctuation">]</span>
    <span class="token comment"># 新しく追加した。</span>
    list_filter <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'pub_date'</span><span class="token punctuation">]</span>

admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>Question<span class="token punctuation">,</span> QuestionAdmin<span class="token punctuation">)</span>
</code></pre></div>
<h3>質問の検索機能を追加する。</h3>
<p>先ほどのコードにさらに変数を追加する。</p>
<p><code>question_text</code> フィールドをユーザが入力した文字列を元に Likeクエリで検索するのでデータベースに割と負荷がかかるみたいで常識の範囲で使用しましょうとチュートリアルに記述されている。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token comment"># ...</span>
list_filter <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'pub_date'</span><span class="token punctuation">]</span>
<span class="token comment"># 新しく追加した</span>
search_fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'question_text'</span><span class="token punctuation">]</span>
</code></pre></div>
<h3>管理サイトの見た目をカスタマイズする。</h3>
<p>管理サイトの上部に Django administration と書かれているのでこれを Polls administration と変更してみたいと思う。</p>
<p><code>manage.py</code> が置かれているディレクトリに templates ディレクトリを作成する。その中に adminフォルダを作成する。 <code>templates/admin</code> みたいな構成になる。</p>
<p>その中にデフォルトのDjango adminのテンプレートをコピーして貼り付ける。</p>
<p>場所は 下記のコマンドから確認できる。anacondaの環境の場合は仮想環境内で実行する必要がある。</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">python -c <span class="token string">"import django; print(django.__path__)"</span>
</code></pre></div>
<p>そして開いたファイルを下記のように編集する。</p>
<p>変更前</p>
<div class="remark-highlight"><pre class="language-html"><code class="language-html">{% extends "admin/base.html" %}

{% block title %}{% if subtitle %}{{ subtitle }} | {% endif %}{{ title }} | {{ site_title|default:_('Django site admin') }}{% endblock %}

{% block branding %}
<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>h1</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>site-name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>admin:index<span class="token punctuation">'</span> %}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ site_header|default:_('Django administration') }}<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>h1</span><span class="token punctuation">></span></span>
{% endblock %}

{% block nav-global %}{% endblock %}
</code></pre></div>
<p>変更後</p>
<div class="remark-highlight"><pre class="language-html"><code class="language-html">{% extends "admin/base.html" %}

{% block title %}{% if subtitle %}{{ subtitle }} | {% endif %}{{ title }} | {{ site_title|default:_('Django site admin') }}{% endblock %}

{% block branding %}
<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>h1</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>site-name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>admin:index<span class="token punctuation">'</span> %}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Polls Administration<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>h1</span><span class="token punctuation">></span></span>
{% endblock %}

{% block nav-global %}{% endblock %}
</code></pre></div>
<p>次に <code>mysite/settings.py</code> を開いて <code>TEMPLATES</code> 設定オプションの中にある <code>DIRS</code> オプションを下記のように変更する。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python">TEMPLATES <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        <span class="token string">'BACKEND'</span><span class="token punctuation">:</span> <span class="token string">'django.template.backends.django.DjangoTemplates'</span><span class="token punctuation">,</span>
        <span class="token comment"># ここを新しく追加した。</span>
        <span class="token string">'DIRS'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>BASE_DIR <span class="token operator">/</span> <span class="token string">'templates'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token string">'APP_DIRS'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>
        <span class="token string">'OPTIONS'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
            <span class="token string">'context_processors'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
                <span class="token string">'django.template.context_processors.debug'</span><span class="token punctuation">,</span>
                <span class="token string">'django.template.context_processors.request'</span><span class="token punctuation">,</span>
                <span class="token string">'django.contrib.auth.context_processors.auth'</span><span class="token punctuation">,</span>
                <span class="token string">'django.contrib.messages.context_processors.messages'</span><span class="token punctuation">,</span>
            <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre></div>
<p>これでデフォルトのテンプレートをオーバライドすることが出来た。</p>
<p>これでチュートリアル5~7の内容は終了した。</p>
<h2>最後に</h2>
<p>チュートリアル5でテストコードを初めて書く経験が出来てよかったです。途中チュートリアルから外れた事をしようとした際に逆参照でモデルからデータを取得する方法がわからなくてかなり時間が掛かりました。SQLデータベースの理解がまだ乏しいのでもう少しデータベースに慣れてからDjangoでアウトプットとして、Webアプリを作成したいと思います。</p>
<h3>参照</h3>
<p><a href="https://yaruki-strong-zero.hatenablog.jp/entry/django_model_lookup">DjangoのModelからデータを取り出す方法をまとめとく - やる気がストロングZERO</a></p>
<p><a href="https://www.ipentec.com/document/sql-duplicate-records-with-join">LEFT JOIN / INNER JOIN を実行すると同じ内容のレコードが複数含まれる - SQLの構文</a></p>
<p><a href="https://sleepless-se.net/2018/07/06/django%E9%96%A2%E9%80%A3%E3%83%A2%E3%83%87%E3%83%AB%E3%81%AE%E3%83%95%E3%82%A3%E3%83%BC%E3%83%AB%E3%83%89%E3%81%A7%E6%9D%A1%E4%BB%B6%E6%8C%87%E5%AE%9A%EF%BC%88filter%E3%81%99%E3%82%8B%E6%96%B9/"></a></p>
<p><a href="https://docs.djangoproject.com/ja/3.2/intro/tutorial07/">ドキュメント</a></p>
<p>記事に関するコメント等は</p>
<p>🕊：<a href="https://twitter.com/Unemployed_jp">Twitter</a>
📺：<a href="https://www.youtube.com/channel/UCT3wLdiZS3Gos87f9fu4EOQ/featured?view_as=subscriber">Youtube</a>
📸：<a href="https://www.instagram.com/unemployed_jp/">Instagram</a>
👨🏻‍💻：<a href="https://github.com/wimpykid719?tab=repositories">Github</a>
😥：<a href="https://ja.stackoverflow.com/users/edit/22565">Stackoverflow</a></p>
<p>でも受け付けています。どこかにはいます。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django公式チュートリアル（1~4）で分からない所、徹底的に調べた。]]></title>
        <id>https://techblog-pink.vercel.app/posts/django-tutorial</id>
        <link href="https://techblog-pink.vercel.app/posts/django-tutorial"/>
        <updated>2021-05-24T15:00:00.000Z</updated>
        <summary type="html"><![CDATA[本格的なWebアプリケーションを作成したいのでPythonのフレームワークDjango（読み方：ジャンゴらしい。ディーどこ行った。）についてチュートリアルをこなしながら学んで行こうと思う。実際に作成するアプリは質問に対して回答して投票を表示するアプリになる。...]]></summary>
        <content type="html"><![CDATA[<h2>最初に</h2>
<p>本格的なWebアプリケーションを作成したいのでPythonのフレームワークDjango（読み方：ジャンゴらしい。ディーどこ行った。）についてチュートリアルをこなしながら学んで行こうと思う。実際に作成するアプリは質問に対して回答して投票を表示するアプリになる。</p>
<p>この記事は公式チュートリアルの1〜4までに気になった事躓いた事をまとめていく。全部で1〜7まであるが4までにアプリは完成する。</p>
<p>5からはテストコード等を書いていくのでボリュームが多くなるため、前編として今回の記事を投稿する。後編も必ず書こうと思う。</p>
<h2>今回のチュートリアルで作成したもの</h2>
<p>質問一覧のページがあって、そこから質問に対して投票を行う。その後今まで投票された数を表示するページリダイレクトされる。</p>
<p><img src="https://user-images.githubusercontent.com/23703281/119465477-a8c5db00-bd7e-11eb-8245-df9008d26b42.gif" alt="django-tutorial"></p>
<h2>VSCodeのPython用の拡張機能をインストールする。</h2>
<p>コードを書くにあたって構文エラーは事前に無くしたいので、拡張機能をインストールする。マイクロソフトがPython用に提供しているものがあるのでそちらをインストールする。</p>
<p>自分はanaconda環境での使用をしているので下記の通知が出てきた。</p>
<p><code>terminal.integrated.inheritEnv</code> を <code>false</code> にした方が良いらしい。</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">We noticed you&#x26;#39;re using a conda environment. If you are experiencing issues with this environment in the integrated terminal, we recommend that you let the Python extension change &#x26;quot;terminal.integrated.inheritEnv&#x26;quot; to false in your user settings.</code></pre></div>
<p>VSCodeの code > preference > settings に <code>terminal.integrated.inheritEnv</code> と入力して出てきたチェックを外す。</p>
<p><a href="https://yuki.world/vscode-terminal-python/">【Mac/Python】VSCodeターミナル動作が通常ターミナルと違う時 | ゆうきのせかい</a></p>
<p>それだけだと <code>Import "django.contrib" could not be resolved from source</code> という警告がでたままなので、赤枠の箇所をクリックしてDjangoをインストールした環境を選択すると警告文が消えます。</p>
<p><img src="https://storage.googleapis.com/zenn-user-upload/koqbmvs8nwqpy3bbt2tbjzlhutyx" alt=""></p>
<h2>インストール</h2>
<p>好きなフォルダーを作成して、そこに開発していく。Pythonの環境構築は自分は下記のように行っている。</p>
<p><a href="https://techblog-pink.vercel.app/posts/cc111706c3167c">https://techblog-pink.vercel.app/posts/cc111706c3167</a></p>
<p>anacondaで仮想環境を作成して、Djangoをインストールしていく。</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">pip <span class="token function">install</span> Django
</code></pre></div>
<p>開発を始めたいフォルダに移動して下記を実行する。</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">django-admin startproject mysite
</code></pre></div>
<p>mysiteというディレクトリが生成される。</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">mysite/
    manage.py
    mysite/
        __init__.py
        settings.py
        urls.py
        asgi.py
        wsgi.py</code></pre></div>
<p>フォルダはこのような構成になっている。 <code>mysite/mysite</code> となっているのが不思議だ。外側の <code>mysite</code> はDjangoのシステム的には何でも良いらしい。</p>
<p><code>urls.py</code> はプロジェクトのURLを宣言する。目次のような機能を提供する。</p>
<p>サーバを起動する。</p>
<p>実行すると <a href="http://127.0.0.1:8000/">http://127.0.0.1:8000/</a> でサイトにアクセス出来るようになる。</p>
<p>最初はデータベース等の設定をしていないので、ターミナルに警告が表示されるが他に問題がなければアクセス出来る。 <code>ctr + c</code> でサーバを終了することが出来る。</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">python manage.py runserver
</code></pre></div>
<h2>GitHubで管理する</h2>
<p>これから開発していくので、Githubにコードをあげて進捗を管理したい。しかし、このままだと <code>settings.py</code> に書かれた <code>SECRET_KEY</code> も一緒にアップロードしてしまうので別ファイル <code>local_settings.py</code> に <code>SECRET_KEY</code> を書く。ちなみに私は気付かずに一度GitHubに、そのままアップしてしまった。そのため新たに <code>SECRET_KEY</code> を作成する手間が掛かる。</p>
<p><code>local_settings.py</code></p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python">SECRET_KEY <span class="token operator">=</span> <span class="token string">'settings.pyにあったシークレットキーまたは、新たに作成したもの'</span>
</code></pre></div>
<p>この変数を <code>settings.py</code> で読み込んでいく。下記のコードを追加する。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>
    <span class="token comment"># 同じ階層のlocal_settingsファイルからSECRET_KEYをkeyとして読み込む。</span>
    <span class="token comment"># 参考記事等では .local_settingsとなっているが、local_settingsはファイルなので必要ない</span>
    <span class="token comment"># 将来的に複雑にファイルを分ける必要が出てフォルダにする場合は .が必要となる。</span>
    <span class="token comment"># ダメだった .local_settingsが正しかった。Django環境だとパッケージとして見なされるのか...</span>
    <span class="token keyword">from</span> <span class="token punctuation">.</span>local_settings <span class="token keyword">import</span> SECRET_KEY <span class="token keyword">as</span> key
<span class="token keyword">except</span> ImportError<span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

<span class="token comment"># シークレットキーの部分を読み込んだ変数に置き換える。</span>
SECRET_KEY <span class="token operator">=</span> key
</code></pre></div>
<p>実際に <code>test.py</code> と <code>test2.py</code> を同じ階層に作成してどのように読み込まれるか調べてみた。</p>
<p><code>test.py</code></p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python">hello <span class="token operator">=</span> <span class="token string">"hello"</span>
</code></pre></div>
<p><code>test2.py</code></p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token comment"># .testとするとImportError: attempted relative import with no known parent package</span>
<span class="token comment"># と表示される。</span>
<span class="token comment"># asを付けない場合は helloで読み込まれる。</span>
<span class="token keyword">from</span> test <span class="token keyword">import</span> hello <span class="token keyword">as</span> A

<span class="token keyword">print</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>
</code></pre></div>
<p><code>settings.py</code> と同じ環境に出来ていると思ったが、全然違った。 <code>local_settings.py</code> は パッケージとして認識されるが、 <code>test.py</code> はパッケージとして認識されないので <code>.</code> を使用するとエラーになる。そもそも <code>python test2.py</code> と直接実行しているので <code>settings.py</code> とは違う実行状況になる。</p>
<p>詳しくは<a href="https://ja.stackoverflow.com/questions/75892/python-django-%e3%81%aeimport%e3%81%ae%e9%9a%9b%e3%81%ab%e4%bd%bf%e7%94%a8%e3%81%99%e3%82%8b-%e3%83%89%e3%83%83%e3%83%88-%e3%81%8c%e3%81%a9%e3%81%ae%e3%82%88%e3%81%86%e3%81%ab%e4%bd%bf%e7%94%a8%e3%81%95%e3%82%8c%e3%82%8b%e3%81%ae%e3%81%8b%e5%88%86%e3%81%8b%e3%82%89%e3%81%aa%e3%81%84/75895?noredirect=1#comment85968_75895">ここで回答を頂いている。</a></p>
<h2>SECRET_KEYの作成</h2>
<p>自分は知らずにシークレットキーをGitHubにあげてしまったので新たに作り直す必要があるのでシークレットキーを生成してくれるプログラムを実行する。これを直接ターミナルで実行するとシークレットキーが生成されるのでそれを <code>local_settings.py</code> に貼り付ける。</p>
<p><code>get_random_secret_key.py</code></p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>management<span class="token punctuation">.</span>utils <span class="token keyword">import</span> get_random_secret_key

secret_key <span class="token operator">=</span> get_random_secret_key<span class="token punctuation">(</span><span class="token punctuation">)</span>
text <span class="token operator">=</span> <span class="token string">'SECRET_KEY = \'{0}\''</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>secret_key<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>
</code></pre></div>
<p>これでようやくチュートリアルに専念してコードを書き進める事が出来る。</p>
<h2>プロジェクトとアプリ</h2>
<p>Djangoではプロジェクトの中にアプリが含まれる。なので特定のDjangoで作成されたWebサイト全体をプロジェクトと呼び、その中に含まれる小規模な投票アプリ、ログシステムをアプリと呼ぶ。</p>
<h2>アプリを作成する。</h2>
<p><code>manage.py</code> と同じ階層に移動して</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">python manage.py startapp polls
</code></pre></div>
<p>を実行すると <code>polls</code> というフォルダが生成される。</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">polls/
    __init__.py
    admin.py
    apps.py
    migrations/
        __init__.py
    models.py
    tests.py
    views.py</code></pre></div>
<p>これでプロジェクトにpollsというアプリが作成された事になる。</p>
<h2>Viewを作成する。</h2>
<p>URLからパスにアクセスがあって、その際に実行する関数がViewになるここでHTMLファイルを返したりと処理を決めることが出来る。</p>
<p><code>views.py</code> に記述する。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">detail</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> question_id<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"You're looking at question %s."</span> <span class="token operator">%</span> question_id<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">results</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> question_id<span class="token punctuation">)</span><span class="token punctuation">:</span>
    response <span class="token operator">=</span> <span class="token string">"You're looking at the results of question %s."</span>
    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span>response <span class="token operator">%</span> question_id<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">vote</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> question_id<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"You're voting on question %s."</span> <span class="token operator">%</span> question_id<span class="token punctuation">)</span>
</code></pre></div>
<p>viewメソッドの第一引数には必ずHttpRequestクラスを受け取る。</p>
<p>引数 <code>request</code> には今ユーザがアクセスしているURLやIPアドレスなどの情報が入ってくる。そして戻り値としては HttpResponseクラスを返す必要がある。</p>
<p>実際にHttpResponseとHttpRequestの中身がどんな感じになっているのか気になる人は下記のページで確認できます。</p>
<p>ざっくりですが、 <code>views.py</code> があって実行されるとクラスの中身はこんな感じに格納されているみたいです。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sample</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>
    response <span class="token operator">=</span> HttpResponse<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>
    <span class="token keyword">return</span> response

<span class="token comment"># 実行結果</span>
<span class="token comment"># &#x3C;WSGIRequest: GET '/hello/'></span>
<span class="token comment"># &#x3C;HttpResponse status_code=200, "text/html; charset=utf-8"></span>
</code></pre></div>
<p><a href="https://codor.co.jp/django/request-and-response">Djangoはリクエストを受け取ってレスポンスを返しているだけです【詳しく解説】</a></p>
<p><code>views.py</code> だけではURLと紐づいていないので URLconfを作成する。</p>
<h2>URLconf <code>urls.py</code> を作成する</h2>
<p>URLconfを作成するには <code>urls.py</code> というファイルを <code>views.py</code> と同じ階層に作成する。mysiteフォルダ内には <code>urls.py</code>  がすでにあるので pollsフォルダ内に作成する。中身はこんな感じになる。</p>
<h3>include()を使ってアプリのURLを結び付ける。</h3>
<p><code>polls/urls.py</code></p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path

<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> views

urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>
    path<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>index<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    path<span class="token punctuation">(</span><span class="token string">'&#x3C;int:question_id>/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>detail<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'detail'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    path<span class="token punctuation">(</span><span class="token string">'&#x3C;int:question_id>/results/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>results<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'results'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    path<span class="token punctuation">(</span><span class="token string">'&#x3C;int:question_id>/vote/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>vote<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'vote'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre></div>
<p><code>&#x3C;int:question_id></code> が <code>views.py</code> 関数の引数として渡される。この <code>&#x3C;></code> を使用すると、URLの一部がキャプチャされ渡される。文字列 <code>:quesiton_id></code> は一致するパターンを定義し、 <code>&#x3C;int:</code> の部分はURLパスに当てはまる値の型を指定している。なので <code>&#x3C;str:, &#x3C;slug:</code> などもある。</p>
<p>そして、これをmysiteフォルダ内の <code>urls.py</code> に結びつけてあげる必要がある。一応こっちが最初に読み込まれるのでここに後から追加したアプリのURLを <code>include()</code> を使って追加していくイメージになる。</p>
<p><code>mysite/urls.py</code></p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin
<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> include<span class="token punctuation">,</span> path

urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>
    path<span class="token punctuation">(</span><span class="token string">'polls/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">'polls.urls'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    path<span class="token punctuation">(</span><span class="token string">'admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre></div>
<p>これでpollsアプリのURLを結び付けることができた。サーバを起動して <a href="http://localhost:8000/polls/">http://localhost:8000/polls/</a> にアクセスするとViewが返されるようになる。</p>
<h3>path()の引数</h3>
<p>4つの引数を受け取ることが出来る。そのうち <code>route</code> と <code>view</code> の2つは必須で残り <code>kwargs</code> と <code>name</code> は省略出来る。</p>
<ul>
<li>route：URLパターンを含む文字列が入る。リクエストを処理する際に <code>urlpatterns</code> を順番にみて最初にマッチしたものを取り出す。このパターンはGET、POSTのパラメータに影響は受けないあくまでURLパスだけを見る。</li>
<li>view：URLがマッチしたら、そこに付随するView関数を返す仕組みになっている。</li>
<li>kwargs：任意のキーワード引数を辞書としてView関数に渡せる。</li>
<li>name：URLに名前を付ける事で <code>reverse()</code> を使って呼び出せるようになり、htmlのテンプレートでformに指定するURLを変更する際に動的にURLが変更されるようになる。</li>
</ul>
<p><code>polls/urls.py</code> がこんな感じだとして</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path

<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> views
<span class="token keyword">import</span> re

urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>
    path<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>index<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    path<span class="token punctuation">(</span><span class="token string">'&#x3C;int:number>'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>subView<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'suburl'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre></div>
<p>試しに下記の <code>views.py</code> を実行してみる。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse
<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> reverse

<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    urlName <span class="token operator">=</span> reverse<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>urlName<span class="token punctuation">)</span>
    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"Hello, world. You're at the polls index.{0}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>urlName<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 実行結果</span>
<span class="token comment"># /polls/</span>
</code></pre></div>
<p>こうすると例えば <code>pollllllls/urls.py</code> とURLを変更してもコードを変更する必要がないので、変更に強いコードになります。</p>
<p>※pathのnameについて</p>
<p><a href="https://qiita.com/sr2460/items/11a1129975913ed584d3">python、djangoのurls.pyで設定するnameってなんやねん？？ - Qiita</a></p>
<h2>DjangoのURL</h2>
<p>ユーザがDjangoで作られたサイトにアクセスした際にどのような処理が走るのか。</p>
<ol>
<li>ROOT_URLCONFに設定されているURLを確認する。（HttpRequestオブジェクトにurlconfという属性が設定されている場合はその値をROOT_URLCONFとする。）</li>
<li>urlpatternsという名前の変数を探す。この変数値は <code>django.urls.path()</code> または <code>django.urls.re_path()</code> インスタンスのsequenceでなければならない。</li>
<li>urlpatternsから順番に要求されたURLパターンを探す。</li>
<li>マッチしたらViewを返す。</li>
<li>マッチしなかったらエラーハンドリングビューを返す。</li>
</ol>
<p>URLconfのサンプル</p>
<p>pathの左側がマッチするURL（route）, 右側がマッチしたら呼び出される関数（view）</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path

<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> views

urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token comment"># /articles/2003/にアクセスした場合</span>
    <span class="token comment"># Views.special_case_2003(request)を呼び出す。最後の/もしっかりないとマッチしない。</span>
    <span class="token comment"># 引数としてrequestが関数に渡る。</span>
    path<span class="token punctuation">(</span><span class="token string">'articles/2003/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>special_case_2003<span class="token punctuation">)</span><span class="token punctuation">,</span>
    path<span class="token punctuation">(</span><span class="token string">'articles/&#x3C;int:year>/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>year_archive<span class="token punctuation">)</span><span class="token punctuation">,</span>
    path<span class="token punctuation">(</span><span class="token string">'articles/&#x3C;int:year>/&#x3C;int:month>/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>month_archive<span class="token punctuation">)</span><span class="token punctuation">,</span>
    path<span class="token punctuation">(</span><span class="token string">'articles/&#x3C;int:year>/&#x3C;int:month>/&#x3C;slug:slug>/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>article_detail<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre></div>
<p><code>/articles/2005/03/</code> というアクセスがあった場合上記のパターンの中から<code>views.month_archive(request, year=2005, month=3)</code> という <code>views.py</code> （上記で記したviews.pyとは別で例としてあげてるurls.pyに対応するviews.pyがあったらという話で見てもらいたい。）に書かれたviewメソッドに引数を渡して呼び出す事になる。引数 <code>request</code> にはHttpRequestクラスが入り 今ユーザがアクセスしているURLやIPアドレスなどの情報が入ってる。</p>
<p><code>/articles/2003/03/building-a-django-site/</code> なら最後のパターンにマッチして、このように <code>views.article_detail(request, year=2003, month=3, slug="building-a-django-site")</code> 関数を呼び出す。</p>
<h2>タイムゾーンの設定</h2>
<p>デフォルトではUTCと世界標準時間になっているので、ここで日本時間に変更しておきたいと思う。 <code>settings.py</code> の <code>TIME_ZONE = 'UTC'</code> を <code>TIME_ZONE = 'Asia/Tokyo'</code> に変更する。</p>
<h2>データベースの作成</h2>
<p>ここでデータベース用語についてまとめて置く。</p>
<p><img src="https://storage.googleapis.com/zenn-user-upload/ury5lr13z2uiguvdb3hajfo31gll" alt=""></p>
<ul>
<li>カラム：縦列の事を指し、別名では列と呼ばれる。</li>
<li>カラム名：列全体に付けられた名前</li>
<li>フィールド：データが入っている場所。</li>
<li>フィールド名：そのデータが入っているカラム名を指す。</li>
<li>項目名：フィールド名を指す。</li>
<li>テーブル：Excelでいうシートのようなもの。</li>
<li>レコード：データそのものを指す言葉になる。もう一つは横列の事を指し、行と呼ばれる。そして行をロウと呼ぶこともある。</li>
</ul>
<p>これからデータベースを設定していく、チュートリアルの段階なのでまずは複雑な設定の必要がないSQLiteを使用していく。</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">python manage.py migrate
</code></pre></div>
<p>実行すると <code>settings.py</code> に書かれた <code>INSTALLED_APPS</code> の設定を参照して <code>mysite/settings.py</code> ファイルのデータベース設定に従って必要な全てのデータベーステーブルを作成する。</p>
<h2>migrate（マイグレート）するとは</h2>
<p>データベースを削除してから作り直すと、DBに保存されている情報が全て削除されてしまう。こういった事態を回避する方法として、データベースマイグレーションを行う方法が生まれた。マイグレーションとは、DBに保存されているデータを保持したまま、テーブルの作成やカラムの変更などを行うことが出来る。</p>
<h2>モデルの作成 <code>models.py</code></h2>
<p><code>models.py</code> はデータを保存したり、取り出したりするときの設定を記録するファイルになる。データベースの取扱説明書と書かれることが多い。</p>
<h3><code>models.py</code> からデータベースが作成される流れ</h3>
<ol>
<li>models.pyファイルでモデル（データベースの型）を作成する。</li>
<li>migrationファイルを作成する。</li>
<li>migrate（最終的にはおそらくSQL文に変換されて、データベースに命令を出してデータベースを作成する。）する。ここで上記のファイルを元にデータベースが作成される。</li>
</ol>
<p>つまりモデルはデータベースのレイアウトとそれに付随するメタデータになる。</p>
<p>簡単な例を示す。（チュートリアルとは関係ないモデル）</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token comment"># modelsモジュールを読み込むこれはデータベースを作成するのに必要な機能が格納されている。</span>
<span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models

<span class="token comment"># データベース作成機能を継承してモデルを書き込んでいく。</span>
<span class="token keyword">class</span> <span class="token class-name">BookModel</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># booknameという文字を入力することが出来るフィールドを作成する命令をだす。</span>
    <span class="token comment"># bookname = models.CharField(max_length = 50)とすると50文字までと制限をかけれる。</span>
    <span class="token comment"># CharFieldには必須の引数がありmax_lengthを設定しないといけない。</span>
    bookname <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">)</span>
    <span class="token comment"># CharFieldとほぼ同じで文字列を扱うがTextFieldの方がデータの読み出し等にコストがかかるらしい。</span>
    summary <span class="token operator">=</span> models<span class="token punctuation">.</span>TextField<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment"># 整数値を入れるフィールドを作成する。</span>
    rating <span class="token operator">=</span> models<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div>
<h2>ForeignKey（外部制約キー）</h2>
<p>これを使ってこの後2つのモデルを双方向に参照できるようにするのだが、その前にデータベースにおいて外部制約キーまたは外部キーとも呼ばれるがどのような役割を果たしているのかみていこうと思う。</p>
<p>外部キーとは関係データベースにおいてデータの整合性を保つための制約（参照整合性制約）</p>
<p>外部キーに設定されている列（子テーブルのカラム）には、参照先となるテーブルの列内（親テーブルのカラム内）に存在している値しか設定できない。</p>
<p>そのため、外部キーに設定されている子テーブルの列内に親テーブルの列内に存在しない値を追加しようとするとエラーになる。</p>
<p>なので新しく値を追加したい場合は一度、親テーブルで追加する必要がある。</p>
<p>このように制約を結ぶ事でデータの整合性を保つ事ができる。</p>
<p>Djangoでは foreign keyが設定されている方が子テーブルになる。</p>
<p>今度は少し複雑なモデルを見ていく。</p>
<p>図のようなQuestionとChoiceという2つのモデルを作成する。</p>
<p><img src="https://storage.googleapis.com/zenn-user-upload/2010557ea93110bd32304c66.png" alt=""></p>
<p>ChoiceにQuestionが <code>ForeignKey</code> を使って紐ずけられている。 <code>on_delete=models.CASCADE</code> は紐づけられたモデルが削除される際にどのような動作をするかを決める事が出来る。削除された後そのモデルだった部分をNullで埋めたり、そもそも削除できないようにしたりと出来る。 <code>CASCADE</code> は紐づけられた側のモデルで関連するオブジェクトも削除するという動きになる。なので Questionが削除されたら、Questionと関連のあるChoice側のオブジェクトも削除するような動作を取る。</p>
<p>詳しくはここの記事が分かりやすい。</p>
<p><a href="https://djangobrothers.com/blogs/on_delete/">Django2.0から必須になったon_deleteの使い方 - DjangoBrothers</a></p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models

<span class="token keyword">class</span> <span class="token class-name">Question</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># Question textというフィードを作成してそこに入る文字列は200文字までと制限している。</span>
    question_text <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">)</span>
    <span class="token comment"># 基本的には変数名がフィールド名として使用されるが、引数で文字列を渡す事でフィールド名設定する事が出来る。</span>
    pub_date <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span><span class="token string">'date published'</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Choice</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># Question ← → Choiseと双方向のやりとりが可能となる。</span>
    question <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>Question<span class="token punctuation">,</span> on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">)</span>
    choice_text <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">)</span>
    <span class="token comment"># Votesフィールドは整数値を受け付ける。最初は0が入る。</span>
    votes <span class="token operator">=</span> models<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
</code></pre></div>
<p>モデル間の双方向やりとりについて</p>
<p><a href="https://qiita.com/taki_21/items/d461072e6ea65630171a">【Django】1対多の関係（ related_name, _set.all() ）について - Qiita</a></p>
<p>モデルを作成したのでデータベースにマイグレート（モデルを元にデータベースのレイアウトを作成するデータを追加するわけではない。）していく</p>
<p>migrationファイルを作成する前に、新たに作成したアプリpollsを伝える必要がある。 <code>settings.py</code> の <code>INSTALLED_APPS</code> の配列に <code>'polls.apps.PollsConfig',</code> を追加する。</p>
<p>次にmigrationファイルを作成する。</p>
<p>新たにファイルを作成する必要はなくターミナルでコマンド実行する。</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">python manage.py makemigrations polls
</code></pre></div>
<p>実行すると <code>models.py</code> を元にmigrationファイルが生成される。</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">python manage.py migrate
</code></pre></div>
<p>実行するとmigrationファイルを元にデータベースが作成される。</p>
<p>試しにコマンドラインからDjango shellを通してデータベースを変更したりしてみる。</p>
<p>シェルに入るには下記のコマンドを実行する。</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">python manage.py shell
</code></pre></div>
<p>するとPythonコード <code>>>></code> を書ける状態になるのでここからデータベースにアクセスするコードを書く。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token comment"># 作成したモデルを読み込む</span>
<span class="token keyword">from</span> polls<span class="token punctuation">.</span>models <span class="token keyword">import</span> Choice<span class="token punctuation">,</span> Question

<span class="token comment"># 格納されたデータを確認する。まだ追加していないので、空になっている。</span>
Question<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">from</span> django<span class="token punctuation">.</span>utils <span class="token keyword">import</span> timezone
<span class="token comment"># モデルにデータを追加する。</span>
q <span class="token operator">=</span> Question<span class="token punctuation">(</span>question_text<span class="token operator">=</span><span class="token string">"What's new?"</span><span class="token punctuation">,</span> pub_date<span class="token operator">=</span>timezone<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># データベースに保存する。</span>
q<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>

q<span class="token punctuation">.</span><span class="token builtin">id</span>
q<span class="token punctuation">.</span>question_text
q<span class="token punctuation">.</span>pub_date

<span class="token comment"># データの上書き</span>
q<span class="token punctuation">.</span>question_text <span class="token operator">=</span> <span class="token string">"What's up?"</span>
q<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># データが格納されているのが確認できる。</span>
Question<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># 実行結果：&#x3C;QuerySet [&#x3C;Question: Question object (1)>]></span>
</code></pre></div>
<p><img src="https://storage.googleapis.com/zenn-user-upload/d768fm3g728u653rzmzij3l9yhf9" alt=""></p>
<p>このままではadminページでオブジェクト名が <code>Question object (1)</code> と表示され分かりにくいので 特殊メソッド <code>__str__()</code> をモデルに追加する。</p>
<p>あと追加で <code>was_published_recently(self)</code> メソッドを書きました。</p>
<p>データが最近追加されたかどうかを判定するメソッドで <code>True or False</code> で返します。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Question</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token comment"># クラス変数を定義する。データベースフィールドを表現している。</span>
  <span class="token comment"># Charフィールドは文字のフィールド</span>
  question_text <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">)</span>

  <span class="token comment"># 日時のフィールド</span>
  pub_date <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span><span class="token string">'date published'</span><span class="token punctuation">)</span>

  <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># インスタンスを生成して、printした際にここが実行される。</span>
    <span class="token comment"># シェルで表示されるオブジェクトに質問名が使われるだけでなく</span>
    <span class="token comment"># adminでオブジェクトを表現する際にも使用されるので追加する必要がある。</span>
    <span class="token keyword">return</span> self<span class="token punctuation">.</span>question_text

  <span class="token keyword">def</span> <span class="token function">was_published_recently</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    now <span class="token operator">=</span> timezone<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment"># now - datetime.timedelta(days=1)は今の時間から一日引いた日付を出す。</span>
    <span class="token comment"># 2021-05-19 23:29:56.216634こんな感じの値になる。</span>
    <span class="token comment"># pub_dateが現在時刻より過去で現在時刻から一日以内の場合はTrueを返すメソッド</span>
    <span class="token keyword">return</span> now <span class="token operator">-</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&#x3C;=</span> self<span class="token punctuation">.</span>pub_date <span class="token operator">&#x3C;=</span> now
  
<span class="token keyword">class</span> <span class="token class-name">Choice</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>

  <span class="token comment"># これはChoiceがQuestionに関連付けられている事を伝えている。</span>
  <span class="token comment"># データベースの多対一、多対多、一対一のようなデータベースリレーションシップに対応する。</span>
  <span class="token comment"># Question ← → Choiseと双方向のやりとりが可能となる。</span>
  question <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>Question<span class="token punctuation">,</span> on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">)</span>
  choice_text <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">)</span>
  votes <span class="token operator">=</span> models<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>

  <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> self<span class="token punctuation">.</span>choice_text
</code></pre></div>
<p>すると下記のように表示されるので、</p>
<p><img src="https://storage.googleapis.com/zenn-user-upload/ejo29u3azzc9mjkets12mobuxn42" alt=""></p>
<p>何のデータが入っているのか分かり易くなった。</p>
<p>Djangoのshell内でも下記のようにオブジェクトの中身が分かり易くなった。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">from</span> polls<span class="token punctuation">.</span>models <span class="token keyword">import</span> Choice<span class="token punctuation">,</span> Question
Question<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># 実行結果：&#x3C;QuerySet [&#x3C;Question: What's up?>]></span>

<span class="token comment"># 続けて色々な関数を試してデータベースから</span>
<span class="token comment"># データを取得してみる。</span>
<span class="token comment"># filterをかけてデータを取得する。</span>
<span class="token comment"># idはデータベースにデータを追加した際に1から順番に自動で割り振られる。</span>
Question<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token comment"># 実行結果：&#x3C;QuerySet [&#x3C;Question: What's up?>]></span>

<span class="token comment"># Questionオブジェクトのquestion_textフィールドで"What"から</span>
<span class="token comment"># 始まるデータを取得する。</span>
Question<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>question_text__startswith<span class="token operator">=</span><span class="token string">"What"</span><span class="token punctuation">)</span>
<span class="token comment"># 実行結果：&#x3C;QuerySet [&#x3C;Question: What's up?>]></span>

<span class="token keyword">from</span> django<span class="token punctuation">.</span>utils <span class="token keyword">import</span> timezone

<span class="token comment"># 今年作成されたデータを取得する。</span>
current_year <span class="token operator">=</span> timezone<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>year
Question<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>pub_date__year<span class="token operator">=</span>current_year<span class="token punctuation">)</span>

<span class="token comment"># id 2のデータを取得する。</span>
<span class="token comment"># filterで指定しなくてもgetでも取得できる。</span>
Question<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token comment"># 実行結果はない場合はエラーになります。</span>

<span class="token comment"># プライマリーキーと呼ばれるものでいまいちidとの違いが分からない。</span>
<span class="token comment"># 取得するデータはidの場合と同じになる。</span>
q <span class="token operator">=</span> Question<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>pk<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
q<span class="token punctuation">.</span>was_published_recently<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># 実行結果：True</span>

<span class="token comment"># ChoiseはQuestionと関連付けられてるのでQuestionからも</span>
<span class="token comment"># データにアクセスする事ができる。</span>
<span class="token comment"># Choice側にはまだデータを入れてないので結果は何も表示されない。</span>
<span class="token comment"># Choicecは質問に対する回答の選択肢をデータとして持つ。</span>
<span class="token comment"># qには今What's upという質問が入っているので、それに対しての</span>
<span class="token comment"># 選択肢を作成した。</span>
q<span class="token punctuation">.</span>choice_set<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
q<span class="token punctuation">.</span>choice_set<span class="token punctuation">.</span>create<span class="token punctuation">(</span>choice_text<span class="token operator">=</span><span class="token string">"Not much"</span><span class="token punctuation">,</span> votes<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
q<span class="token punctuation">.</span>choice_set<span class="token punctuation">.</span>create<span class="token punctuation">(</span>choice_text<span class="token operator">=</span><span class="token string">"The sky"</span><span class="token punctuation">,</span> votes<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
c <span class="token operator">=</span> q<span class="token punctuation">.</span>choice_set<span class="token punctuation">.</span>create<span class="token punctuation">(</span>choice_text<span class="token operator">=</span><span class="token string">'Just hacking again'</span><span class="token punctuation">,</span> votes<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>

<span class="token comment"># 選択肢が関連づけられている質問を返す。</span>
c<span class="token punctuation">.</span>question
<span class="token comment"># 実行結果：&#x3C;Question: What's up?></span>
q<span class="token punctuation">.</span>choice_set<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 選択肢が何個あるか数える。</span>
q<span class="token punctuation">.</span>choice_set<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>

Choice<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>question__pub_date__year<span class="token operator">=</span>current_year<span class="token punctuation">)</span>
<span class="token comment"># 実行結果：&#x3C;QuerySet [&#x3C;Choice: Not much>, &#x3C;Choice: The sky>, &#x3C;Choice: Just hacking again>]></span>

<span class="token comment"># just hackingの選択肢だけ削除する。</span>
c <span class="token operator">=</span> q<span class="token punctuation">.</span>choice_set<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>choice_text__startswith<span class="token operator">=</span><span class="token string">"Just hacking"</span><span class="token punctuation">)</span>
c<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div>
<h2>pkとidの違い</h2>
<p>pkは <code>primary key</code> の略で、データベースでは <code>主キー</code> と呼ばれている。主キーはテーブルで一意の値を取る。</p>
<p>どのレコードを主キーにするかはフィールド名を定義する時に <code>primary_key=True</code> を付ければ設定できる。</p>
<p>codeというフィールドに入る値を主キーとする。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python">code <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</code></pre></div>
<p>djangoの場合はModel（=テーブル）には必ず1つの主キー用のフィールドが必要になる。ユーザが定義しない場合はidという名前のAutoFiekd（int型の連番1~n）が作成される。</p>
<p>そのため、pkキーを定義しない場合はpkはidのショートカットになる。</p>
<p>pkキーを上記の <code>code</code> のように定義した場合はidは作成されない。</p>
<h2>SQLに直接アクセスする。（おまけ）</h2>
<p>sqllite3を使用してデータベースを作成している場合はmysiteフォルダ内にデータベースのファイルが生成されていると思うので、下記のコマンドからSQLで操作するシェルに入る事ができる。</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">sqlite3 db.sqlite3
<span class="token comment"># シェル内での操作</span>
<span class="token comment"># 作成されたテーブル一覧を確認できる。</span>
<span class="token operator">>></span><span class="token operator">></span> .table
auth_group                  django_admin_log          
auth_group_permissions      django_content_type       
auth_permission             django_migrations         
auth_user                   django_session  
                            <span class="token comment"># 先ほどモデルから作成されたテーブル          </span>
auth_user_groups            polls_choice              
auth_user_user_permissions  polls_question

<span class="token comment"># 構造を確認できるみたいだけど、見てもよく分からなかった。</span>
<span class="token operator">>></span><span class="token operator">></span> .schema

<span class="token comment"># シェルから抜ける。</span>
<span class="token operator">>></span><span class="token operator">></span> .quit
</code></pre></div>
<p>モデルからデータベースを操作する事ができたので、次に先ほど登場したadminページにアクセスしたいと思う。</p>
<h2>adminページアクセスする。</h2>
<p>ログインが必要なのでユーザを下記のコマンドから作成する。</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">python manage.py createsuperuser
<span class="token comment"># 実行すると下記の入力画面が登場する。</span>
Username：名前を入力
Email address：@と.comがあれば架空で良い
Password：
Password（again）：
</code></pre></div>
<p>ユーザを作成したら開発サーバを起動して<a href="http://127.0.0.1:8000/admin/">http://127.0.0.1:8000/admin/</a> にアクセスするとログイン画面となるのでログインする。</p>
<p><img src="https://storage.googleapis.com/zenn-user-upload/52f576fd75064ac41c38887f.png" alt=""></p>
<p>するとそこから作成したモデルを閲覧したりデータを追加したりできる。</p>
<p><img src="https://storage.googleapis.com/zenn-user-upload/7bb1032881a75b5066c66cee.png" alt=""></p>
<p>ChoiceモデルからはQuestionを選択して使用することしか出来ないのが確認できる。 右側にある + ボタンを押すと Questionのページに飛びそこから新しい質問を追加することはできる。</p>
<h2>Views.pyからデータベースの値を取得する</h2>
<p>先ほどDjango shellで使用したPythonコードを使って、 <code>views.py</code> にデータを取得していく。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token comment"># 最後はHttpResponseを返す必要があるのでimportする。</span>
<span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse

<span class="token comment"># データベースを操作するためにモデルを読み込んでおく。</span>
<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Question

<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># データベースから最新5件を取得する。</span>
    <span class="token comment"># こんな感じのデータになる。&#x3C;QuerySet [&#x3C;Question: test3>, &#x3C;Question: hello>, &#x3C;Question: what's up?>]></span>
    latest_question_list <span class="token operator">=</span> Question<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">'-pub_date'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>
    <span class="token comment"># "test3, hello, what's up?"区切った文字列にしてHttpResponseに渡す。</span>
    output <span class="token operator">=</span> <span class="token string">', '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>q<span class="token punctuation">.</span>question_text <span class="token keyword">for</span> q <span class="token keyword">in</span> latest_question_list<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span>output<span class="token punctuation">)</span>

<span class="token comment"># Leave the rest of the views (detail, results, vote) unchanged</span>
</code></pre></div>
<h2>Viewとページデザインを切り離す</h2>
<p>Viewではデータの取得や操作を専門的に行ってもらい、そのデータをテンプレート（htmlにPythonの変数を入れられる。）に渡してページをレンダリングしてもらうようにする。</p>
<p>pollsディレクトリの中に、templatesディレクトリを作成する。システムでそのディレクトリを認識する。作成した templatesディレクトリにpollsフォルダを作成する。なので <code>polls/templates/polls</code> みたいなディレクトリが完成する。その中にテンプレート <code>index.html</code> を作成する。なぜ <code>templates/polls</code> とするのかというとDjangoは名前がマッチした最初のテンプレートを使用するので、もし異なるアプリケーションの中に同じ名前のテンプレートがあるとそちらを読み込む。それを回避するために名前空間（所属する領域）を与えている。</p>
<p><code>views.py</code> をテンプレートにデータを渡せるように書き換える。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse
<span class="token keyword">from</span> django<span class="token punctuation">.</span>template <span class="token keyword">import</span> loader

<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Question

<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    latest_question_list <span class="token operator">=</span> Question<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">'-pub_date'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>
    <span class="token comment"># テンプレートを読み込む</span>
    template <span class="token operator">=</span> loader<span class="token punctuation">.</span>get_template<span class="token punctuation">(</span><span class="token string">'polls/index.html'</span><span class="token punctuation">)</span>
    <span class="token comment"># 辞書型に最新5件のデータを格納する。</span>
    context <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">'latest_question_list'</span><span class="token punctuation">:</span> latest_question_list<span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
    <span class="token comment"># 辞書型のデータをテンプレートに渡してページを作成する。その結果をHttpResponseに返す。</span>
    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span>template<span class="token punctuation">.</span>render<span class="token punctuation">(</span>context<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div>
<h3>view.pyをさらに短くする。</h3>
<p><code>from django.template import loader</code></p>
<p><code>from django.http import HttpResponse</code></p>
<p>を使わない書き方</p>
<p>より簡素にする事が出来る。</p>
<p>その場合、 <code>render()</code> 関数は第一引数に <code>requestオブジェクト</code> , 第二引数に <code>テンプレート名</code> , 第三引数に <code>辞書型（テンプレートに渡したいデータ）</code> を記述する。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render
<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Question

<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    latest_question_list <span class="token operator">=</span> Question<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">'-pub_date'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>
    context <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'latest_question_list'</span><span class="token punctuation">:</span> latest_question_list<span class="token punctuation">}</span>
    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'polls/index.html'</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span>
</code></pre></div>
<h3>404エラーを出力する。</h3>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> Http404
<span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render

<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Question

<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    latest_question_list <span class="token operator">=</span> Question<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">'-pub_date'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>
    context <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'latest_question_list'</span><span class="token punctuation">:</span> latest_question_list<span class="token punctuation">}</span>
    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'polls/index.html'</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span>

<span class="token comment"># 質問の詳細ページのビュー</span>
<span class="token keyword">def</span> <span class="token function">detail</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> question_id<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token comment"># アクセスのあったURLでpkの値が変わる。/polls/1/なら1になる。</span>
        <span class="token comment"># データベースでエラーになるとHttp404を出力する。</span>
        question <span class="token operator">=</span> Question<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>pk<span class="token operator">=</span>question_id<span class="token punctuation">)</span>
    <span class="token keyword">except</span> Question<span class="token punctuation">.</span>DoesNotExist<span class="token punctuation">:</span>
        <span class="token keyword">raise</span> Http404<span class="token punctuation">(</span><span class="token string">"Question does not exist"</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'polls/detail.html'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'question'</span><span class="token punctuation">:</span> question<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div>
<h3>上記のdetail()を短くする。</h3>
<p><code>django.shortcuts</code> にはこうしたコードを省略する関数が多くあるので調べると面白いかもしれない。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> get_object_or_404<span class="token punctuation">,</span> render

<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Question

<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    latest_question_list <span class="token operator">=</span> Question<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">'-pub_date'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>
    context <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'latest_question_list'</span><span class="token punctuation">:</span> latest_question_list<span class="token punctuation">}</span>
    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'polls/index.html'</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span>。

<span class="token comment"># モデルにアクセスするobjects.get()とHttp404が一緒になっている。</span>
<span class="token keyword">def</span> <span class="token function">detail</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> question_id<span class="token punctuation">)</span><span class="token punctuation">:</span>
    question <span class="token operator">=</span> get_object_or_404<span class="token punctuation">(</span>Question<span class="token punctuation">,</span> pk<span class="token operator">=</span>question_id<span class="token punctuation">)</span>
    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'polls/detail.html'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'question'</span><span class="token punctuation">:</span> question<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div>
<h3>index.html</h3>
<p><code>index()</code> に対するテンプレートにはこのように記述する。</p>
<p>ビューで <code>latest_question_list</code> オブジェクトが辞書型に格納されて渡されているので、それを受け取ってテンプレート内でオブジェクトに格納された値を属性アクセス <code>.</code> して取得している。</p>
<div class="remark-highlight"><pre class="language-html"><code class="language-html"><span class="token comment">&#x3C;!-- 受け取った変数にデータがあるか確認する。 --></span>
{% if latest_question_list %}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>ul</span><span class="token punctuation">></span></span>
    {% for question in latest_question_list %}
        <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/polls/{{ question.id }}/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ question.question_text }}<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>li</span><span class="token punctuation">></span></span>
    {% endfor %}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>ul</span><span class="token punctuation">></span></span>
{% else %}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>p</span><span class="token punctuation">></span></span>No polls are available.<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>p</span><span class="token punctuation">></span></span>
{% endif %}
</code></pre></div>
<h3>index.htmlのハードコード（直接記述している）を削除する</h3>
<p>このように直接URLを書き込むと変更に弱いコードになってしまうので、 <code>polls.urlsモジュールのpath()</code> 関数でname引数を定義したのでそれをURLに使用する。  <code>{%url%}</code> を使う。</p>
<div class="remark-highlight"><pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/polls/{{ question.id }}/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ question.question_text }}<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>li</span><span class="token punctuation">></span></span>
</code></pre></div>
<p>変更後</p>
<div class="remark-highlight"><pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>detail<span class="token punctuation">'</span> question.id %}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ question.question_text }}<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>li</span><span class="token punctuation">></span></span>
</code></pre></div>
<p>そしてテンプレートを入れるディレクトリを作成した際のように名前空間を追加する。システムが別々のアプリ内で同じname引数を含んでいても区別が付けられるように <code>template/polls/detail.html</code> にアクセスしたい場合は  <code>polls:detail</code> と記述する。</p>
<div class="remark-highlight"><pre class="language-html"><code class="language-html"><span class="token comment">&#x3C;!-- 受け取った変数にデータがあるか確認する。 --></span>
{% if latest_question_list %}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>ul</span><span class="token punctuation">></span></span>
    {% for question in latest_question_list %}
       <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>polls:detail<span class="token punctuation">'</span> question.id %}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ question.question_text }}<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>li</span><span class="token punctuation">></span></span>
    {% endfor %}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>ul</span><span class="token punctuation">></span></span>
{% else %}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>p</span><span class="token punctuation">></span></span>No polls are available.<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>p</span><span class="token punctuation">></span></span>
{% endif %}
</code></pre></div>
<p>そして、URLconf（urls.py）に名前空間を追加 <code>app_name = 'polls'</code></p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path

<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> views

<span class="token comment"># ここを新たに追加した。</span>
app_name <span class="token operator">=</span> <span class="token string">'polls'</span>
urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>
    path<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>index<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    path<span class="token punctuation">(</span><span class="token string">'&#x3C;int:question_id>/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>detail<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'detail'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    path<span class="token punctuation">(</span><span class="token string">'&#x3C;int:question_id>/results/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>results<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'results'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    path<span class="token punctuation">(</span><span class="token string">'&#x3C;int:question_id>/vote/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>vote<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'vote'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre></div>
<p>こうするとモジュールに指定されたURLの定義を検索出来る。例えば <code>polls/specifics/12</code> のようにURLを変更した場合</p>
<p><code>urls.py</code> に書かれたパスを変更する事でテンプレート側に変更を加える必要がない。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python">path<span class="token punctuation">(</span><span class="token string">'specifics/&#x3C;int:question_id>/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>detail<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'detail'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
</code></pre></div>
<h3>detail.html</h3>
<p><code>detail()</code> に対するテンプレートはこのように記述する。</p>
<div class="remark-highlight"><pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>h1</span><span class="token punctuation">></span></span>{{ question.question_text }}<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>h1</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>ul</span><span class="token punctuation">></span></span>
{% for choice in question.choice_set.all %}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>li</span><span class="token punctuation">></span></span>{{ choice.choice_text }}<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>li</span><span class="token punctuation">></span></span>
{% endfor %}
<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>ul</span><span class="token punctuation">></span></span>
</code></pre></div>
<h2>フォームを使って質問に対して回答を送信する。</h2>
<p><code>detail.html</code> に <code>&#x3C;form></code> を追加してサーバにデータを送信して質問に対して、投票出来るようにする。</p>
<p>下記のように <code>detail.html</code> を変更する。</p>
<div class="remark-highlight"><pre class="language-html"><code class="language-html"><span class="token comment">&#x3C;!-- 質問の内容 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>h1</span><span class="token punctuation">></span></span>{{ question.question_text }}<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>h1</span><span class="token punctuation">></span></span>

<span class="token comment">&#x3C;!-- もしデータベースから質問が取得出来ない場合エラーが表示される。 --></span>
{% if error_message %}<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>strong</span><span class="token punctuation">></span></span>{{ error_message }}<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>strong</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>p</span><span class="token punctuation">></span></span>{% endif %}

<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>polls:vote<span class="token punctuation">'</span> question.id %}<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

<span class="token comment">&#x3C;!-- セキュリティのため --></span>
{% csrf_token %}

<span class="token comment">&#x3C;!-- 質問に対する選択肢を並べる --></span>
{% for choice in question.choice_set.all %}
    <span class="token comment">&#x3C;!-- forloop.counterはforタグのループが何度実行されたかを表す値です。 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>choice<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>choice{{ forloop.counter }}<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{{ choice.id }}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>choice{{ forloop.counter }}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ choice.choice_text }}<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>br</span><span class="token punctuation">></span></span>
{% endfor %}
<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Vote<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>form</span><span class="token punctuation">></span></span>
</code></pre></div>
<h2>views.pyにvote()関数を追加する</h2>
<p>コードの流れとしては</p>
<ol>
<li>
<p>ユーザがdetailページの質問に対する選択肢を選択する。</p>
</li>
<li>
<p>Voteボタンをクリックする。</p>
</li>
<li>
<p>データがサーバに送信される。</p>
</li>
<li>
<p>選択された選択肢の投票数をインクリメントする。</p>
</li>
<li>
<p>results.htmlにリダイレクトする。Postデータが成功した後は基本的に <code>HttpResponse</code> ではなく <code>HttpResponseRedirect</code> を返す必要がある。</p>
</li>
</ol>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token comment"># 追加した。HttpResponse, HttpResponseRedirect</span>
<span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token punctuation">,</span> HttpResponseRedirect
<span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> get_object_or_404<span class="token punctuation">,</span> render
<span class="token comment"># 追加した。reverse</span>
<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> reverse
<span class="token comment"># Choiceを追加した。</span>
<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Choice<span class="token punctuation">,</span> Question

<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    latest_question_list <span class="token operator">=</span> Question<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">'-pub_date'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>
    context <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'latest_question_list'</span><span class="token punctuation">:</span> latest_question_list<span class="token punctuation">}</span>
    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'polls/index.html'</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span>。

<span class="token comment"># モデルにアクセスするobjects.get()とHttp404が一緒になっている。</span>
<span class="token keyword">def</span> <span class="token function">detail</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> question_id<span class="token punctuation">)</span><span class="token punctuation">:</span>
    question <span class="token operator">=</span> get_object_or_404<span class="token punctuation">(</span>Question<span class="token punctuation">,</span> pk<span class="token operator">=</span>question_id<span class="token punctuation">)</span>
    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'polls/detail.html'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'question'</span><span class="token punctuation">:</span> question<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment"># 質問に対して選択して投票する。</span>
<span class="token keyword">def</span> <span class="token function">vote</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> question_id<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># まず質問があるかどうか確認する。</span>
    question <span class="token operator">=</span> get_object_or_404<span class="token punctuation">(</span>Question<span class="token punctuation">,</span> pk<span class="token operator">=</span>question_id<span class="token punctuation">)</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token comment"># ユーザが選択した値からpk値を取得して、それを元にモデルから選択肢のオブジェクトを取得する。</span>
        <span class="token comment"># なければYou didn't...choiceと表示される。</span>
        selected_choice <span class="token operator">=</span> question<span class="token punctuation">.</span>choice_set<span class="token punctuation">.</span>get<span class="token punctuation">(</span>pk<span class="token operator">=</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">[</span><span class="token string">'choice'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span> <span class="token punctuation">(</span>KeyError<span class="token punctuation">,</span> Choice<span class="token punctuation">.</span>DoesNotExist<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># Redisplay the question voting form.</span>
        <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'polls/detail.html'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
            <span class="token string">'question'</span><span class="token punctuation">:</span> question<span class="token punctuation">,</span>
            <span class="token string">'error_message'</span><span class="token punctuation">:</span> <span class="token string">"You didn't select a choice."</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token comment"># 選択肢オブジェクトから何回投票されたか表示するvotesオブジェクトをインクリメントする。</span>
        selected_choice<span class="token punctuation">.</span>votes <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token comment"># データベースに保存する。</span>
        selected_choice<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment"># Always return an HttpResponseRedirect after successfully dealing</span>
        <span class="token comment"># with POST data. This prevents data from being posted twice if a</span>
        <span class="token comment"># user hits the Back button.</span>
        <span class="token comment"># データの保存に成功したら、results.htmlにリダイレクトする。</span>
        <span class="token keyword">return</span> HttpResponseRedirect<span class="token punctuation">(</span>reverse<span class="token punctuation">(</span><span class="token string">'polls:results'</span><span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>question<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div>
<h3>reverse()関数とは</h3>
<p>この関数を使うと、vote関数中でのURLのハードコードを防ぐ事が出来る。</p>
<p>引数としては <code>polls:results</code> リダイレクト先のビュー名とそのビューに与えるURLパターン <code>question.id</code> を渡せる。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python">reverse<span class="token punctuation">(</span><span class="token string">'polls:results'</span><span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>question<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 返り値</span>
<span class="token string">'/polls/3/results/'</span>
</code></pre></div>
<h2>Post通信が成功した際のresults関数を作成する。</h2>
<p>views.pyにresults関数を追加する。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token comment"># 先ほどまで書いてきたviews.pyにresults関数を追加する。</span>

<span class="token keyword">def</span> <span class="token function">results</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> question_id<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 指定したpkキーにデータがあれば返す、なければエラーを返す。</span>
    question <span class="token operator">=</span> get_object_or_404<span class="token punctuation">(</span>Question<span class="token punctuation">,</span> pk<span class="token operator">=</span>question_id<span class="token punctuation">)</span>
    <span class="token comment"># 質問オブジェクトを引数で貰ってページを作成する。</span>
    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'polls/results.html'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'question'</span><span class="token punctuation">:</span> question<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div>
<p>results.htmlを作成する。</p>
<div class="remark-highlight"><pre class="language-html"><code class="language-html"><span class="token comment">&#x3C;!-- 質問を表示する。 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>h1</span><span class="token punctuation">></span></span>{{ question.question_text }}<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>h1</span><span class="token punctuation">></span></span>

<span class="token comment">&#x3C;!--質問の選択肢とそれに対する投票数を取得する。--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>ul</span><span class="token punctuation">></span></span>
{% for choice in question.choice_set.all %}
    <span class="token comment">&#x3C;!--choice.votes|pluralizeは投票数が2以上の場合vote s とsを追加してくれる。--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>li</span><span class="token punctuation">></span></span>{{ choice.choice_text }} -- {{ choice.votes }} vote{{ choice.votes|pluralize }}<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>li</span><span class="token punctuation">></span></span>
{% endfor %}
<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>ul</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>polls:detail<span class="token punctuation">'</span> question.id %}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Vote again?<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>a</span><span class="token punctuation">></span></span>
</code></pre></div>
<p><a href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#pluralize">Built-in template tags and filters | Django documentation | Django</a></p>
<h2>汎用ビューを使って今まで書いたコードをさらに短くする。</h2>
<p><code>views.py</code> に書かれた <code>index(), detail(), results()</code> 関数は3つとも似たような機能でURLを介して渡されたパラメータに従ってデータベースからデータを取り出しページを作成する。これらの一連の動作はよくある事なのでDjangoでは汎用ビューというショートカットを用意してより簡素に機能を実装出来るようにしている。</p>
<p>汎用ビューを適用するにはいくつかこれまでに書いたコードを修正する必要がある。</p>
<ol>
<li>URLconfを変換する。</li>
<li>古い不要なビューを削除する。</li>
<li>新しいビューにDjango汎用ビューを設定する。</li>
</ol>
<h3>URLconfの修正</h3>
<p>変更前</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path

<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> views

app_name <span class="token operator">=</span> <span class="token string">'polls'</span>
urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>
    path<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>index<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    path<span class="token punctuation">(</span><span class="token string">'&#x3C;int:question_id>/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>detail<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'detail'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    path<span class="token punctuation">(</span><span class="token string">'&#x3C;int:question_id>/results/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>results<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'results'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    path<span class="token punctuation">(</span><span class="token string">'&#x3C;int:question_id>/vote/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>vote<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'vote'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre></div>
<p>変更後</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path

<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> views

app_name <span class="token operator">=</span> <span class="token string">'polls'</span>
urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>
    path<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>IndexView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    path<span class="token punctuation">(</span><span class="token string">'&#x3C;int:pk>/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>DetailView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'detail'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    path<span class="token punctuation">(</span><span class="token string">'&#x3C;int:pk>/results/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>ResultsView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'results'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    path<span class="token punctuation">(</span><span class="token string">'&#x3C;int:question_id>/vote/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>vote<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'vote'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre></div>
<p><code>views.IndexView.as_view(), views.DetailView.as_view(), views.ResultsView.as_view()</code> と <code>as_view()</code> と書くようになった。</p>
<p>そして、 <code>question_id</code> が <code>pk</code> に変更された。ここは同じでもいいような気もする。結局同じ数値が返り値として入るから。</p>
<p>※後述する <code>DetailView</code> には <code>pk</code> キーを渡す必要があるので同じではダメなようだ。</p>
<h3>viewsの修正</h3>
<p><code>index(), detail(), results()</code> 関数を削除しクラスベースに書き換える。</p>
<p>indexでは <code>ListView</code> を継承している。</p>
<p>detail, resultsでは <code>DetailView</code> を継承している。</p>
<p><strong>ListView</strong></p>
<p>「オブジェクトのリストを表示する。」</p>
<p>メソッドのフローチャート継承したメソッドが下記の順番で自動で実行される。</p>
<p>1.<a href="https://docs.djangoproject.com/ja/3.2/ref/class-based-views/base/#django.views.generic.base.View.setup">setup()</a>
2.<a href="https://docs.djangoproject.com/ja/3.2/ref/class-based-views/base/#django.views.generic.base.View.dispatch">dispatch()</a>
3.<a href="https://docs.djangoproject.com/ja/3.2/ref/class-based-views/base/#django.views.generic.base.View.http_method_not_allowed">http_method_not_allowed()</a>
4.<a href="https://docs.djangoproject.com/ja/3.2/ref/class-based-views/mixins-simple/#django.views.generic.base.TemplateResponseMixin.get_template_names">get_template_names()</a>
5.<a href="https://docs.djangoproject.com/ja/3.2/ref/class-based-views/mixins-multiple-object/#django.views.generic.list.MultipleObjectMixin.get_queryset">get_queryset()</a>
6.<a href="https://docs.djangoproject.com/ja/3.2/ref/class-based-views/mixins-multiple-object/#django.views.generic.list.MultipleObjectMixin.get_context_object_name">get_context_object_name()</a>
7.<a href="https://docs.djangoproject.com/ja/3.2/ref/class-based-views/mixins-multiple-object/#django.views.generic.list.MultipleObjectMixin.get_context_data">get_context_data()</a>
8.<a href="https://docs.djangoproject.com/ja/3.2/ref/class-based-views/generic-display/#django.views.generic.list.BaseListView.get">get()</a>
9.<a href="https://docs.djangoproject.com/ja/3.2/ref/class-based-views/mixins-simple/#django.views.generic.base.TemplateResponseMixin.render_to_response">render_to_response()</a></p>
<p>このようにメソッドが実行されるので継承したクラスに <code>get_quesryset()</code> メソッドを追加して内容を上書きする事が出来る。</p>
<p><em>template_name</em></p>
<p><code>ListView</code> ではデフォルトの場合 <code>&#x3C;app name>/&#x3C;model name>_list.html</code> を自動で生成して使用する。</p>
<p>その場合、テンプレート名は <code>polls/question_list.html</code> になる。</p>
<p>しかし元々作成してある <code>polls/index.html</code> を使用したい場合は <code>template_name</code> に <code>'polls/detail.html'</code> を代入する事でDjangoがそちらを使用するように認識してくれる。</p>
<p><strong>DetailView</strong></p>
<p>「あるタイプのオブジェクト詳細ページを表示する。」</p>
<p>なので ListViewの詳細ページをDetailViewで表示するみたいな使われ方をする。</p>
<p><em>template_name</em></p>
<p>そしてデフォルトでは <code>DetailView</code> は <code>&#x3C;app name>/&#x3C;model name>_detail.html</code> という名前のテンプレートを自動生成して使用する。</p>
<p>その場合、テンプレート名は <code>polls/question_detail.html</code> になるが、今回は自動生成されたものではなく元々作成してある <code>polls/detail.html</code> を使いたいので <code>template_name</code> を指定して元々のテンプレートを使用する。方法はListViewの時と同じで <code>template_name</code> に <code>polls/detail.html</code> を代入する。</p>
<p><strong>model</strong></p>
<p>このクラス変数はビューが使用するモデルを指定している。</p>
<p><code>model = Question</code> の場合は裏側で <code>Question.objects.all()</code> を行ってくれる。なので <code>queryset = Question.objects.all()</code> としても良い。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponseRedirect
<span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> get_object_or_404<span class="token punctuation">,</span> render
<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> reverse
<span class="token keyword">from</span> django<span class="token punctuation">.</span>views <span class="token keyword">import</span> generic

<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Choice<span class="token punctuation">,</span> Question

<span class="token keyword">class</span> <span class="token class-name">IndexView</span><span class="token punctuation">(</span>generic<span class="token punctuation">.</span>ListView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># デフォルトのビューを使用せず、元々作成してあったものを使用する。</span>
    template_name <span class="token operator">=</span> <span class="token string">'polls/index.html'</span>
    <span class="token comment"># 自動で渡されるquestion_listというコンテキスト変数の変数名を独自のものに変更している。</span>
    context_object_name <span class="token operator">=</span> <span class="token string">'latest_question_list'</span>

    <span class="token keyword">def</span> <span class="token function">get_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""最新の5件を取得する。"""</span>
        <span class="token keyword">return</span> Question<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">'-pub_date'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>

<span class="token keyword">class</span> <span class="token class-name">DetailView</span><span class="token punctuation">(</span>generic<span class="token punctuation">.</span>DetailView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 自分がどのモデルに対して動作するかを伝えている。</span>
    <span class="token comment"># おそらくget_object_or_404(Question, pk=question_id)のQuestion部分を担っている。</span>
    <span class="token comment"># pkの部分はurls.pyで先に指定してある。</span>
    model <span class="token operator">=</span> Question
    template_name <span class="token operator">=</span> <span class="token string">'polls/detail.html'</span>

<span class="token keyword">class</span> <span class="token class-name">ResultsView</span><span class="token punctuation">(</span>generic<span class="token punctuation">.</span>DetailView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    model <span class="token operator">=</span> Question
    template_name <span class="token operator">=</span> <span class="token string">'polls/results.html'</span>

<span class="token keyword">def</span> <span class="token function">vote</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> question_id<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment"># 前回のまま変更しない。</span>
</code></pre></div>
<p>これでサーバを起動して特にエラーもなく質問のリストページ（index.html）、詳細ページ（投票するページdetail.html）、投票後の今ままでの投票数を表示するページ（results.html）が表示されていれば汎用ビューでのアプリ構築ができたと思う。</p>
<h2>最後に</h2>
<p>過去にRuby on railsのフレームワークの中身がどう動作しているのかイメージ出来ないのが苦痛（フレームワークは面倒な中身を気にしなくてもアプリが作れるように設計してあるので仕方ないかもしれない。）で挫折しているので今回Djangoのチュートリアルまだ途中ですが挫折せずにアプリ作成まで出来てよかったです。普段Jsonしか触らなかったので少しですがデータベースを作成して操作する経験が出来たのでこれを気にSQL構文をもう少し勉強しようと思う。多対多、多対一の関係とかも自分で作成出来るまでになります。自分の作成したアプリのER図をかける書けるようになりたい。</p>
<h3>参照</h3>
<p><a href="https://qiita.com/frosty/items/bb5bc1553f452e5bb8ff">SECRET_KEYを誤ってGitHubにプッシュしたときの対処法（Django編） - Qiita</a></p>
<p><a href="https://note.nkmk.me/python-relative-import/">Pythonの相対インポートで上位ディレクトリ・サブディレクトリを指定 | note.nkmk.me</a></p>
<p><a href="https://python.civic-apps.com/wildcard-import/">ワイルドカードインポート(import *)は推奨されない</a></p>
<p><a href="https://wa3.i-3-i.info/diff529name.html">「カラム名」と「フィールド名」の違い｜「分かりそう」で「分からない」でも「分かった」気になれるIT用語辞典</a></p>
<p><a href="https://densan-labs.net/tech/codefirst/migration.html">3. データベースマイグレーション | densan-labs.net</a></p>
<p><a href="https://codor.co.jp/django/making-model">モデル(データベース)の作成</a></p>
<p><a href="https://qiita.com/dojyorin/items/0bd3ef167991cfc703b1">プログラミングでよく見かける"コンテキスト(context)って何？ - Qiita</a></p>
<p><a href="https://qiita.com/maisuto/items/eece9d880d94fd241a0d">Python Django チュートリアル(3) - Qiita</a></p>
<p><a href="https://qiita.com/ShimantoAkira/items/ec1130fbd2a65cd5b7f3">DJangoのお勉強(1) - Qiita</a></p>
<p><a href="https://docs.djangoproject.com/ja/3.2/intro/">ドキュメント</a></p>
<p><a href="https://hombre-nuevo.com/python/python0057/">Djangoの汎用ビュー入門（ListView）</a></p>
<p><a href="https://www.dbonline.jp/mysql/table/index11.html">FOREIGN KEY制約(外部キー制約を設定する)</a></p>
<p><a href="https://wa3.i-3-i.info/word17575.html">外部キー制約とは｜「分かりそう」で「分からない」でも「分かった」気になれるIT用語辞典</a></p>
<p><a href="https://noumenon-th.net/programming/2019/12/02/foreignkey/">Django ForeignKeyで1対多のモデルを構築</a></p>
<p>記事に関するコメント等は</p>
<p>🕊：<a href="https://twitter.com/Unemployed_jp">Twitter</a>
📺：<a href="https://www.youtube.com/channel/UCT3wLdiZS3Gos87f9fu4EOQ/featured?view_as=subscriber">Youtube</a>
📸：<a href="https://www.instagram.com/unemployed_jp/">Instagram</a>
👨🏻‍💻：<a href="https://github.com/wimpykid719?tab=repositories">Github</a>
😥：<a href="https://ja.stackoverflow.com/users/edit/22565">Stackoverflow</a></p>
<p>でも受け付けています。どこかにはいます。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHubパスワード認証（もうすぐ使えなくなる）をアクセストークン認証に変更する。]]></title>
        <id>https://techblog-pink.vercel.app/posts/github-require-accesstoken</id>
        <link href="https://techblog-pink.vercel.app/posts/github-require-accesstoken"/>
        <updated>2021-05-12T15:00:00.000Z</updated>
        <summary type="html"><![CDATA[...]]></summary>
        <content type="html"><![CDATA[<h2>最初に</h2>
<p>2021年8月13日からGitHubでパスワードによる認証が廃止される（2021年6月30日、2021年７月28日にも対応出来ていない人に知らせるようになっているらしい。）ので、それに対応出来るようにアクセストークンによる認証方法に変更する。</p>
<p><a href="https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/">公式</a>によると今回影響を受けるのは</p>
<ul>
<li>コマンドラインgitからのアクセス</li>
<li>gitを使ったデスクトップアプリ（GitHub Desktopを除く）</li>
<li>パスワード認証を使うサービス・アプリ全般</li>
</ul>
<p>自分は普段コマンドラインからGitHubにアクセスしているので、一番最初のに当てはまる。</p>
<h2>パーソナルアクセストークンを取得する。</h2>
<p>GitHubのsettingページに行く → Developer Setting → <a href="https://github.com/settings/tokens">Personal access token</a></p>
<p>このページでGenerate new tokenをクリックする。 名前はお好みで、アクセススコープは コマンドラインでリポジトリの操作全般を行いたいので、repoとadmin：repo_hookとdelete_repoにチェックを入れる。そしてGenerate tokenでトークンを生成する。生成されたトークンをパスワードの変わりに使用する。</p>
<p><a href="https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token">Creating a personal access token</a></p>
<h2>gitにトークンを設定して行く。</h2>
<p>macの場合キーチェーンにgitのパスワード情報があると思うので<code>git-credential-osxkeychain</code> それを削除する。</p>
<p>そして、  <code>git add .</code> をすると Username、passwordを聞かれるのでパスワードの部分に今回取得したアクセストークンを設定します。これで対応完了です。</p>
<p>そしてアクセストークンを使用する場合はリモートリポジトリ等のURL設定はSSHではなくHTTPSにする必要があるそうです。</p>
<p><a href="https://docs.github.com/ja/github/getting-started-with-github/updating-credentials-from-the-macos-keychain">Updating credentials from the macOS Keychain</a></p>
<p>記事に関するコメント等は</p>
<p>🕊：<a href="https://twitter.com/Unemployed_jp">Twitter</a>
📺：<a href="https://www.youtube.com/channel/UCT3wLdiZS3Gos87f9fu4EOQ/featured?view_as=subscriber">Youtube</a>
📸：<a href="https://www.instagram.com/unemployed_jp/">Instagram</a>
👨🏻‍💻：<a href="https://github.com/wimpykid719?tab=repositories">Github</a>
😥：<a href="https://ja.stackoverflow.com/users/edit/22565">Stackoverflow</a></p>
<p>でも受け付けています。どこかにはいます。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【無料運用】Zennの投稿記事を使ったブログをNext.js, Tailwindcss, TypeScript, Vercelで構築した。]]></title>
        <id>https://techblog-pink.vercel.app/posts/nextjs-build-techblog</id>
        <link href="https://techblog-pink.vercel.app/posts/nextjs-build-techblog"/>
        <updated>2021-05-09T15:00:00.000Z</updated>
        <summary type="html"><![CDATA[Reactのチュートリアル、Next.jsのチュートリアル、TypeScriptの入門?を終えたので、そのアウトプットとして無料で運用出来るtechBlogを作成しようと思う。記事は新しくブログ用に書くとZennと分散してしまうのでZennに投稿している記事を使...]]></summary>
        <content type="html"><![CDATA[<h2>最初に</h2>
<p>Reactのチュートリアル、Next.jsのチュートリアル、TypeScriptの入門?を終えたので、そのアウトプットとして無料で運用出来るtechBlogを作成しようと思う。記事は新しくブログ用に書くとZennと分散してしまうのでZennに投稿している記事を使ってサイトをビルドしていく。その前、準備としてZennとGitHubを連携する必要があるのでまだ行っていない方は<a href="https://techblog-pink.vercel.app/posts/zenn-migrate-past-articles-github">こちらの記事</a>を参考にすると出来ます。</p>
<h3>実際に作成したtechBlog</h3>
<p>モバイル版
<img src="https://storage.googleapis.com/zenn-user-upload/0wwzsv9bsoyo8wicyl5j6fwe98yo" alt="https://storage.googleapis.com/zenn-user-upload/0wwzsv9bsoyo8wicyl5j6fwe98yo"></p>
<p>デスクトップ版
<img src="https://storage.googleapis.com/zenn-user-upload/j55aisuqu75pesx7rx66j6bhfnww" alt="https://storage.googleapis.com/zenn-user-upload/j55aisuqu75pesx7rx66j6bhfnww"></p>
<p><a href="https://techblog-pink.vercel.app">techBlog：大学生だった</a>
<a href="https://github.com/wimpykid719/blog">実際のコード</a></p>
<h3>参考にしたデザイン</h3>
<p><img src="https://storage.googleapis.com/zenn-user-upload/iccv9zhlprbn9hxwb97f1ih50c6j" alt="https://storage.googleapis.com/zenn-user-upload/iccv9zhlprbn9hxwb97f1ih50c6j"></p>
<p><a href="https://dribbble.com/shots/5489447-MNW-mobile">MNW- mobile</a></p>
<h2>構成</h2>
<ul>
<li>Next.js</li>
<li>index.tsx</li>
<li>記事をzennの投稿を管理しているリポジトリから取得する。</li>
<li>TypeScriptでAPIの型を定義する。</li>
<li>[id].tsx</li>
<li>コードのシンタックスハイライト、数式、テーブルを表示する。</li>
<li>component各種</li>
<li>Vercel環境変数</li>
<li>Tailwindを導入する。</li>
<li>google analyticsを導入する。</li>
</ul>
<h2>Next.js</h2>
<p>node.jsをインストールしたら開発を始めたいフォルダ内で <code>npx create-next-app</code> を実行すると必要なファイルやフォルダを生成してくれる。実行後はチュートリアルで作成したブログが出来上がっていると思う。基本的にそのブログを少カスタマイズしていく。</p>
<p>生成されたファイルは <code>index.js</code> 等なので <code>touch tsconfig.json</code> でTypeScriptの設定ファイルを生成するとNext.jsが自動で中身を書いてくれる。その後 <code>index.tsx</code> と変更してTypeScriptを扱えるようになる。 <code>npm run dev</code> でエラーなくビルド出来れるはず。</p>
<h2>特徴</h2>
<p>Next.jsはあらかじめWebサイト表示に必要なデータを集めて、レンダリングして静的ファイルにしたのをサーバに配置して返すようにしている。そのため表示速度がとても早い。これがよく言われている。SSG（Static Site Generation）である。ローカルで開発してる時はSSGでコードを書いても、 <code>npm run dev</code> ではSSR（Server-side Rendering）で表示されるのでリクエスト度にページがレンダリングされるので遅かったが、Vercelにデプロイして作成したページにアクセスした際にその速さに驚いた。</p>
<h2>事前にレンダリング（Pre-rendering）とデータをフェッチする。</h2>
<p>今回のGitHubのリポジトリから直接データをフェッチする前にNext.jsではどのようにデータを取得してHTMLを組み立てるのか見ていこうと思う。</p>
<h3>Pre-renderingとは</h3>
<p>Next.jsでは全てのページをPre-renderingしている。つまり、Next.jsは前もって全てのページのHTMLを生成している。SPAのようにブラウザなどがJavaScriptを用いて、HTMLを生成しているのではない。</p>
<h3>Pre-renderingの方法は2つある。</h3>
<ul>
<li>Static Generation（SSG）：Build時にHTMLファイルを生成する。</li>
<li>Server-side Rendering（SSR）：RequestごとにHTMLファイルを生成する。</li>
</ul>
<p>※開発モード( <code>npm run dev</code> or <code>yarn dev</code> )ではSSGの方法をとっていたとしても全てRequestごとにPre-renderingを行う(SSR)。</p>
<p>可能な限りSSGを使用する。理由はBuild時にHTMLを一括でCDNサーバ（Content Deivery Networkでキャッシュを分散させて配置する事でアクセスしてきた者から、一番近いサーバからキャッシュを渡して通信速度の改善を測る。）に作成・配置出来るため、毎回RequestによってHTMLを作成するServer-side Rendering（SSR）よりも表示速度が早くなるため。</p>
<p>ユーザのRequestよりも前にHTMLを作成出来るのであれば、SSGを使用する。ブログやECサイトは前もって表示出来るデータが決まっているので、これに当てはまる。</p>
<p>逆にユーザ動作がトリガーで表示が変わるものなどはSSRを利用する。</p>
<h3>SSGで外部データからコンテンツをbuildする。</h3>
<p>HTMLを作成する際に、外部データの取得（DBから値を取得するなど）がある場合とない場合が想定される。</p>
<ul>
<li>外部データが取得する必要がない場合</li>
</ul>
<p>Build時に静的なHTMLファイルが生成される。</p>
<ul>
<li>外部データの取得が必要な場合</li>
</ul>
<p>Build時にNext.jsがDBにアクセスし必要な外部データを取得する。</p>
<p>その取得データを元にHTMLファイルを生成する。</p>
<p>この外部データが必要な場合、Next.jsでは <code>getStaticProps</code> を使用する。</p>
<h3><code>getStaticProps</code> で外部からデータを取得する。</h3>
<p>このメソッドを使用する事で、build時にNext.jsが外部データにアクセスする。</p>
<p>※ <code>getStaticProps</code> メソッドはサーバサイドでしか動作しない。中身の動作は自分で書く。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token comment">// getStaticPropsでreturnしたpropsを引数として受け取れる。</span>
<span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Home</span></span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> posts <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token spread operator">...</span> <span class="token punctuation">}</span>

<span class="token comment">// getStaticPropsの中身は自分で実装する。</span>
<span class="token keyword module">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getStaticProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// DBやAPIから値を取得する。</span>
	<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword control-flow">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://.../posts'</span><span class="token punctuation">)</span>
	<span class="token keyword">const</span> posts <span class="token operator">=</span> <span class="token keyword control-flow">await</span> data<span class="token punctuation">.</span><span class="token method function property-access">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token comment">// 取得した値をHomeコンポーネントにprops経由で渡す</span>
	<span class="token keyword control-flow">return</span> <span class="token punctuation">{</span>
		props<span class="token operator">:</span> posts
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>ここで <code>export default function Home({ posts }) { ... }</code> がよく分からなかったので調べることにした。 <code>index.js</code> で使用されて、Next.jsの内部で <code>index.js</code> をbuildする際に実行されるんだと思う。</p>
<h3>APIにFetchを投げる、Datebaseにクエリを投げる。</h3>
<ul>
<li>APIからデータ取得するには <code>fetch()</code> メソッドを使用する。</li>
</ul>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword module">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getSortedPostsData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// Instead of the file system,</span>
	<span class="token comment">// fetch post data from an external API endpont</span>
	<span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword control-flow">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span>
	<span class="token keyword control-flow">return</span> res<span class="token punctuation">.</span><span class="token method function property-access">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div>
<ul>
<li>DBからのデータ取得には <code>query()</code> メソッドを使用する。</li>
</ul>
<h2>拡張子のtsとtsxの違いは</h2>
<p><code>.ts</code> はTypeScriptだけを扱うファイルに付与して、TypeScriptの中でJSX構文（JSでhtmlを書くようにDOMを記述出来る）を扱うファイルは <code>.tsx</code> になる。</p>
<h2>Zennに投稿した記事を取得する。</h2>
<p>Zennの記事を前回Githubレポジトリで管理出来るようにしたので、それをそのままブログの記事にする。</p>
<p>記事データの取得は <code>lib/posts.ts</code> に書かれた <code>getPostsData()</code> 関数が行っている。そして取得したデータを下記のようにトップページに並べている。</p>
<p>左がモバイル版、右がデスクトップ版のトップページ <code>/</code> のデザイン</p>
<p><img src="https://storage.googleapis.com/zenn-user-upload/32f6u9e1mc59hcwcwv4kklt49359" alt="https://storage.googleapis.com/zenn-user-upload/32f6u9e1mc59hcwcwv4kklt49359"></p>
<p>実際に作成したtechBlogの <code>index.tsx</code> はこのような感じになっている。</p>
<p><code>className=""</code> に書かれているのがtawilwindのクラス名でこれを使用する事で、クラス名を考える必要もcssを別に書き込む必要がないのでとても快適な開発を行える。導入方法は後半で解説している。</p>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token imports"><span class="token maybe-class-name">Head</span></span> <span class="token keyword">from</span> <span class="token string">'next/head'</span>
<span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> getPostsData <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">'../lib/posts'</span>
<span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> getSortedPostsData <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">'../lib/posts'</span>
<span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> getUserData <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">'../lib/user'</span>
<span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">GetStaticProps</span> <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">'next'</span>
<span class="token keyword">import</span> <span class="token imports"><span class="token maybe-class-name">Link</span></span> <span class="token keyword">from</span> <span class="token string">'next/link'</span>
<span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">Article</span> <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">'../types/Article'</span>
<span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">UserResponse</span> <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">'../types/Response'</span>
<span class="token keyword">import</span> <span class="token imports"><span class="token maybe-class-name">Layout</span></span> <span class="token keyword">from</span> <span class="token string">'../components/layout'</span>
<span class="token keyword">import</span> <span class="token known-class-name class-name">Date</span> <span class="token keyword">from</span> <span class="token string">'../components/date'</span>
<span class="token keyword">import</span> <span class="token imports"><span class="token maybe-class-name">Topics</span></span> <span class="token keyword">from</span> <span class="token string">'../components/topics'</span>
<span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> siteTitle <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">'../components/layout'</span>

<span class="token comment">//モバイル版の記事背景の色を4つ用意してそれを順番にclassNameに指定している。</span>
<span class="token keyword">const</span> pattern <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"bg-blue"</span><span class="token punctuation">,</span> <span class="token string">"bg-blue-light"</span><span class="token punctuation">,</span> <span class="token string">"bg-gray"</span><span class="token punctuation">,</span> <span class="token string">"bg-earth-light"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
<span class="token comment">//記事の最初はindex：0なので0/4のあまりは0でpattern配列の0番目が選択される。</span>
<span class="token keyword">function</span> <span class="token function">getColorClassFromIndex</span><span class="token punctuation">(</span><span class="token parameter">index<span class="token operator">:</span> number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> pattern<span class="token punctuation">[</span>index <span class="token operator">%</span> pattern<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Home</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> 
  sortedPostData<span class="token punctuation">,</span> userData
<span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  sortedPostData<span class="token operator">:</span> <span class="token maybe-class-name">Article</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
  userData<span class="token operator">:</span> <span class="token maybe-class-name">UserResponse</span>
<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
		<span class="token punctuation">{</span><span class="token comment">/*LayoutコンポーネントにGithubのプロフィール写真のURLを渡して取得するようにしている。*/</span><span class="token punctuation">}</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">Layout</span></span> <span class="token attr-name">avatarUrl</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>userData<span class="token punctuation">.</span><span class="token property-access">avatar_url</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lg:max-w-5xl lg:mx-auto<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">Head</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>title</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>siteTitle<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>title</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/favicon.ico<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text"></span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span><span class="token class-name">Head</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>ul</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mx-auto lg:flex lg:flex-wrap lg:justify-between lg:max-w-2xl xl:max-w-4xl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">					</span><span class="token punctuation">{</span><span class="token comment">/*Githubのリポジトリから取得したデータを整形したものをmap関数で並べる*/</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="token plain-text">          </span><span class="token punctuation">{</span>sortedPostData<span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> id<span class="token punctuation">,</span> title<span class="token punctuation">,</span> date<span class="token punctuation">,</span> topics<span class="token punctuation">,</span> type <span class="token punctuation">}</span><span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">(</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>li</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token function">getColorClassFromIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" h-60 flex justify-center items-center lg:max-w-xs xl:max-w-sm w-full lg:mb-14 lg:bg-transparent"</span> <span class="token punctuation">}</span></span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>id<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">              </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>w-11/12 h-5/6 flex flex-col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>font-bold text-xl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">                  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">Link</span></span> <span class="token attr-name">href</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/posts/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">                    </span><span class="token punctuation">{</span>title<span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="token plain-text">                  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span><span class="token class-name">Link</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-xs text-gray-darker<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">                  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">Topics</span></span> <span class="token attr-name">topicList</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>topics<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token plain-text"></span>
<span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>small</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>border border-r-0 border-b-0 border-l-0 h-8 flex justify-between mt-auto items-end<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">                  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token keyword">type</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>span</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">                  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">Date</span></span> <span class="token attr-name">dateString</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>date<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token plain-text"></span>
<span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>small</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">              </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>li</span><span class="token punctuation">></span></span>
          <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span><span class="token class-name">Layout</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// サーバ側で実行される処理データをfetchする。</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> getStaticProps<span class="token operator">:</span> <span class="token function-variable function">GetStaticProps</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
	<span class="token comment">// リポジトリ内にあるファイル情報を全て取得している。</span>
  <span class="token keyword">const</span> allPostsData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getPostsData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">// mdファイルのmeta情報を元に日付順に並び替えたり、データを整形して渡す。</span>
  <span class="token keyword">const</span> sortedPostData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getSortedPostsData</span><span class="token punctuation">(</span>allPostsData<span class="token punctuation">)</span>
	<span class="token comment">// Githubのプロフィール画像を取得したいのでユーザ情報を取得する。</span>
  <span class="token keyword">const</span> userData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getUserData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    props<span class="token operator">:</span> <span class="token punctuation">{</span>
      sortedPostData<span class="token operator">:</span> sortedPostData<span class="token punctuation">,</span>
      userData<span class="token operator">:</span> userData<span class="token punctuation">,</span> 
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>
<h2>追加したい機能はlibフォルダに書いていく。</h2>
<p>ルートフォルダに <code>lib/posts.tsx</code> という感じにファイルを作成してそこにAPIをFetchする関数を書いて、各々のページで <code>import</code> して使う。先ほどの <code>getStaticProps</code> 内で使用されている関数もここに記述されている。</p>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token imports">matter</span> <span class="token keyword">from</span> <span class="token string">'gray-matter'</span>
<span class="token keyword">import</span> <span class="token imports">remark</span> <span class="token keyword">from</span> <span class="token string">'remark'</span>
<span class="token keyword">import</span> <span class="token imports">html</span> <span class="token keyword">from</span> <span class="token string">'remark-html'</span>
<span class="token keyword">import</span> <span class="token imports">prism</span> <span class="token keyword">from</span> <span class="token string">'remark-prism'</span>
<span class="token keyword">import</span> <span class="token imports">gfm</span> <span class="token keyword">from</span> <span class="token string">'remark-gfm'</span>
<span class="token comment">//マークダウンから数式を解析</span>
<span class="token keyword">import</span> <span class="token imports">math</span> <span class="token keyword">from</span> <span class="token string">'remark-math'</span>
<span class="token comment">//解析された数式をkatexが読み込めるようにHTML変換する。</span>
<span class="token keyword">import</span> <span class="token imports">htmlKatex</span> <span class="token keyword">from</span> <span class="token string">'remark-html-katex'</span>
<span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">ArticleResponse</span> <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">'../types/Response'</span>
<span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">Article</span> <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">'../types/Article'</span>

<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getPostsData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">//Githubのzenn-cotent/articlesフォルダ内のデータを全件取得している。</span>
  <span class="token keyword">const</span> zennArticles<span class="token operator">:</span> <span class="token maybe-class-name">ArticleResponse</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"https://api.github.com/repos/wimpykid719/zenn-content/contents/articles"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    headers<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string">"Authorization"</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">token </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">GITHUB_TOKEN</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token method function property-access">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token method function property-access">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
        <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 上記で取得したデータにはメタ情報のみでファイルデータはないのでそれを取得している。</span>
  <span class="token keyword">const</span> datas <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">zennArticles</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>zennArticles<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token known-class-name class-name">Promise</span><span class="token punctuation">.</span><span class="token method function property-access">all</span><span class="token punctuation">(</span>zennArticles<span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">article<span class="token operator">:</span> <span class="token maybe-class-name">ArticleResponse</span></span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"https://api.github.com/repos/wimpykid719/zenn-content/contents/articles/"</span> <span class="token operator">+</span> article<span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
          headers<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string">"Authorization"</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">token </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">GITHUB_TOKEN</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
              <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token method function property-access">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token method function property-access">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
              <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token comment">// 取得したデータがbase64形式になっているのでそれをutf-8の文字列に変換する。</span>
        <span class="token keyword">const</span> buffer <span class="token operator">=</span> <span class="token maybe-class-name">Buffer</span><span class="token punctuation">.</span><span class="token method function property-access">from</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token property-access">content</span><span class="token punctuation">,</span> <span class="token string">'base64'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> fileContents <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token method function property-access">toString</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token comment">// mdファイルの構文を解析してメタ情報とコンテンツをオブジェクトに格納してくれる。</span>
        <span class="token keyword">const</span> matterResult <span class="token operator">=</span> <span class="token function">matter</span><span class="token punctuation">(</span>fileContents<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>matterResult<span class="token punctuation">.</span><span class="token property-access">data</span><span class="token punctuation">.</span><span class="token property-access">published</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
          id<span class="token operator">:</span> article<span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token special-escape escape">\.</span>md<span class="token anchor function">$</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token spread operator">...</span><span class="token punctuation">(</span>matterResult<span class="token punctuation">.</span><span class="token property-access">data</span> <span class="token keyword">as</span> <span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> emoji<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> type<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> topics<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> published<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span> date<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          content<span class="token operator">:</span> matterResult<span class="token punctuation">.</span><span class="token property-access">content</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>zennArticles<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> removeFalsyDatas <span class="token operator">=</span> datas<span class="token punctuation">.</span><span class="token method function property-access">filter</span><span class="token punctuation">(</span><span class="token known-class-name class-name">Boolean</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> removeFalsyDatas<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getSortedPostsData</span><span class="token punctuation">(</span><span class="token parameter">articles<span class="token operator">:</span> <span class="token maybe-class-name">Article</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> articles<span class="token punctuation">.</span><span class="token method function property-access">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token property-access">date</span> <span class="token operator">===</span> b<span class="token punctuation">.</span><span class="token property-access">date</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token number">0</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token property-access">date</span> <span class="token operator">&#x3C;</span> b<span class="token punctuation">.</span><span class="token property-access">date</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getHtmlContent</span><span class="token punctuation">(</span><span class="token parameter">article<span class="token operator">:</span> <span class="token maybe-class-name">Article</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> processedContent <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">remark</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token method function property-access">use</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token method function property-access">use</span><span class="token punctuation">(</span>htmlKatex<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token method function property-access">use</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token method function property-access">use</span><span class="token punctuation">(</span>prism<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token method function property-access">use</span><span class="token punctuation">(</span>gfm<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token method function property-access">process</span><span class="token punctuation">(</span>article<span class="token punctuation">.</span><span class="token property-access">content</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> contentHtml <span class="token operator">=</span> processedContent<span class="token punctuation">.</span><span class="token method function property-access">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token spread operator">...</span>article<span class="token punctuation">,</span>
    content<span class="token operator">:</span> contentHtml
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getAllPostIds</span><span class="token punctuation">(</span><span class="token parameter">articles<span class="token operator">:</span> <span class="token maybe-class-name">Article</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> articles<span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">article<span class="token operator">:</span> <span class="token maybe-class-name">Article</span></span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      params<span class="token operator">:</span> <span class="token punctuation">{</span>
          id<span class="token operator">:</span> article<span class="token punctuation">.</span><span class="token property-access">id</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getPostData</span><span class="token punctuation">(</span><span class="token parameter">articles<span class="token operator">:</span> <span class="token maybe-class-name">Article</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> id<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> articles<span class="token punctuation">.</span><span class="token method function property-access">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">article<span class="token operator">:</span> <span class="token maybe-class-name">Article</span></span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>article<span class="token punctuation">.</span><span class="token property-access">id</span> <span class="token operator">===</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> article
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> 

<span class="token comment">// title: "tsconfig.json オプション入門" # 記事のタイトル</span>
<span class="token comment">// emoji: "🧐" # アイキャッチとして使われる絵文字（1文字だけ）</span>
<span class="token comment">// type: "tech" # tech: 技術記事 / idea: アイデア記事</span>
<span class="token comment">// topics: ["typescript", "初心者", "作業ログ"] # タグ。["markdown", "rust", "aws"]のように指定する</span>
<span class="token comment">// published: true # 公開設定（falseにすると下書き）</span>
<span class="token comment">// http://robin.hatenadiary.jp/entry/2017/01/08/225337 bugger.from推奨</span>
</code></pre></div>
<h2>コードシンタックスハイライト、数式、tableをHTMLに変換する。</h2>
<p>上記のコード一部、 <code>getHtmlContent()</code></p>
<p>mdファイルをHTMLに変換するのに <code>remark()</code> を使用しているのでその拡張を提供している。</p>
<p>Next.jsのチュートリアルでもインストールする。mdファイル構文解析してhtmlに変換してくれる。</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> remark remark-html
</code></pre></div>
<h2>シンタックスハイライトの導入</h2>
<p><img src="https://storage.googleapis.com/zenn-user-upload/a534c3wohx90u39i1ymmpoxcur2w" alt="https://storage.googleapis.com/zenn-user-upload/a534c3wohx90u39i1ymmpoxcur2w"></p>
<p>mdに書かれたコード部分をHTMLでタグ付けしてくれる。それをcssで装飾する事でシンタックスハイライトを作る。cssは自作で作成する事で好きな色でコードを装飾出来る。</p>
<p><a href="http://k88hudson.github.io/syntax-highlighting-theme-generator/www/">prism generator</a>を使うと配色の感じを確認しながら作成出来る。httpsに対応していないのが気になる。</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash"><span class="token function">npm</span> i @sergioramos/remark-prism
</code></pre></div>
<p>生成したcssを <code>_app.tsx</code> で設定する。</p>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token string">'../styles/globals.css'</span>
<span class="token comment">// 下記が自作のシンタックスハイライトのcss</span>
<span class="token keyword">import</span> <span class="token string">"../styles/prism-daigakusei.css"</span>
<span class="token comment">// 同梱のprismのテーマを使いたいなら</span>
<span class="token comment">// import "prismjs/themes/prism-funky.css"</span>

<span class="token comment">// katexのcss</span>
<span class="token keyword">import</span> <span class="token string">"katex/dist/katex.min.css"</span>
<span class="token keyword">import</span> <span class="token imports">usePageView</span> <span class="token keyword">from</span> <span class="token string">'../src/hooks/usePageView'</span>
<span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">AppProps</span> <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">'next/app'</span>

<span class="token keyword">function</span> <span class="token function">MyApp</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> <span class="token maybe-class-name">Component</span><span class="token punctuation">,</span> pageProps <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token maybe-class-name">AppProps</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">usePageView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">Component</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token spread operator">...</span>pageProps<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token maybe-class-name">MyApp</span>
</code></pre></div>
<h2>数式（Katex）の導入</h2>
<p>上記にある通り <code>_app.tsx</code> でcssを当てておく。</p>
<p><img src="https://storage.googleapis.com/zenn-user-upload/gpa32uhhv2n62yhfso8wru296fcw" alt="https://storage.googleapis.com/zenn-user-upload/gpa32uhhv2n62yhfso8wru296fcw"></p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> remark-math remark-html-katex
</code></pre></div>
<h2>tableの導入</h2>
<p><img src="https://storage.googleapis.com/zenn-user-upload/g66ct9rp2mctgjy2c4z8mn7asxnf" alt="https://storage.googleapis.com/zenn-user-upload/g66ct9rp2mctgjy2c4z8mn7asxnf"></p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> remark-gfm
</code></pre></div>
<p>このuseに記述する順番が違うと上手く変換してくれないので（数式の扱うmath, htmlkatexで起こった）、注意が必要多分ほんとはhtmlが一番最後にした方が良い気がするが動作してるのでこのままにしておく。</p>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">const</span> processedContent <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">remark</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token method function property-access">use</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token method function property-access">use</span><span class="token punctuation">(</span>htmlKatex<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token method function property-access">use</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token method function property-access">use</span><span class="token punctuation">(</span>prism<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token method function property-access">use</span><span class="token punctuation">(</span>gfm<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token method function property-access">process</span><span class="token punctuation">(</span>article<span class="token punctuation">.</span><span class="token property-access">content</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> contentHtml <span class="token operator">=</span> processedContent<span class="token punctuation">.</span><span class="token method function property-access">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div>
<h2>TypeScriptでfetchしたデータに型を付ける</h2>
<p><code>types/Response.ts</code> を作成してGitHub APIから返ってくるデータに対して型を定義した。これを <code>import { ArticleResponse } from '../types/Response'</code> して使っている。</p>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">ArticleResponse</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  sha<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  size<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  html_url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  git_url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  download_url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  type<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  _links<span class="token operator">:</span> <span class="token punctuation">{</span>
    self<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    git<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    html<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">UserResponse</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  login<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  node_id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  avatar_url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  gravatar_id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  html_url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  followers_url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  following_url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  gists_url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  starred_url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  subscriptions_url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  organizations_url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  repos_url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  events_url<span class="token operator">:</span>  <span class="token builtin">string</span><span class="token punctuation">;</span>
  received_events_url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  type<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  site_admin<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  name<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  company<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  blog<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token dom variable">location</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  email<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  hireable<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  bio<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  twitter_username<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  public_repos<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  public_gists<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  followers<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  following<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  created_at<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  updated_at<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>整形した記事データには <code>types/Article.ts</code> を使う。</p>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Article</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  emoji<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  type<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  topics<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  published<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  date<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  content<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>
<h2>取得したデータで記事ページを作成する。</h2>
<p>記事ページは <code>[id].tsx</code> とする事で一つのファイルで複数のパスページを生成出来る。</p>
<p>パスの指定は <code>getStaticPaths()</code> で行う。必須のパラメータは <code>paths, fallback</code> になる。 <code>fallback</code> は事前にビルドしたパス以外にアクセスがあった場合の動作を <code>true, false</code>  で決める。 <code>false</code> の場合は404ページが表示される。</p>
<p><code>True</code> であれば404にアクセスするとフォールバック版のページを表示するようになる。これはあらかじめ静的するページが多いECサイト等でビルドに膨大な時間をかけるのを改善するために全てページをビルドせず、一定のページはリクエストもらったら生成するように実装したい場合に使用される。</p>
<p><code>paths</code> キーはどのパスがプリレンダリングされるか決定する。動的ルートを使用した <code>pages/posts/[id].js</code> というページがある。このページに <code>getStaticPaths</code> をエクスポートして <code>paths</code> に次の値を返すようにする。 <code>paths</code> には ページのパス名として使いたい値を入れておけば良い。それに合わせてページを作成してくれる。中身のデータ等は別で定義する。zennでいう所の <code>slug</code> が <code>id</code> に入る値になる。</p>
<p>※ <a href="https://zenn.dev/unemployed/articles/3c8a872a210ded">https://zenn.dev/unemployed/articles/3c8a872a210ded</a></p>
<p>ここが <a href="https://zenn.dev/unemployed/articles/3c8a872a210ded"><code>3c8a872a210ded</code></a> slugに当たる。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword control-flow">return</span> <span class="token punctuation">{</span>
  paths<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> params<span class="token operator">:</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token string">'1'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> params<span class="token operator">:</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token string">'2'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  fallback<span class="token operator">:</span> <span class="token spread operator">...</span>
<span class="token punctuation">}</span>
</code></pre></div>
<h2>簡単な例</h2>
<p><code>pages/posts/[id].js</code> というページごとに 1 件のブログ記事をプリレンダリングする例、ブログ記事の一覧はCMSから取得され、 <code>getStaticPaths</code> で返される。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token comment">// pages/posts/[id].js</span>

<span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Post</span></span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> post <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 記事をレンダリングします...</span>
<span class="token punctuation">}</span>

<span class="token comment">// この関数はビルド時に呼び出されます。</span>
<span class="token keyword module">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getStaticPaths</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 外部APIエンドポイントを呼び出して記事を取得します。</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword control-flow">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://.../posts'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> posts <span class="token operator">=</span> <span class="token keyword control-flow">await</span> res<span class="token punctuation">.</span><span class="token method function property-access">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 記事に基づいてプリレンダリングしたいパスを取得します</span>
  <span class="token keyword">const</span> paths <span class="token operator">=</span> posts<span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token parameter">post</span> <span class="token arrow operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    params<span class="token operator">:</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> post<span class="token punctuation">.</span><span class="token property-access">id</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// ビルド時にこれらのパスだけをプリレンダリングします。</span>
  <span class="token comment">// { fallback: false } は他のルートが404になることを意味します。</span>
  <span class="token keyword control-flow">return</span> <span class="token punctuation">{</span> paths<span class="token punctuation">,</span> fallback<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// ビルド時にも呼び出されます。</span>
<span class="token keyword module">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getStaticProps</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> params <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// paramsは記事の`id`を含みます。</span>
  <span class="token comment">// ルートが/posts/1のような時、params.id は1です。</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword control-flow">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://.../posts/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>params<span class="token punctuation">.</span><span class="token property-access">id</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> post <span class="token operator">=</span> <span class="token keyword control-flow">await</span> res<span class="token punctuation">.</span><span class="token method function property-access">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 記事データをprops経由でページに渡します。</span>
  <span class="token keyword control-flow">return</span> <span class="token punctuation">{</span> props<span class="token operator">:</span> <span class="token punctuation">{</span> post <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token maybe-class-name">Post</span><span class="token punctuation">;</span>
</code></pre></div>
<h2>techBlogで使用してる[id].tsx</h2>
<p><code>index.tsx</code> で一度取得したデータ渡したりする方法が無いみたいなので、再び一度取得したデータにfetchを投げている。 そこがなんか二度手間で気持ち悪い気がするけど、これしか手がない。もしいい方法があったら教えて下さい。</p>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token imports"><span class="token maybe-class-name">Layout</span></span> <span class="token keyword">from</span> <span class="token string">'../../components/layout'</span>
<span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> getAllPostIds<span class="token punctuation">,</span> getPostsData<span class="token punctuation">,</span> getHtmlContent<span class="token punctuation">,</span> getPostData <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">'../../lib/posts'</span>
<span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> getUserData <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">'../../lib/user'</span>
<span class="token keyword">import</span> <span class="token imports"><span class="token maybe-class-name">Head</span></span> <span class="token keyword">from</span> <span class="token string">'next/head'</span>
<span class="token keyword">import</span> <span class="token known-class-name class-name">Date</span> <span class="token keyword">from</span> <span class="token string">'../../components/date'</span>
<span class="token keyword">import</span> <span class="token imports"><span class="token maybe-class-name">Social</span></span> <span class="token keyword">from</span> <span class="token string">'../../components/social'</span>
<span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">GetStaticProps</span><span class="token punctuation">,</span> <span class="token maybe-class-name">GetStaticPaths</span> <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">'next'</span>
<span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">Article</span> <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">'../../types/Article'</span>
<span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">UserResponse</span> <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">'../../types/Response'</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Post</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> 
    postData<span class="token punctuation">,</span>
    userData
<span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> 
    postData<span class="token operator">:</span> <span class="token maybe-class-name">Article</span> 
    userData<span class="token operator">:</span> <span class="token maybe-class-name">UserResponse</span>
<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">Layout</span></span> <span class="token attr-name">avatarUrl</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>userData<span class="token punctuation">.</span><span class="token property-access">avatar_url</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">Head</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>title</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>postData<span class="token punctuation">.</span><span class="token property-access">title</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>title</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span><span class="token class-name">Head</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>article</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>w-11/12 lg:max-w-4xl mx-auto pb-7<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>postData<span class="token punctuation">.</span><span class="token property-access">title</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">                    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">Date</span></span> <span class="token attr-name">dateString</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>postData<span class="token punctuation">.</span><span class="token property-access">date</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token plain-text"></span>
<span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pt-7<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">                    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>p</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>font-bold text-blue-darker<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">あとで読む</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">                    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">Social</span></span> <span class="token attr-name">title</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>postData<span class="token punctuation">.</span><span class="token property-access">title</span><span class="token punctuation">}</span></span> <span class="token attr-name">id</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>postData<span class="token punctuation">.</span><span class="token property-access">id</span><span class="token punctuation">}</span></span> <span class="token attr-name">topics</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>postData<span class="token punctuation">.</span><span class="token property-access">topics</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token plain-text"> </span>
<span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span> <span class="token attr-name">dangerouslySetInnerHTML</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> __html<span class="token operator">:</span> postData<span class="token punctuation">.</span><span class="token property-access">content</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token plain-text"></span>
<span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>article</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span><span class="token class-name">Layout</span></span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> getStaticPaths<span class="token operator">:</span> <span class="token function-variable function">GetStaticPaths</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> allPostsData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getPostsData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token comment">// https://techblog-pink.vercel.app/ファイル名みたいな形でページを生成してくれる。</span>
    <span class="token keyword">const</span> paths <span class="token operator">=</span> <span class="token function">getAllPostIds</span><span class="token punctuation">(</span>allPostsData<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        paths<span class="token punctuation">,</span>
        fallback<span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//ここで記事のデータを取得して上のPost()のprops引数で渡してレンダリングする。</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> getStaticProps<span class="token operator">:</span> <span class="token function-variable function">GetStaticProps</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> params <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> allPostsData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getPostsData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> postData <span class="token operator">=</span> <span class="token function">getPostData</span><span class="token punctuation">(</span>allPostsData<span class="token punctuation">,</span> params<span class="token punctuation">.</span><span class="token property-access">id</span> <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> convertedPostData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getHtmlContent</span><span class="token punctuation">(</span>postData<span class="token punctuation">)</span>
    <span class="token keyword">const</span> userData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getUserData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        props<span class="token operator">:</span> <span class="token punctuation">{</span>
            postData<span class="token operator">:</span> convertedPostData<span class="token punctuation">,</span>
            userData<span class="token operator">:</span> userData
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>
<h2>ページ遷移するには</h2>
<p>Next.jsは <code>pages</code> ディレクトリ（Next.jsに置いて特別な意味をもつ）配下に <code>js/ts</code> ファイルを配置することで、URLのマッピングを自動で行う。</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">--project
  --pages
    -- index.js -<span class="token operator">></span> <span class="token string">"/"</span>でアクセス可能
    -- posts
      -- first-post.js -<span class="token operator">></span> <span class="token string">"/posts/first-post"</span>でアクセス可能
</code></pre></div>
<h2><Link>（Link Component）</h2>
<p>通常ページを移動させたい際に <code>&#x3C;a></code> タグを使用するが、Next.jsでは <code>&#x3C;link></code> コンポーネントを使用する。これを使用しないとページを移動する際に通信が発生してページ更新が入る。そのため速度低下する。</p>
<h3>使い方</h3>
<ul>
<li><code>&#x3C;a></code> タグの場合</li>
</ul>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>h1</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">  Learn </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://nextjs.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">Next.js!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>a</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>h1</span><span class="token punctuation">></span></span>
</code></pre></div>
<ul>
<li><code>&#x3C;Link></code> コンポーネントの場合</li>
</ul>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>h1</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">  Read</span><span class="token punctuation">{</span><span class="token string">' '</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">Link</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/posts/first-post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>a</span><span class="token punctuation">></span></span><span class="token plain-text">this page!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>a</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span><span class="token class-name">Link</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>h1</span><span class="token punctuation">></span></span>
</code></pre></div>
<h2>各種コンポーネント</h2>
<h2>date.tsx</h2>
<p>mdのメタ情報 <code>date</code> から日付フォーマットを変更する。</p>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> parseISO<span class="token punctuation">,</span> format <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">'date-fns'</span>

<span class="token comment">/*</span>
<span class="token comment">    cccc: Monday, Tuesday, ..., Sunday</span>
<span class="token comment"></span>
<span class="token comment">    LLLL: January, February, ..., December</span>
<span class="token comment"></span>
<span class="token comment">    d: 1, 2, ..., 31</span>
<span class="token comment"></span>
<span class="token comment">    yyyy: 0044, 0001, 1900, 2017</span>
<span class="token comment">*/</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token known-class-name class-name">Date</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> dateString <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> dateString<span class="token operator">:</span> string <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> reDateString <span class="token operator">=</span> dateString<span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token special-escape escape">\.</span></span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token function">parseISO</span><span class="token punctuation">(</span>reDateString<span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>time</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>w-1/2 text-right<span class="token punctuation">"</span></span> <span class="token attr-name">dateTime</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>dateString<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">,</span> <span class="token string">'LLLL d, yyyy'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>time</span><span class="token punctuation">></span></span>
<span class="token punctuation">}</span>
</code></pre></div>
<h3>layout.tsx</h3>
<p>各ページで共通のコンポーネントはここに記述する。 <code>Navbar</code> 等、 <code>children</code> は <code>index.tsx, [id].tsx</code> 内で挟まれたJSXがそれぞれのページで代入される。</p>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token imports"><span class="token maybe-class-name">Link</span></span> <span class="token keyword">from</span> <span class="token string">'next/link'</span>
<span class="token keyword">import</span> <span class="token imports"><span class="token maybe-class-name">Head</span></span> <span class="token keyword">from</span> <span class="token string">'next/head'</span>
<span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">Navbar</span> <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">'./menu'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> siteTitle <span class="token operator">=</span> <span class="token string">'大学生だった'</span>

<span class="token comment">//homeの型定義の?は必須の引数でない時に付ける。</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Layout</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>
    children<span class="token punctuation">,</span>
    avatarUrl<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    children<span class="token operator">:</span> <span class="token maybe-class-name">React</span><span class="token punctuation">.</span><span class="token property-access"><span class="token maybe-class-name">ReactNode</span></span>
    avatarUrl<span class="token operator">?</span><span class="token operator">:</span> string
<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">Head</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/favicon.ico<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text"></span>
<span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>meta</span>
                    <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span>
                    <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Zennに投稿した記事を使用して作成したオリジナルブログ、プログラミング技術に関する内容を投稿します。<span class="token punctuation">"</span></span>
                <span class="token punctuation">/></span></span><span class="token plain-text"></span>
<span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>meta</span>
                    <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>og:image<span class="token punctuation">"</span></span>
                    <span class="token attr-name">content</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://og-image.vercel.app/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">encodeURI</span><span class="token punctuation">(</span>siteTitle<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.png?theme=light&#x26;md=0&#x26;fontSize=75px&#x26;images=https%3A%2F%2Fassets.zeit.co%2Fimage%2Fupload%2Ffront%2Fassets%2Fdesign%2Fnextjs-black-logo.svg</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span></span>
                <span class="token punctuation">/></span></span><span class="token plain-text"></span>
<span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>og:title<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>siteTitle<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token plain-text"></span>
<span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>twitter:card<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>summary_large_image<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text"></span>
<span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span><span class="token class-name">Head</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xl:flex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">              </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">Navbar</span></span> <span class="token attr-name">avatarUrl</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>avatarUrl<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span><span class="token plain-text"></span>
<span class="token plain-text">              </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>main</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lg:flex-1 bg-earth-lighter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>main</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">//三項演算子の別の書き方らしい。JSX特有かは分からない。</span>
<span class="token comment">//https://kei-s-lifehack.hatenablog.com/entry/2021/01/20/Next.js_Tutorial_--_header_%E9%83%A8%E5%88%86%E3%81%AE%E5%88%86%E5%B2%90</span>
<span class="token comment">// {!home &#x26;&#x26; (</span>
<span class="token comment">//   &#x3C;div></span>
<span class="token comment">//       &#x3C;Link href="/"></span>
<span class="token comment">//           &#x3C;a>← Back to home&#x3C;/a></span>
<span class="token comment">//       &#x3C;/Link></span>
<span class="token comment">//   &#x3C;/div></span>
<span class="token comment">// )}</span>
</code></pre></div>
<h3>menu.tsx</h3>
<p>ハンバーガーメニューのコンポーネント（レスポンシブ対応）</p>
<p>home アイコンは<a href="https://heroicons.com/">Heroicons</a>からJSXでコピーして貼り付ける。</p>
<p>Twitter, Githubのアイコンは<a href="https://react-icons.github.io/react-icons/">react-icons</a> を使用する。</p>
<p>インストールは <code>npm install react-icons --save</code> を実行する。</p>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token imports"><span class="token maybe-class-name">Link</span></span> <span class="token keyword">from</span> <span class="token string">'next/link'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token imports"><span class="token maybe-class-name">Image</span></span> <span class="token keyword">from</span> <span class="token string">'next/image'</span>
<span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> useState <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> aboutme <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">'../aboutme'</span>
<span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">FaTwitter</span> <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">"@react-icons/all-files/fa/FaTwitter"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">FaGithub</span> <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">"@react-icons/all-files/fa/FaGithub"</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">Navbar</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>
  avatarUrl
  <span class="token punctuation">}</span> <span class="token operator">:</span> <span class="token punctuation">{</span>
    avatarUrl<span class="token operator">:</span> string
  <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>active<span class="token punctuation">,</span> setActive<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
    <span class="token function">setActive</span><span class="token punctuation">(</span><span class="token operator">!</span>active<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">      </span><span class="token punctuation">{</span><span class="token comment">/* 下記のコードは三項演算子を使用していてactiveがTrueなら空が適用される。それで要素が出てくる。最初はfalseで要素を隠す。 */</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>nav</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>
        active <span class="token operator">?</span> <span class="token string">''</span> <span class="token operator">:</span> <span class="token string">'-translate-x-72'</span>
      <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> xl:flex flex-wrap bg-earth-light p-1.5 fixed z-10 w-72 transform transition-transform xl:static xl:translate-x-0 xl:bg-blue-light overflow-y-auto disable-scrollbars inset-y-0 min-h-screen rounded-3xl rounded-tl-none rounded-bl-none xl:rounded-none</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span></span>
      <span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>flex justify-end xl:hidden<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>button</span>
              <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inline-flex p-3 hover:bg-gray rounded outline-none text-blue-dark<span class="token punctuation">"</span></span>
              <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span>
            <span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">              </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>svg</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2000/svg<span class="token punctuation">"</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>h-5 w-5 lg:h-8 lg:w-8<span class="token punctuation">"</span></span> <span class="token attr-name">viewBox</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0 0 20 20<span class="token punctuation">"</span></span> <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>currentColor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>path</span> <span class="token attr-name">fillRule</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>evenodd<span class="token punctuation">"</span></span> <span class="token attr-name">d</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>M7.707 14.707a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l2.293 2.293a1 1 0 010 1.414z<span class="token punctuation">"</span></span> <span class="token attr-name">clipRule</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>evenodd<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text"></span>
<span class="token plain-text">              </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>svg</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>w-60 mx-auto<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-blue-dark flex justify-between mt-7<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">              </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">Image</span></span>
                <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>avatarUrl<span class="token punctuation">}</span></span>
                <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>avatar<span class="token punctuation">"</span></span>
                <span class="token attr-name">width</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">80</span><span class="token punctuation">}</span></span>
                <span class="token attr-name">height</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">80</span><span class="token punctuation">}</span></span>
                <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rounded-3xl<span class="token punctuation">"</span></span>
              <span class="token punctuation">/></span></span><span class="token plain-text"></span>
<span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">              </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>p</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-xl font-bold<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">大学生だった.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">              </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>ul</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-xs font-extralight mt-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>li</span><span class="token punctuation">></span></span><span class="token plain-text">&#x3C;a href=</span><span class="token punctuation">{</span>aboutme<span class="token punctuation">.</span><span class="token property-access">twitterURL</span><span class="token punctuation">}</span><span class="token plain-text"> target="_blank"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">FaTwitter</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">　</span><span class="token punctuation">{</span>aboutme<span class="token punctuation">.</span><span class="token property-access">twitterID</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>li</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>li</span><span class="token punctuation">></span></span><span class="token plain-text">&#x3C;a href=</span><span class="token punctuation">{</span>aboutme<span class="token punctuation">.</span><span class="token property-access">githubURL</span><span class="token punctuation">}</span><span class="token plain-text"> target="_blank"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">FaGithub</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">　</span><span class="token punctuation">{</span>aboutme<span class="token punctuation">.</span><span class="token property-access">githubID</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>li</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">              </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-sm text-blue-dark mt-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>p</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-base font-bold<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">自己紹介</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>p</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>aboutme<span class="token punctuation">.</span><span class="token property-access">description</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>br</span><span class="token punctuation">/></span></span><span class="token plain-text"></span>
<span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>p</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-base font-bold<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">使う技術</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>p</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>aboutme<span class="token punctuation">.</span><span class="token property-access">tech</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>br</span><span class="token punctuation">/></span></span><span class="token plain-text"></span>
<span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>p</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-base font-bold<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">今やってる事</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>p</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>aboutme<span class="token punctuation">.</span><span class="token property-access">lately</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>br</span><span class="token punctuation">/></span></span><span class="token plain-text"></span>
<span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>p</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-base font-bold<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">今後やりたい事</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>p</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>aboutme<span class="token punctuation">.</span><span class="token property-access">future</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>flex flex-col text-blue-dark mt-10 mb-10<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">Link</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>/<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">              </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>a</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>inline-flex lg:w-auto w-full px-3 py-2 rounded font-bold items-center justify-center <span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>svg</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2000/svg<span class="token punctuation">"</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>h-5 w-5<span class="token punctuation">"</span></span> <span class="token attr-name">viewBox</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0 0 20 20<span class="token punctuation">"</span></span> <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>currentColor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">                  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>path</span> <span class="token attr-name">d</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text"></span>
<span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>svg</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">                Home</span>
<span class="token plain-text">              </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>a</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span><span class="token class-name">Link</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>nav</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bg-earth-lighter p-1.5 xl:hidden<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>button</span>
          <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inline-flex p-3 hover:bg-gray rounded outline-none lg:text-lg<span class="token punctuation">"</span></span>
          <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span>
        <span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>svg</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2000/svg<span class="token punctuation">"</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>h-6 w-6 lg:h-10 lg:w-10<span class="token punctuation">"</span></span> <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span> <span class="token attr-name">viewBox</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0 0 24 24<span class="token punctuation">"</span></span> <span class="token attr-name">stroke</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>currentColor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">              </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>path</span> <span class="token attr-name">strokeLinecap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>round<span class="token punctuation">"</span></span> <span class="token attr-name">strokeLinejoin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>round<span class="token punctuation">"</span></span> <span class="token attr-name">strokeWidth</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span></span> <span class="token attr-name">d</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>M4 6h16M4 12h16M4 18h7<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text"></span>
<span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>svg</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>
<h3>Social.tsx</h3>
<p>各種リンクにページのリンクを設定する。</p>
<p>Twitter, facebook, はてな, Line, Pocket, feedly（RSSフィードのURLが必要みたいで設定してない）</p>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">FaTwitter</span> <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">"@react-icons/all-files/fa/FaTwitter"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">FaFacebookSquare</span> <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">"@react-icons/all-files/fa/FaFacebookSquare"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">FaLine</span> <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">"@react-icons/all-files/fa/FaLine"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">FaGetPocket</span> <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">"@react-icons/all-files/fa/FaGetPocket"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">SiHatenabookmark</span> <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">"@react-icons/all-files/si/SiHatenabookmark"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">SiFeedly</span> <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">"@react-icons/all-files/si/SiFeedly"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> websiteUrl <span class="token operator">=</span> <span class="token string">"https://techblog-pink.vercel.app/"</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Social</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> title<span class="token punctuation">,</span> id<span class="token punctuation">,</span> topics <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> title<span class="token operator">:</span>string<span class="token punctuation">;</span> id<span class="token operator">:</span> string<span class="token punctuation">;</span> topics<span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>flex max-w-sm flex-wrap justify-between mt-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>button</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>w-12 h-12 md:w-14 md:h-14 mr-1 mb-1 p-3 bg-gray-light rounded-2xl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>a</span> <span class="token attr-name">href</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://twitter.com/share?text=後で読む：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#x26;hashtags=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>topics<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#x26;url=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>websiteUrl<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">posts/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#x26;related=Unemployed_jp</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span></span>
        <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>_blank<span class="token punctuation">'</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>noopener noreferrer<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">FaTwitter</span></span> <span class="token punctuation">/></span></span><span class="token plain-text"></span>
<span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>a</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>button</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>w-12 h-12 md:w-14 md:h-14 mr-1 mb-3 p-3 bg-gray-light rounded-2xl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>a</span> <span class="token attr-name">href</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">http://www.facebook.com/share.php?u=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>websiteUrl<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">posts/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span></span> <span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">FaFacebookSquare</span></span> <span class="token punctuation">/></span></span><span class="token plain-text"></span>
<span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>a</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>button</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>w-12 h-12 md:w-14 md:h-14 mr-1 mb-3 p-3 bg-gray-light rounded-2xl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>a</span> <span class="token attr-name">href</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://b.hatena.ne.jp/entry/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>websiteUrl<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">posts/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span></span> <span class="token attr-name">data-hatena-bookmark-layout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>touch-counter<span class="token punctuation">'</span></span>
            <span class="token attr-name">title</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>title<span class="token punctuation">}</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>_blank<span class="token punctuation">'</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>noopener noreferrer<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">              </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">SiHatenabookmark</span></span> <span class="token punctuation">/></span></span><span class="token plain-text"></span>
<span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>a</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>button</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>w-12 h-12 md:w-14 md:h-14 mr-1 mb-3 p-3 bg-gray-light rounded-2xl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>a</span> <span class="token attr-name">href</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://social-plugins.line.me/lineit/share?url=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>websiteUrl<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">posts/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>_blank<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">FaLine</span></span> <span class="token punctuation">/></span></span><span class="token plain-text"></span>
<span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>a</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>button</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>w-12 h-12 md:w-14 md:h-14 mr-1 mb-3 p-3 bg-gray-light rounded-2xl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>a</span> <span class="token attr-name">href</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">http://getpocket.com/edit?url=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>websiteUrl<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">posts/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>_blank<span class="token punctuation">'</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nofollow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">FaGetPocket</span></span> <span class="token punctuation">/></span></span><span class="token plain-text"></span>
<span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>a</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>button</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>w-12 h-12 md:w-14 md:h-14 mr-1 mb-3 p-3 bg-gray-light rounded-2xl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>a</span> <span class="token attr-name">href</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">http://cloud.feedly.com/#subscription/feed/フィードURLたぶんRSS</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>blank<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">SiFeedly</span></span> <span class="token punctuation">/></span></span><span class="token plain-text"></span>
<span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>a</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>
<h3>topics.tsx</h3>
<p>記事に設定したトピックを取得して表示する。</p>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Topics</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> topicList <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> topicList<span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">      </span><span class="token punctuation">{</span>topicList<span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token parameter">topic</span> <span class="token arrow operator">=></span> <span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>span</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mr-2.5<span class="token punctuation">"</span></span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>topic<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>topic<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>
<h2>Vercelで環境変数を取り扱うには</h2>
<p>Next.jsでは環境変数を設定するには <code>.env</code> ファイルを使用する。</p>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token constant">GITHUB_TOKEN</span><span class="token operator">=</span>xxx
<span class="token constant">NEXT_PUBLIC_GOOGLE_ANALYTICS_ID</span><span class="token operator">=</span>xxx
</code></pre></div>
<p>これを <code>.gitignore</code> に設定しておくのだがそうするとVercelにデプロイする際に読み込まれないので、あらかじめVercelに環境変数を設定しておく必要がある。デプロイした後にしか設定出来ないので設定して再びデプロイする必要がある。Project Settings > Enviroment Variables</p>
<p>NameとValueにそれぞれ値を設定する。例 NameにGitHub_Token, Value=xxx</p>
<p><img src="https://storage.googleapis.com/zenn-user-upload/nqxxyyh5rnu0c67p5kywzsw34pzh" alt="https://storage.googleapis.com/zenn-user-upload/nqxxyyh5rnu0c67p5kywzsw34pzh"></p>
<h2>TailwindをNext.jsで使用する。</h2>
<p>公式の沿ってインストールしていく。</p>
<h3>インストール方法</h3>
<p>Next.jsのバージョンでインストール方法が変わるのでバージョンを確認する。</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash"><span class="token function">npm</span> info next version

<span class="token comment"># 自分の環境</span>
<span class="token number">10.1</span>.2
</code></pre></div>
<p>Next.jsのバージョンは10以上なのでこちらのコマンドを実行する。</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -D tailwindcss@latest postcss@latest autoprefixer@latest
</code></pre></div>
<p>次に <code>tailwind.config.js</code> と <code>postcss.config.js</code> を下記のコマンドを実行してNext.jsのルートフォルダに作成する。</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">npx tailwindcss init -p
</code></pre></div>
<p>※tailwindはpostcssから作られているので、これらの設定も必要とする。Next.jsで使用する場合はデフォルトで使用出来るので追加の編集はいらない。</p>
<p>postcssとは</p>
<p><a href="https://morishitter.hatenablog.com/entry/2015/08/03/164424">PostCSSとは何か - morishitter blog</a></p>
<p>プロジェクトのルートに <code>tailwind.config.js</code> ファイルが生成される。</p>
<p>次に <code>tailwind.config.js</code> を編集する。</p>
<p><strong>tailwind.config.js</strong></p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token comment">// tailwind.config.js</span>
module<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token comment">/*</span>
<span class="token comment">		purgeにNext.jsで使用される予定だったcss moduleファイル</span>
<span class="token comment">		を取り除くコードを追加する。</span>
<span class="token comment">		purge: [],ここを下記のように変更</span>
<span class="token comment">	*/</span>
	purge<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'./pages/**/*.{js,ts,jsx,tsx}'</span><span class="token punctuation">,</span> <span class="token string">'./components/**/*.{js,ts,jsx,tsx}'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// purge: [],</span>
  darkMode<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// or 'media' or 'class'</span>
  theme<span class="token operator">:</span> <span class="token punctuation">{</span>
    extend<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  variants<span class="token operator">:</span> <span class="token punctuation">{</span>
    extend<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>こちらのファイルも作成される。</p>
<p><strong>postcss.config.js</strong></p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token comment">// postcss.config.js</span>
module<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">{</span>
    tailwindcss<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    autoprefixer<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre></div>
<h3>使用方法</h3>
<p>公式によると2つの方法があるらしい。</p>
<p>1：JSファイルにimportして使う。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token comment">// pages/_app.js</span>
<span class="token comment">// import '../styles/globals.css'</span>
<span class="token keyword module">import</span> <span class="token string">'tailwindcss/tailwind.css'</span>

<span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">MyApp</span></span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> <span class="token maybe-class-name">Component</span><span class="token punctuation">,</span> pageProps <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">Component</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token spread operator">...</span>pageProps<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>
<span class="token punctuation">}</span>
<span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token maybe-class-name">MyApp</span>
</code></pre></div>
<p>この場合はNext.jsで通常使用されるcss module、 <code>global.css</code> と <code>Home.module.css</code> 等を削除する事が出来る。</p>
<p>2： CSSにTailwindを含める。おそらく普通にcss moduleを使用してそこにTailwindを書き込む方法だと思う。</p>
<p><code>./styles/globals.css</code> を開いてそこに <code>@tailwind</code> を書いていく。</p>
<p>個人的にはこちらの方が汎用性があるのでこちらを採用する。</p>
<div class="remark-highlight"><pre class="language-css"><code class="language-css"><span class="token comment">/* ./styles/globals.css */</span>
<span class="token atrule"><span class="token rule">@tailwind</span> base<span class="token punctuation">;</span></span>
<span class="token atrule"><span class="token rule">@tailwind</span> components<span class="token punctuation">;</span></span>
<span class="token atrule"><span class="token rule">@tailwind</span> utilities<span class="token punctuation">;</span></span>

<span class="token comment">/*この続きに普通にcssを追加できる。*/</span>
<span class="token selector">h1</span> <span class="token punctuation">{</span>
	<span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token unit">rem</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*@applyを使えばtailwindの構文も使える。*/</span>

<span class="token selector">h2</span> <span class="token punctuation">{</span>
  <span class="token atrule"><span class="token rule">@apply</span> font-bold text-xl pt-4 pb-4<span class="token punctuation">;</span></span>
<span class="token punctuation">}</span>

<span class="token comment">/* 独自のタグも作成出来る。 */</span>
<span class="token selector"><span class="token class">.btn-blue</span></span> <span class="token punctuation">{</span>
  <span class="token atrule"><span class="token rule">@apply</span> bg-<span class="token color">blue</span><span class="token number">-500</span> text-<span class="token color">white</span> font-bold py-2 px-4 rounded<span class="token punctuation">;</span></span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>このファイルを <code>_app.js</code> で <code>import</code> する。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword module">import</span> <span class="token string">'../styles/globals.css'</span>

<span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">MyApp</span></span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> <span class="token maybe-class-name">Component</span><span class="token punctuation">,</span> pageProps <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">Component</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token spread operator">...</span>pageProps<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>
<span class="token punctuation">}</span>

<span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token maybe-class-name">MyApp</span>
</code></pre></div>
<p>公式のサンプル</p>
<p><a href="https://github.com/vercel/next.js/tree/canary/examples/with-tailwindcss">vercel/next.js</a></p>
<h3>独自のカラーテーマを使用するには</h3>
<p><code>tailwind.config.js</code> の <code>theme</code> に下記のように追加する。使用する際は <code>bg-blue-light</code> のように使用する。</p>
<p>※これを設定するとデフォルトの <code>bg-blue-100</code> みたいなのが使えなくなる。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx">module<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  purge<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'./pages/**/*.{js,ts,jsx,tsx}'</span><span class="token punctuation">,</span> <span class="token string">'./components/**/*.{js,ts,jsx,tsx}'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  darkMode<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// or 'media' or 'class'</span>
  theme<span class="token operator">:</span> <span class="token punctuation">{</span>
    colors<span class="token operator">:</span> <span class="token punctuation">{</span>
      blue<span class="token operator">:</span> <span class="token punctuation">{</span>
        light<span class="token operator">:</span> <span class="token string">'#b9d7ea'</span><span class="token punctuation">,</span>
        <span class="token constant">DEFAULT</span><span class="token operator">:</span> <span class="token string">'#769fcd'</span><span class="token punctuation">,</span>
        dark<span class="token operator">:</span> <span class="token string">'#112d4e'</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      earth<span class="token operator">:</span> <span class="token punctuation">{</span>
        light<span class="token operator">:</span> <span class="token string">'#f9f7f7'</span><span class="token punctuation">,</span>
        <span class="token constant">DEFAULT</span><span class="token operator">:</span> <span class="token string">'#BDBDBD'</span><span class="token punctuation">,</span>
        dark<span class="token operator">:</span> <span class="token string">'#757575'</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      gray<span class="token operator">:</span> <span class="token punctuation">{</span>
        dark<span class="token operator">:</span> <span class="token string">'#212121'</span><span class="token punctuation">,</span>
        <span class="token constant">DEFAULT</span><span class="token operator">:</span> <span class="token string">'#d6e6f2'</span><span class="token punctuation">,</span>
        light<span class="token operator">:</span> <span class="token string">'#f7fbfc'</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  variants<span class="token operator">:</span> <span class="token punctuation">{</span>
    extend<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre></div>
<h2>Favicon、画像等のファイルを置く場所</h2>
<h3>Aseets （webで使用する素材の総称を指すと思われる）</h3>
<p>Next.jsでは static assets（画像、アイコン、静的なhtmlファイル）などを <code>public</code> ディレクトリ配下に配置する。</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">--project
  --public
    -- hoge.jpg
    -- huga.svg
		-- favicon.ico
</code></pre></div>
<p>画像の表示は <code>&#x3C;img></code> タグを拡張した、 <code>&#x3C;Image></code> コンポーネントを使用する。</p>
<p>このコンポーネントを使用すれば、画像の最適化をNext.jsが自動的に行う。</p>
<p>最適化はCMSなどの他サーバで管理している画像に関しても最適化を行う。</p>
<p>【最適化の例】</p>
<ul>
<li>画像のリサイズを行う。</li>
<li>jpgファイルをwebPなどの軽量なフォーマットに変換する。</li>
</ul>
<p>画像の最適化はビルド時に一括で行うのではなく、ユーザがRequestするたびに適宜行っていく。</p>
<p>画像が大量にあったとしてもBuild時間が大幅にかからない。</p>
<p>読み込みもviewportスクロールされた時に初めて画像が読み込まれる。</p>
<p><code>width</code> と <code>height</code> を指定しておくと、そのサイズまであらかじめ画像を圧縮する。</p>
<p>また、レスポンス表示で幅が小さくなった場合も自動でそのサイズにトリミングした画像を生成する。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token comment">//node_modulesのnextというフォルダにimage.jsがある。</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token maybe-class-name">Image</span></span> <span class="token keyword module">from</span> <span class="token string">'next/image'</span>

<span class="token keyword">const</span> <span class="token function-variable function"><span class="token maybe-class-name">YourComponent</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">(</span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">Image</span></span>
		<span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/images/profile.jpg<span class="token punctuation">"</span></span>
		<span class="token attr-name">height</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">144</span><span class="token punctuation">}</span></span>
		<span class="token attr-name">width</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">144</span><span class="token punctuation">}</span></span>
		<span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Your Name<span class="token punctuation">"</span></span>
	<span class="token punctuation">/></span></span>
<span class="token punctuation">)</span>
</code></pre></div>
<h3>メタデータ</h3>
<p>Next.jsでは <code>&#x3C;head></code> タグではなく <code>&#x3C;Head></code> コンポーネントを使用する。</p>
<p>これにより、ページごとに動的にMetadataを変更する事が可能。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword module">import</span> <span class="token imports"><span class="token maybe-class-name">Head</span></span> <span class="token keyword module">from</span> <span class="token string">'next/head'</span>

<span class="token comment">// メタタグ内に&#x3C;div>要素が追加されるのは記法としておかしいため</span>
<span class="token comment">// フラグメントが挟んである。</span>
<span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">FirstPost</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span></span><span class="token punctuation">></span></span><span class="token plain-text"> </span>
<span class="token plain-text">			</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">Head</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">				</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>title</span><span class="token punctuation">></span></span><span class="token plain-text">First Post</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>title</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">				</span><span class="token punctuation">{</span><span class="token comment">/*こんな感じにfaviconは配置する*/</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="token plain-text">				</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/favicon.ico<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text"></span>
<span class="token plain-text">			</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span><span class="token class-name">Head</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">			</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">First Post</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">			</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>h2</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">				</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">Link</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">					</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>a</span><span class="token punctuation">></span></span><span class="token plain-text">Back to home</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>a</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">				</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span><span class="token class-name">Link</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">			</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>h2</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">		</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span></span><span class="token punctuation">></span></span>
	<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>※ <code>&#x3C;></code> 空のタグに見えるものはReactのフラグメントを省略記号で記法したものである。 <code>&#x3C;React.Fragment></code> と同じ意味になる。レンダーで子要素を返す際に要素が <code>div</code> タグで挟まれるの回避するためにある。</p>
<div class="remark-highlight"><pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>table</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>tr</span><span class="token punctuation">></span></span>
		<span class="token comment">&#x3C;!--</span>
<span class="token comment">			tdをrender()で返す場合に&#x3C;>を記法しないと</span>
<span class="token comment">			divに挟まれる。</span>
<span class="token comment">		--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span><span class="token punctuation">></span></span> 
      <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>td</span><span class="token punctuation">></span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>td</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>td</span><span class="token punctuation">></span></span>World<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>td</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>tr</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>table</span><span class="token punctuation">></span></span>
</code></pre></div>
<p>詳しくは</p>
<p><a href="https://ja.reactjs.org/docs/fragments.html">フラグメント - React</a></p>
<h2>google analyticsを導入する。</h2>
<p>UAコードの取得は<a href="https://t.co/kxYDlLaFGi?amp=1">この記事</a>を参考にすると取れる。今GAが主流みたいでどこにあるんだ〜って結構作成するのに時間かかった。</p>
<p>導入するには <code>_app.tsx, _document.tsx</code> と <code>lb/gtag.ts, src/hooks/usePageView.ts</code> が必要になる。</p>
<h3>TypeScriptに対応させる。（型を導入する。）</h3>
<p>これはインストールするだけで特に <code>import</code> する必要はない。最初 <code>import</code> 必要だと思ってあちこち記事を探したけど何もしなくてよかった。</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save @types/google.analytics
</code></pre></div>
<h3>_app.tsx</h3>
<p>ここで <code>usePagaView()</code> を実行する。</p>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token string">'../styles/globals.css'</span>
<span class="token keyword">import</span> <span class="token string">"../styles/prism-daigakusei.css"</span>
<span class="token keyword">import</span> <span class="token string">"katex/dist/katex.min.css"</span>
<span class="token keyword">import</span> <span class="token imports">usePageView</span> <span class="token keyword">from</span> <span class="token string">'../src/hooks/usePageView'</span>
<span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">AppProps</span> <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">'next/app'</span>

<span class="token keyword">function</span> <span class="token function">MyApp</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> <span class="token maybe-class-name">Component</span><span class="token punctuation">,</span> pageProps <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token maybe-class-name">AppProps</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">usePageView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">Component</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token spread operator">...</span>pageProps<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token maybe-class-name">MyApp</span>
</code></pre></div>
<h2>usePageView.ts</h2>
<p>これが何してるかと言うと、next.jsではページが切り替わる際、JavaScript（有効なら）で切り替えているのでURLもJavaScriptを使って変更している。そのため通信が発生していない。なので <code>gtag.ts</code> でユーザの行動が追跡出来ない。それを解消するためにURLの変更が行われたら <code>gtag.ts</code> が実行されるように関数をラップしている。</p>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> useEffect <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">import</span> <span class="token imports"><span class="token maybe-class-name">Router</span></span> <span class="token keyword">from</span> <span class="token string">'next/router'</span>

<span class="token keyword">import</span> <span class="token imports"><span class="token operator">*</span> <span class="token keyword module">as</span> gtag</span> <span class="token keyword">from</span> <span class="token string">'../../lib/gtag'</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">usePageView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//関数型コンポーネントのライフサイクル</span>
  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>gtag<span class="token punctuation">.</span><span class="token property-access">existsGaId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> <span class="token function-variable function">handleRouteChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">path<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
      gtag<span class="token punctuation">.</span><span class="token method function property-access">pageview</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//componentDidMountの役割URLが変更されるたびにhandleRouteChangeが実行される。</span>
    <span class="token maybe-class-name">Router</span><span class="token punctuation">.</span><span class="token property-access">events</span><span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span><span class="token string">'routeChangeComplete'</span><span class="token punctuation">,</span> handleRouteChange<span class="token punctuation">)</span>
    
    <span class="token comment">//componentWillUnmontの役割</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
      <span class="token maybe-class-name">Router</span><span class="token punctuation">.</span><span class="token property-access">events</span><span class="token punctuation">.</span><span class="token method function property-access">off</span><span class="token punctuation">(</span><span class="token string">'routeChangeComplete'</span><span class="token punctuation">,</span> handleRouteChange<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token maybe-class-name">Router</span><span class="token punctuation">.</span><span class="token property-access">events</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div>
<h3>gtag.ts</h3>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">Event</span> <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">'../types/GoogleAnalyticsEvent'</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">GA_ID</span> <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token property-access">env</span><span class="token punctuation">.</span><span class="token constant">NEXT_PUBLIC_GOOGLE_ANALYTICS_ID</span>

<span class="token comment">// IDが取得できない場合を想定する</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> existsGaId <span class="token operator">=</span> <span class="token constant">GA_ID</span> <span class="token operator">!==</span> <span class="token string">''</span>

<span class="token comment">// PVを測定する</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">pageview</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">path<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
  <span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token method function property-access">gtag</span><span class="token punctuation">(</span><span class="token string">'config'</span><span class="token punctuation">,</span> <span class="token constant">GA_ID</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    page_path<span class="token operator">:</span> path<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// GAイベントを発火させる</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">event</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>action<span class="token punctuation">,</span> category<span class="token punctuation">,</span> label<span class="token punctuation">}</span><span class="token operator">:</span> <span class="token maybe-class-name">Event</span></span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>existsGaId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>

  <span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token method function property-access">gtag</span><span class="token punctuation">(</span><span class="token string">'event'</span><span class="token punctuation">,</span> action<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    event_category<span class="token operator">:</span> category<span class="token punctuation">,</span>
    <span class="token comment">//JavaScriptのオブジェクトをJSONの文字列に変換している。</span>
    event_label<span class="token operator">:</span> <span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div>
<h2>最後に</h2>
<p>Reactのチュートリアルから初めてとても長い道のりでしたが、自分のブログ + 新しいデザイン・アニメーション・JavaScriptを試したり出来る実験場を持つ事が出来て嬉しいです。
Next.jsは最初は訳が分からなくて「このフレームワークは比較的軽いよ」と言ってた人に嘘だろと思っていたのですが少し慣れてくるとそんな気もするようになりました。
GitHubのAPIは不安定な日があったりするのでビルドをする時間帯は気にした方が良いかもしれないです。
そこだけが少しデメリットかもしれないです。
リポジトリを新しく作成すればZennとは別で記事を書いたりも出来ます。
そして、ここまで記事を読んで下さりありがとうございました。
参考にした記事を書いて下さった方、スタックオーバーフロー・Discordで質問に回答して下さった方々にとても感謝しています。おかげでここまで作りきることが出来ました。</p>
<h2>今後欲しい機能</h2>
<p>🔨：ダークモード</p>
<p>🔨：ページネーション</p>
<p>🔨：記事ページでのレコメンド（タグ名から）</p>
<p>🔨：RSS対応</p>
<p>🔨：zenn-contentリポジトリが更新されたらVercelで再ビルドが走るようにしたい。</p>
<h3>参照</h3>
<p><a href="https://qiita.com/matamatanot/items/1735984f40540b8bdf91">Next.js 9.3新API getStaticProps と getStaticPaths と getServerSideProps の概要解説 - Qiita</a></p>
<p><a href="https://tech.playground.style/javascript/fetch-api-data/">Next.jsのgetStaticPropsで外部APIからデータを取得する方法｜Playground発！アプリ開発会社の技術ブログ</a></p>
<p><a href="https://the2g.com/post/nextjs-9-3">Next.js 9.3の変更点</a></p>
<p><a href="https://qiita.com/thesugar/items/01896c1faa8241e6b1bc">大幅にリニューアルされた Next.js のチュートリアルをどこよりも早く全編和訳しました - Qiita</a></p>
<p><a href="https://tailwindcss.com/docs/guides/nextjs">Install Tailwind CSS with Next.js - Tailwind CSS</a></p>
<p><a href="https://zenn.dev/k_logic24/articles/next-with-tailwind">Next.js with Tailwind CSS 環境構築</a></p>
<p><a href="https://tailwindcss.com/docs/customizing-colors">Customizing Colors - Tailwind CSS</a></p>
<p><a href="https://zenn.dev/akakuro/articles/d39e939e72c321">Next.jsにTailwind CSS 2.0を導入する</a></p>
<p><a href="https://reffect.co.jp/react/next-js">初めてでもわかるNext.jsの基礎(React) | アールエフェクト</a></p>
<p><a href="https://nextjs-ja-translation-docs.vercel.app/docs/basic-features/data-fetching#fetching-data-on-the-client-side">Basic Features: データ取得 | Next.js</a></p>
<p><a href="https://nextjs-ja-translation-docs.vercel.app/docs/routing/introduction">Routing: はじめに | Next.js</a></p>
<p><a href="https://qiita.com/matamatanot/items/1735984f40540b8bdf91">Next.js 9.3新API getStaticProps と getStaticPaths と getServerSideProps の概要解説 - Qiita</a></p>
<p><a href="https://zenn.dev/yuki_yuki/scraps/5b28f6a278db3c">【Next.js】チュートリアルの実施+周辺知識のキャッチアップ</a></p>
<p><a href="https://gotohayato.com/content/517/">Next.js を使った JAMstack なブログの始め方</a></p>
<p><a href="https://panda-program.com/posts/nextjs-google-analytics#typescript%E5%AF%BE%E5%BF%9C%E3%82%92%E3%81%99%E3%82%8B">Next.jsでGoogle Analyticsを使えるようにする</a></p>
<p><a href="https://tailwindcss.jp/docs/responsive-design"></a></p>
<p><a href="https://nerdcave.com/tailwind-cheat-sheet">Tailwind CSS Cheat Sheet</a></p>
<h3>一応読んだcreate-react-appではなく、Next.jsを使う理由</h3>
<p><a href="https://mottox2.com/posts/429">なぜNext.jsを採用するのか？ - mottox2 blog</a></p>
<h3>サイトの配色決めで利用した。</h3>
<p><a href="https://www.palettelist.com/c29867/bccdde">Palette List - Color Palette Generator - 10,000+ Palettes</a></p>
<p>記事に関するコメント等は</p>
<p>🕊：<a href="https://twitter.com/Unemployed_jp">Twitter</a>
📺：<a href="https://www.youtube.com/channel/UCT3wLdiZS3Gos87f9fu4EOQ/featured?view_as=subscriber">Youtube</a>
📸：<a href="https://www.instagram.com/unemployed_jp/">Instagram</a>
👨🏻‍💻：<a href="https://github.com/wimpykid719?tab=repositories">Github</a>
😥：<a href="https://ja.stackoverflow.com/users/edit/22565">Stackoverflow</a></p>
<p>でも受け付けています。どこかにはいます。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[めちゃくちゃ簡素なJavaScriptのイテレータとジェネレータ説明]]></title>
        <id>https://techblog-pink.vercel.app/posts/javascript-iterator-generator</id>
        <link href="https://techblog-pink.vercel.app/posts/javascript-iterator-generator"/>
        <updated>2021-04-19T15:00:00.000Z</updated>
        <summary type="html"><![CDATA[for...of 等で値を一つ一つ取り出せるオブジェクトを指す（反復可能なオブジェクト：配列、文字列等を指す）。イテレータの意味は2つあって「反復可能なオブジェクト」、「イテレータオブジェクト」通常は後者をイテレータと指す。...]]></summary>
        <content type="html"><![CDATA[<h2>イテレータ</h2>
<p><code>for...of</code> 等で値を一つ一つ取り出せるオブジェクトを指す（反復可能なオブジェクト：配列、文字列等を指す）。イテレータの意味は2つあって「反復可能なオブジェクト」、「イテレータオブジェクト」通常は後者をイテレータと指す。</p>
<h3>イテレータオブジェクト</h3>
<p>nextメソッドを持っており、このメソッドを呼び出す事で次々と要素を取り出せるオブジェクトの事を指す。</p>
<p><code>next()</code> を呼び出すと返り値として 配列の値 <code>value</code> と <code>done</code> を返す。</p>
<p><code>done</code> の <code>true, false</code> を見て配列にまだ値があるかを確認する事が出来る。</p>
<h3>反復可能なオブジェクト</h3>
<p><code>[Symbol.iterator]</code> メソッドを実装する事でイテレータオブジェクトを返す。上記の事を実装する事で反復可能なオブジェクトを作る事が出来る。</p>
<h2>配列をイテレータオブジェクトに変換する。</h2>
<p><code>配列.values()</code> とする事で配列をイテレータオブジェクトに変換出来る。しかし2016年12月時点ではchrome等には実装されていない。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> book <span class="token operator">=</span><span class="token punctuation">[</span>
	<span class="token string">"hi"</span><span class="token punctuation">,</span>
	<span class="token string">"jiro"</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

cosnt it <span class="token operator">=</span> book<span class="token punctuation">.</span><span class="token method function property-access">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token method function property-access">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token method function property-access">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token method function property-access">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//実行結果</span>
<span class="token known-class-name class-name">Object</span> <span class="token punctuation">{</span> value<span class="token operator">:</span><span class="token string">"hi"</span><span class="token punctuation">,</span> done<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>
<span class="token known-class-name class-name">Object</span> <span class="token punctuation">{</span> value<span class="token operator">:</span><span class="token string">"jiro"</span><span class="token punctuation">,</span> done<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>
<span class="token known-class-name class-name">Object</span> <span class="token punctuation">{</span> value<span class="token operator">:</span><span class="token keyword nil">undefined</span><span class="token punctuation">,</span> done<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>

<span class="token comment">//while文での実行</span>
<span class="token keyword">const</span> book1 <span class="token operator">=</span><span class="token punctuation">[</span>
	<span class="token string">"hi"</span><span class="token punctuation">,</span>
	<span class="token string">"taro"</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
cosnt it1 <span class="token operator">=</span> book1<span class="token punctuation">.</span><span class="token method function property-access">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> current <span class="token operator">=</span> it1<span class="token punctuation">.</span><span class="token method function property-access">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword control-flow">while</span><span class="token punctuation">(</span><span class="token operator">!</span>current<span class="token punctuation">.</span><span class="token property-access">done</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	current <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token method function property-access">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token known-class-name class-name">Object</span> <span class="token punctuation">{</span> value<span class="token operator">:</span><span class="token string">"hi"</span><span class="token punctuation">,</span> done<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>
<span class="token known-class-name class-name">Object</span> <span class="token punctuation">{</span> value<span class="token operator">:</span><span class="token string">"taro"</span><span class="token punctuation">,</span> done<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>

</code></pre></div>
<h2>イテレータプロトコル</h2>
<p>反復可能である配列はメソッドvaluesを使う事でイテレータに変換出来るが <code>values()</code> が何を行なっているのかイテレータであるために必要な「イテレータプロトコル」を実装してこれがどのようなものか見ていく。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Log</span> <span class="token punctuation">{</span>
	<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">messages</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">messages</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> now <span class="token operator">=</span> <span class="token maybe-class-name">Data</span><span class="token punctuation">.</span><span class="token method function property-access">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">ログ追加: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>now<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">messages</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token punctuation">,</span> timestamp<span class="token operator">:</span> now <span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token punctuation">[</span><span class="token known-class-name class-name">Symbol</span><span class="token punctuation">.</span><span class="token property-access">iterator</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">//イテレータオブジェクトに変換して返す。</span>
		<span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">messages</span><span class="token punctuation">[</span><span class="token known-class-name class-name">Symbol</span><span class="token punctuation">.</span><span class="token property-access">iterator</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> log <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
log<span class="token punctuation">.</span><span class="token method function property-access">add</span><span class="token punctuation">(</span><span class="token string">"海の監視初日。勤務開始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token method function property-access">add</span><span class="token punctuation">(</span><span class="token string">"クジラを見た"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token method function property-access">add</span><span class="token punctuation">(</span><span class="token string">"船を見た"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token method function property-access">add</span><span class="token punctuation">(</span><span class="token string">"監視終了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	cosole<span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">本日の業務報告 (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword control-flow">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> entry <span class="token keyword">of</span> log<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> data <span class="token keyword">new</span> <span class="token class-name">Data</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token property-access">timestamp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>entry<span class="token punctuation">.</span><span class="token property-access">message</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>date<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<h2>ジェネレータ</h2>
<p>ジェネレータは普通の関数と違い呼び出された際はすぐに実行されず、まずはイテレータが戻される。そのあとイテレータのメソッドnextを呼び出すたびに実行が進む。</p>
<p>定義するには <code>function* 関数名</code> となる。それ以外は普通の関数と同じ構文が使用出来る。ただしアロー関数は使用できない。そして呼び出し側に値を供給する場合はキーワードyieldが使われる。 <code>return</code> も使われるが、ジェネレータ関数内では通常は値を返すために使用されない。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">colors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword control-flow">yield</span> <span class="token string">'あか'</span><span class="token punctuation">;</span>
	<span class="token keyword control-flow">yield</span> <span class="token string">'あお'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//呼び出し側</span>
<span class="token keyword">const</span> it <span class="token operator">=</span> <span class="token function">colors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token method function property-access">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// { value: 'あか', done: false }</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token method function property-access">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// { value: 'あお', done: false }</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token method function property-access">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// { value: undefined, done: true }</span>

</code></pre></div>
<h3>yield式と双方向コミュニケーション</h3>
<p>ジェネレータを使うと呼び出し側との間で双方向のコミュニケーションが可能になる。yieldは式なので、評価の結果何らかの値になる。どんな値になるかと言うと、next呼び出し時の引数になる。</p>
<p>上記のコードなら <code>yield = next()の引数が入る</code>  それを踏まえて下記のコードを見て欲しい。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">itterrogate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token keyword control-flow">yield</span> <span class="token string">"お名前は?"</span><span class="token punctuation">;</span><span class="token comment">//最初のnextではyield手前で止まる。次のnextの時にyieldに引数を返してnameに代入される。</span>
	<span class="token keyword">const</span> color <span class="token operator">=</span> <span class="token keyword control-flow">yield</span> <span class="token string">"お好きな色は何ですか?"</span><span class="token punctuation">;</span><span class="token comment">//2回目のnextはyield手前まで止まる。3回目のnextでcolorに引数が代入される。</span>
	<span class="token keyword control-flow">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">さんの好きな色は</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>color<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">だそうです。</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> it <span class="token function">itterrogate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token method function property-access">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//{ value: 'お名前は?', done: false } ここでは引数を渡しても無視される。</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token method function property-access">next</span><span class="token punctuation">(</span>めぐみ<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//{ value: 'お好きな色な何ですか', done: false }</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token method function property-access">next</span><span class="token punctuation">(</span>あお<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//{ value: 'めぐみさんの好きな色はあおだそうです。', done: true }</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token method function property-access">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//{ value: undefined, done: true }</span>
</code></pre></div>
<p>ジェネレータのどこかで <code>return</code> を呼び出すとdoneがtrueになり、valueプロパティはreturnに指定した値になる。これには注意が必要で <code>for...of</code> 構文で回す場合、trueになった際にループを抜けるのでvalueが出力されなくなる。なので <code>return</code> で意味のある値を渡すことはなるべく避けた方が良いと思われる。</p>
<h3>参照</h3>
<p>1)Ethan Brown. Learning JavaScript, 3rd Edition. O'Reilly. イーサン ブラウン ムシャ ヒロユキ ムシャ ルミ (訳) 2017. 「12章 イテレータとジェネレータ」.『初めてのJavascript』. 第3版. オライリージャパン. pp 197-209.</p>
<p><a href="https://qiita.com/kura07/items/cf168a7ea20e8c2554c6">JavaScript の イテレータ を極める！ - Qiita</a></p>
<p>記事に関するコメント等は</p>
<p>🕊：<a href="https://twitter.com/Unemployed_jp">Twitter</a>
📺：<a href="https://www.youtube.com/channel/UCT3wLdiZS3Gos87f9fu4EOQ/featured?view_as=subscriber">Youtube</a>
📸：<a href="https://www.instagram.com/unemployed_jp/">Instagram</a>
👨🏻‍💻：<a href="https://github.com/wimpykid719?tab=repositories">Github</a>
😥：<a href="https://ja.stackoverflow.com/users/edit/22565">Stackoverflow</a></p>
<p>でも受け付けています。どこかにはいます。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[tsconfig.json オプション入門]]></title>
        <id>https://techblog-pink.vercel.app/posts/typescript-compiler-options</id>
        <link href="https://techblog-pink.vercel.app/posts/typescript-compiler-options"/>
        <updated>2021-04-08T15:00:00.000Z</updated>
        <summary type="html"><![CDATA[bash../node_modules/.bin/tsc initこれでルートディレクトリに作成される。tsファイルの変更を監視して即座にjsファイルに変換してくれる。...]]></summary>
        <content type="html"><![CDATA[<h2>tsconfig.jsonファイルを作成する。</h2>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash"><span class="token punctuation">..</span>/node_modules/.bin/tsc --init
</code></pre></div>
<p>これでルートディレクトリに作成される。</p>
<h2>Watchモード</h2>
<p>tsファイルの変更を監視して即座にjsファイルに変換してくれる。 なので毎回 <code>tsc</code> コマンドを入力する必要がなくなる。</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">tsc index.ts -w　または --watch
</code></pre></div>
<p>終了は <code>ctr + c</code></p>
<h2>tsファイルをまとめてコンパイル</h2>
<p>tsconfig.jsonを作成する。</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">tsc --init
</code></pre></div>
<p>これをすると <code>tsc</code> とコマンド入力するだけで、まとめてコンパイルできる。</p>
<p>そのまま、watchモードも使用できる。</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">tsc -w
</code></pre></div>
<h2>tsconfig.json</h2>
<p>オプションや設定をみていく。</p>
<h2>exclude</h2>
<p>特定のtsファイルを除く。こうすると <code>compiler.ts</code> ファイルはコンパイラされない。</p>
<div class="remark-highlight"><pre class="language-json"><code class="language-json"><span class="token property">"exclude"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
	<span class="token string">"compiler.ts"</span>
<span class="token punctuation">]</span>
</code></pre></div>
<p>条件を絞る事もできる。 <code>ファイル名.spec.ts</code>  と付くファイルをコンパイルから外す。 <code>*</code> ワイルドカードが使用できる。</p>
<div class="remark-highlight"><pre class="language-json"><code class="language-json"><span class="token property">"exclude"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
	<span class="token string">"compiler.ts"</span>
	<span class="token string">"*.spec.ts"</span>
<span class="token punctuation">]</span>
</code></pre></div>
<p>特定のフォルダ下のコンパイルを除く。</p>
<div class="remark-highlight"><pre class="language-json"><code class="language-json"><span class="token property">"exclude"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
	<span class="token string">"**/*.ts"</span>
<span class="token punctuation">]</span>
</code></pre></div>
<p>よく使用されるのは <code>node_modules</code> を取り除く。（excludeを記述しなければデフォルトで取り除く設定になっている。）</p>
<div class="remark-highlight"><pre class="language-json"><code class="language-json"><span class="token property">"exclude"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
	<span class="token string">"node_modules"</span>
<span class="token punctuation">]</span>
</code></pre></div>
<h3>include</h3>
<p>逆の <code>include: []</code> もある。（記述しない場合はデフォルトでは全てになっている。）</p>
<p>これを設定すると <code>include</code> されてたい他のtsファイルは <code>exclude</code> に入ってなくてもコンパイルされないようになる。</p>
<div class="remark-highlight"><pre class="language-json"><code class="language-json"><span class="token property">"include"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
	<span class="token string">"index.ts"</span>
<span class="token punctuation">]</span>
</code></pre></div>
<p><code>include</code> よりも <code>exclude</code> の方が優先される。この場合 <code>index.ts</code> はコンパイルされない。</p>
<div class="remark-highlight"><pre class="language-json"><code class="language-json"><span class="token property">"include"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
	<span class="token string">"index.ts"</span>
<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token property">"exclude"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
	<span class="token string">"index.ts"</span>
<span class="token punctuation">]</span>

</code></pre></div>
<h3>files</h3>
<p><code>files</code> はファイルを絶対パスで指定する。ワイルドカードは使えない。 <code>include</code> みたいなもの。さらに <code>exclude</code> に入ってるファイルも指定するとコンパイルされるようになる。</p>
<p><code>files > exclude > include</code> みたいな関係になる。</p>
<div class="remark-highlight"><pre class="language-json"><code class="language-json"><span class="token property">"files"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
	<span class="token string">"tmp/compiler.ts"</span>
<span class="token punctuation">]</span>
</code></pre></div>
<h2>コンパイラオプション</h2>
<p><code>tsconfig.json</code> の <code>compileOptions</code> と書かれた各設定をみていく。</p>
<h3>target</h3>
<p>TypeScriptがコンパイルするJavaScriptのバージョンを指定する。デフォルトではES3になっている。</p>
<h3>lib</h3>
<p>TypeScriptが用意した型の定義を指定して、それを元にコンパイルする。JavaScriptで組み込まれている。 <code>.toUpperCase()</code> などの型を定義したファイルがあり、それをコンパイル時に読み込ませているため元々、使用出来る関数等の型定義しなくてもコンパイル時にエラーが出なくなる。</p>
<p><code>"lib": []</code> のように空で指定するとエラーになる。コメントアウトで何も指定しなくすると <code>target</code> の内容に合わせて自動で指定してくれる。</p>
<div class="remark-highlight"><pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>
	<span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"es6"</span><span class="token punctuation">,</span>
		<span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"commonjs"</span><span class="token punctuation">,</span>
		<span class="token property">"lib"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token comment">// コメントアウトでも内部で下記の型定義を読み込んでくれる。</span>
			<span class="token string">"ES6"</span><span class="token punctuation">,</span>
			<span class="token string">"DOM"</span><span class="token punctuation">,</span>
			<span class="token string">"DOM.Iterable"</span><span class="token punctuation">,</span>
			<span class="token string">"ScriptHost"</span>
		<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//targetがes6なので指定しても指定しなくても同じ意味になる。</span>
	<span class="token comment">//"lib": [</span>
	<span class="token comment">//		"ES6",</span>
	<span class="token comment">//		"DOM",</span>
	<span class="token comment">//		"DOM.Iterable",</span>
	<span class="token comment">//		"ScriptHost"</span>
	<span class="token comment">//	]</span>
	
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>
<h3>allowJs</h3>
<p>JavaScriptもコンパイルする対象とする。使い所はよく分からない。</p>
<h3>checkJs</h3>
<p>allowJsと一緒に使ってJSファイルのエラーもチェックしてくれる。</p>
<h3>JSX</h3>
<p>Reactで使用する。</p>
<h3>declaration・declarationMap</h3>
<p>型定義ファイルを作成する。 <code>.d.ts</code> これを作成する。コンパイルされたJSファイルのドキュメントのような形で使用する。</p>
<h3>sourceMap</h3>
<p>TypeScriptをChromeの検証に読み込ませる事ができる。 <code>ファイル名.js.map</code> が出来る。</p>
<h3>outDir</h3>
<div class="remark-highlight"><pre class="language-json"><code class="language-json"><span class="token property">"outDir"</span><span class="token operator">:</span> <span class="token string">"./dist"</span> <span class="token comment">//こうするとコンパイルしたJSファイルがdistフォルダに格納される。</span>
</code></pre></div>
<p>例えばtsファイルがsrc等のフォルダにあったとしても、distフォルダにはコンパイルされたJSファイルのみが入る。しかし <code>./src/tmp/index.ts</code> と <code>./hello.ts</code> のように別々の箇所にファイルがある場合は <code>./dist/src/tmp/index.js</code> と <code>./dist/src/hello.js</code> になる。システム側で効率の良い構成で保存してくれる。</p>
<h3>rootDir</h3>
<p>上記の場合にフォルダも一緒にして欲しい場合こちらを有効にする。ただし、tsファイル指定した階層よりも上にあるとエラーになる。</p>
<h3>removeComments</h3>
<p>tsファイル書かれたコメントをコンパイル時にJSファイルから取り除く。</p>
<h3>noEmit</h3>
<p>コンパイルはせずに型チェックのみを行う。ファイルを出力しない。</p>
<h3>importHelpers・downlevelIteration</h3>
<p><code>target</code> がES5とES3のみ使用出来る。for-of をコンパイルする際に出るエラーを防ぐ。</p>
<h3>noEmitOnError</h3>
<p>エラーが起きたらJSファイルにコンパイルしないようにする。</p>
<h3>strict</h3>
<p>これを <code>true</code> にすると下記のコメントアウトも自動で <code>true</code> になる。</p>
<div class="remark-highlight"><pre class="language-json"><code class="language-json"><span class="token property">"strict"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                                 <span class="token comment">/* Enable all strict type-checking options. */</span>
<span class="token comment">// "noImplicitAny": true,                       /* Raise error on expressions and declarations with an implied 'any' type. */</span>
<span class="token comment">// "strictNullChecks": true,                    /* Enable strict null checks. */</span>
<span class="token comment">// "strictFunctionTypes": true,                 /* Enable strict checking of function types. */</span>
<span class="token comment">// "strictBindCallApply": true,                 /* Enable strict 'bind', 'call', and 'apply' methods on functions. */</span>
<span class="token comment">// "strictPropertyInitialization": true,        /* Enable strict checking of property initialization in classes. */</span>
<span class="token comment">// "noImplicitThis": true,                      /* Raise error on 'this' expressions with an implied 'any' type. */</span>
<span class="token comment">// "alwaysStrict": true,</span>
</code></pre></div>
<h3>noImplicitAny</h3>
<p>暗黙的なanyを避ける。型を指定せずに型推論にanyになるとエラーになる。変数の場合は値が入れば型推論で型がわかるのでエラーにならない。</p>
<h3>strictNullChecks</h3>
<p>null・undefinedを別の型に入れようとするとエラーになる。</p>
<h3>strictFunctionTypes</h3>
<p>クラスの継承時のバグを減らす。</p>
<h3>strictBindCallApply</h3>
<p>bind、call、apply</p>
<p>持ってない機能を取り込んで使用する事が出来る。</p>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token comment">// ペンギンくん</span>
<span class="token keyword">const</span> <span class="token maybe-class-name">Penguin</span> <span class="token operator">:</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">'ペンギン'</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 鷹</span>
<span class="token keyword">const</span> <span class="token maybe-class-name">Falcon</span> <span class="token operator">:</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    <span class="token function-variable function">fly</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">'鷹'</span><span class="token punctuation">,</span>
    <span class="token function-variable function">fly</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">{</span>
        <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">+</span> <span class="token string">'が大空を飛びました'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token maybe-class-name">Falcon</span><span class="token punctuation">.</span><span class="token method function property-access">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// '鷹が大空を飛びました</span>

<span class="token comment">//第一引数にthisにしたい値を入れて使用する。</span>
<span class="token comment">// this.nameがPenguin.nameを参照するようになる。</span>
<span class="token maybe-class-name">Falcon</span><span class="token punctuation">.</span><span class="token method function property-access">fly</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span><span class="token maybe-class-name">Penguin</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//ペンギンが大空を飛びました。</span>
<span class="token keyword">const</span> flyPenguin <span class="token operator">=</span> <span class="token maybe-class-name">Falcon</span><span class="token punctuation">.</span><span class="token method function property-access">fly</span><span class="token punctuation">.</span><span class="token method function property-access">bind</span><span class="token punctuation">(</span><span class="token maybe-class-name">Penguin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">flyPenguin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//ペンギンが大空を飛びました。</span>

<span class="token comment">// 貰った引数を表示出来るように、flyメソッドを上書きする。</span>
<span class="token maybe-class-name">Falcon</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">fly</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">aComment</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">+</span> <span class="token string">'が'</span> <span class="token operator">+</span> aComment <span class="token operator">+</span> <span class="token string">'大空を飛びました'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// call</span>
<span class="token maybe-class-name">Falcon</span><span class="token punctuation">.</span><span class="token method function property-access">fly</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span><span class="token maybe-class-name">Penguin</span><span class="token punctuation">,</span> <span class="token string">'元気よく'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ペンギンが元気よく大空を飛びました</span>

<span class="token comment">// bind</span>
<span class="token keyword">var</span> flyPenguin <span class="token operator">=</span> <span class="token maybe-class-name">Falcon</span><span class="token punctuation">.</span><span class="token method function property-access">fly</span><span class="token punctuation">.</span><span class="token method function property-access">bind</span><span class="token punctuation">(</span><span class="token maybe-class-name">Penguin</span><span class="token punctuation">,</span> <span class="token string">'元気よく'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">flyPenguin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ペンギンが元気よく大空を飛びました</span>

<span class="token comment">//受け取れる。引数の数を増やすためさらにメソッドを上書きする。</span>
<span class="token maybe-class-name">Falcon</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">fly</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">comment1<span class="token punctuation">,</span> comment2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">+</span> <span class="token string">'が'</span> <span class="token operator">+</span> comment1 <span class="token operator">+</span> comment2 <span class="token operator">+</span> <span class="token string">'大空を飛びました'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//call</span>
<span class="token maybe-class-name">Falcon</span><span class="token punctuation">.</span><span class="token method function property-access">fly</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span><span class="token maybe-class-name">Penguin</span><span class="token punctuation">,</span> <span class="token string">'思い切って'</span><span class="token punctuation">,</span> <span class="token string">'元気よく'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ペンギンが思い切って元気よく大空を飛びました</span>

<span class="token comment">// applyの場合は配列で渡す。</span>
<span class="token maybe-class-name">Falcon</span><span class="token punctuation">.</span><span class="token method function property-access">fly</span><span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span><span class="token maybe-class-name">Penguin</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'思い切って'</span><span class="token punctuation">,</span> <span class="token string">'元気よく'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ペンギンが思い切って元気よく大空を飛びました</span>
</code></pre></div>
<p>bind, call, applyの引数を監視する。引数の数、型等に間違いがあればエラーを出す。</p>
<h3>strictPropertyInitialization</h3>
<p>クラスを使用する際に使う。</p>
<h3>noImplicitThis</h3>
<p>thisが暗黙的にanyを指したり、何を指定してるか分からない際にエラーを起こす。</p>
<h3>alwaysStrict</h3>
<p>JSファイルにコンパイルした時に <code>"use strict"</code> を使用する。</p>
<h3>Additional Checks</h3>
<p>主にこの4つでコードの品質を保つ。</p>
<div class="remark-highlight"><pre class="language-json"><code class="language-json"><span class="token comment">// "noUnusedLocals": true,                      /* Report errors on unused locals. */</span>
<span class="token comment">// "noUnusedParameters": true,                  /* Report errors on unused parameters. */</span>
<span class="token comment">// "noImplicitReturns": true,                   /* Report error when not all code paths in function return a value. */</span>
<span class="token comment">// "noFallthroughCasesInSwitch": true,          /* Report errors for fallthrough cases in switch statement. */</span>
</code></pre></div>
<h3>noUnusedLocals</h3>
<p>使ってないローカル変数はダメだという。</p>
<h3>noUnsuedParameters</h3>
<p>関数の引数で取る予定なのに使われない場合にエラーになる。</p>
<h3>noImplicitReturns</h3>
<p>暗黙的な <code>return</code> はだめです。下記の場合 <code>false</code> だと <code>return</code> が実行されないのでそれはダメですよとエラーになる。</p>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">function</span> <span class="token function">echo</span><span class="token punctuation">(</span><span class="token parameter">message<span class="token operator">:</span> string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> mesage<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>こうする必要がある。</p>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">function</span> <span class="token function">echo</span><span class="token punctuation">(</span><span class="token parameter">message<span class="token operator">:</span> string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> mesage<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>
<h3>noFallthroughCasesInSwitch</h3>
<p>コードを綺麗にする。</p>
<h3>Experimental Options</h3>
<p>将来JavaScriptに追加されるかもしれない機能を実験的に使えるようにする。</p>
<h3>参照</h3>
<p><a href="https://qiita.com/39_isao/items/c00a200b158ba057363f"></a></p>
<p><a href="https://www.youtube.com/watch?v=F9vzRz6jyRk">超TypeScript入門完全パック- TypeScriptでアプリを作りたい方必見！</a></p>
<p>記事に関するコメント等は</p>
<p>🕊：<a href="https://twitter.com/Unemployed_jp">Twitter</a>
📺：<a href="https://www.youtube.com/channel/UCT3wLdiZS3Gos87f9fu4EOQ/featured?view_as=subscriber">Youtube</a>
📸：<a href="https://www.instagram.com/unemployed_jp/">Instagram</a>
👨🏻‍💻：<a href="https://github.com/wimpykid719?tab=repositories">Github</a>
😥：<a href="https://ja.stackoverflow.com/users/edit/22565">Stackoverflow</a></p>
<p>でも受け付けています。どこかにはいます。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScript触った事ないけど、型についてまとめてみた。]]></title>
        <id>https://techblog-pink.vercel.app/posts/typescript-kata</id>
        <link href="https://techblog-pink.vercel.app/posts/typescript-kata"/>
        <updated>2021-04-07T15:00:00.000Z</updated>
        <summary type="html"><![CDATA[今の所 JavaScript → React → Next.js と来ているのでTypeScriptもやろうと思う。（JavaScript以外はまだ考えてアプリを作成できるレベルじゃない）まだ良さが分からないTypeScriptを勉強して大好きになると思う。...]]></summary>
        <content type="html"><![CDATA[<h2>最初に</h2>
<p>今の所 JavaScript → React → Next.js と来ているのでTypeScriptもやろうと思う。（JavaScript以外はまだ考えてアプリを作成できるレベルじゃない）</p>
<p>まだ良さが分からないTypeScriptを勉強して大好きになると思う。</p>
<p>巷では型を定義出来るのが良いらしい。それで型についてまとめてみた。</p>
<h2>環境構築</h2>
<ul>
<li>Node.jsインストール</li>
<li>作業ディレクトリを作成</li>
<li><code>npm install typescript --save-dev</code></li>
<li>上記のコマンドはローカルインストールなので、tscコマンドを実行する場合はパス指定する必要がある。 <code>../node_modules/.bin/tsc -v</code></li>
<li>tsconfig.jsonの作成 <code>../node_modules/.bin/tsc --init</code> コンパイル時の設定を変更できる。ない場合はデフォルトの設定が使用される。</li>
<li>実行は <code>../node_modules/.bin/tsc コンパイルしたい.ts</code> コンパイルして</li>
<li><code>node index.js</code> で実行する。</li>
<li><code>npm install --save-dev @types/node</code> するとnode.jsのパッケージが使用できる。 <code>fs</code> 等</li>
</ul>
<h2>アンビエント宣言（declare）</h2>
<p>型定義と呼ばれるもので <code>declare var x: number</code> 等の記述を <code>型定義ファイル（.d.ts）</code>と呼ばれる別ファイルで管理する。</p>
<p>下記のコードはTypeScriptでは変数の宣言がされてないとしてエラーになる。</p>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx">x <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>          <span class="token comment">// error TS2304: Cannot find name 'x'.</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// error TS2304: Cannot find name 'x'.</span>
</code></pre></div>
<p>なので</p>
<p>型定義ファイルか同じファイルに <code>declare var x: number;</code> と追加する事でエラー解決する事ができる。</p>
<p>基本的には別で作成した型定義ファイルに記述する事が推奨されている。</p>
<p>そして、JavaScriptのライブラリ等では型定義ファイルが用意されている事が多いのでそちらを使う。この型定義があるとIDE等でのコード補完機能が得られる。</p>
<h2>型注釈</h2>
<p>変数の隣に <code>:</code> と書いてその右側に型の注釈を入れる。</p>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">let</span> hasValue<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</code></pre></div>
<p>型が推論出来ない時に使用する。</p>
<p>例：初期値の入力で変数を代入しない時等。</p>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">let</span> hasValue<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
</code></pre></div>
<h2>型推論</h2>
<p>TypeScriptがどの型か変数の値から自動で教えてくれる。</p>
<h2>オブジェクトの型書き方</h2>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">const</span> a<span class="token operator">:</span> object <span class="token operator">=</span> <span class="token punctuation">{</span>
	name<span class="token operator">:</span> <span class="token string">'daigakuseidatta'</span><span class="token punctuation">,</span>
	age<span class="token operator">:</span> <span class="token number">25</span>
<span class="token punctuation">}</span>
<span class="token comment">//a.name と実行してもそんなのないと言われる</span>

<span class="token comment">//オブジェクトリテラル型で型定義する。</span>
<span class="token keyword">const</span> person <span class="token operator">:</span> <span class="token punctuation">{</span>
	name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
	age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
	name<span class="token operator">:</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span>
	age<span class="token operator">:</span> <span class="token number">21</span>
<span class="token punctuation">}</span>

<span class="token comment">//オプショナルプロパティを使う(?)</span>
<span class="token keyword">let</span> person<span class="token operator">:</span> <span class="token punctuation">{</span>
	age<span class="token operator">:</span> <span class="token builtin">number</span>
	lastName<span class="token operator">:</span> <span class="token builtin">string</span>
	<span class="token keyword">readonly</span> first<span class="token operator">:</span> <span class="token builtin">string</span>
	gender<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token comment">//?で会ってもなくてもよくなる。</span>
<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
	age<span class="token operator">:</span> <span class="token number">28</span><span class="token punctuation">,</span>
	latsName<span class="token operator">:</span> <span class="token string">'sato'</span><span class="token punctuation">,</span>
	firstName<span class="token operator">:</span> <span class="token string">'tiaki'</span>
	<span class="token comment">//genderがなくても怒られない。</span>
<span class="token punctuation">}</span>
person<span class="token punctuation">.</span><span class="token property-access">gender</span> <span class="token operator">=</span> <span class="token string">'male'</span> <span class="token comment">//後から追加できる。</span>
person<span class="token punctuation">.</span><span class="token property-access">lastName</span> <span class="token operator">=</span> <span class="token string">'kobayashi'</span> <span class="token comment">//上書きできる。</span>
person<span class="token punctuation">.</span><span class="token property-access">firstName</span> <span class="token operator">=</span> <span class="token string">'kuniko'</span> <span class="token comment">//上書き出来ない。</span>

<span class="token comment">//インデックスシグネチャ</span>
<span class="token comment">// オブジェクトが複数のプロパティを持つ可能性を示す。</span>
<span class="token comment">// [key:T]: Uのように定義する。</span>
<span class="token comment">// keyはstringかnumberのみ</span>
<span class="token keyword">const</span> capitals<span class="token operator">:</span> <span class="token punctuation">{</span>
	<span class="token punctuation">[</span>countryName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token maybe-class-name">Japan</span><span class="token operator">:</span> <span class="token string">'Tokyo'</span><span class="token punctuation">,</span>
	<span class="token maybe-class-name">Korea</span><span class="token operator">:</span> <span class="token string">'Seoul'</span>
<span class="token punctuation">}</span>
capitals<span class="token punctuation">.</span><span class="token property-access"><span class="token maybe-class-name">China</span></span> <span class="token operator">=</span> <span class="token string">'Beijing'</span>
capitals<span class="token punctuation">.</span><span class="token property-access"><span class="token maybe-class-name">Canada</span></span> <span class="token operator">=</span> <span class="token string">'Ottawa'</span>

<span class="token comment">//ネストする場合</span>
<span class="token keyword">const</span> person <span class="token operator">:</span> <span class="token punctuation">{</span>
	name<span class="token operator">:</span> <span class="token punctuation">{</span>
		first<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
		last<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
	age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
	name<span class="token operator">:</span> <span class="token punctuation">{</span>
		first<span class="token operator">:</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span>
		last<span class="token operator">:</span> <span class="token string">'Smith'</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	age<span class="token operator">:</span> <span class="token number">21</span>
<span class="token punctuation">}</span>

<span class="token comment">//オブジェクト内に関数がある場合</span>
<span class="token keyword">const</span> <span class="token maybe-class-name">Falcon</span> <span class="token operator">:</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    <span class="token function-variable function">fly</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">'鷹'</span><span class="token punctuation">,</span>
    <span class="token function-variable function">fly</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">{</span>
        <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">+</span> <span class="token string">'が大空を飛びました'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token maybe-class-name">Falcon</span><span class="token punctuation">.</span><span class="token method function property-access">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// '鷹が大空を飛びました</span>

</code></pre></div>
<h2>配列の型書き方</h2>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">const</span> fruits<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Apple'</span><span class="token punctuation">,</span> <span class="token string">'Banna'</span><span class="token punctuation">,</span> <span class="token string">'Grrape'</span><span class="token punctuation">]</span>
</code></pre></div>
<h2>列挙型</h2>
<p>特定のまとまった型を受け入れる。</p>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">enum</span> <span class="token maybe-class-name">CoffeeSize</span> <span class="token punctuation">{</span>
	<span class="token constant">SHORT</span> <span class="token operator">=</span> <span class="token string">'SHORT'</span><span class="token punctuation">,</span>
	<span class="token constant">TALL</span> <span class="token operator">=</span> <span class="token string">'TALL'</span><span class="token punctuation">,</span>
	<span class="token constant">GRANDE</span> <span class="token operator">=</span> <span class="token string">'GRANDE'</span><span class="token punctuation">,</span>
	<span class="token constant">VENTI</span> <span class="token operator">=</span> <span class="token string">'VENTI'</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> coffee <span class="token operator">=</span> <span class="token punctuation">{</span>
	hot<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
	<span class="token comment">//size: 'SHORT'この文字しか入らないようしたい。</span>
	<span class="token comment">//こうすると (prorerty) size: CoffeeSizeという列挙型になる。</span>
	size<span class="token operator">:</span> <span class="token maybe-class-name">CoffeeSize</span><span class="token punctuation">.</span><span class="token constant">SHORT</span>
<span class="token punctuation">}</span>
<span class="token comment">//入らない</span>
coffee<span class="token punctuation">.</span><span class="token property-access">size</span> <span class="token operator">=</span> <span class="token boolean">true</span>
coffee<span class="token punctuation">.</span><span class="token property-access">size</span> <span class="token operator">=</span> <span class="token string">'SHOT'</span>

<span class="token comment">//入る</span>
coffee<span class="token punctuation">.</span><span class="token property-access">size</span> <span class="token operator">=</span> <span class="token maybe-class-name">CoffeeSize</span><span class="token punctuation">.</span><span class="token constant">SHORT</span>
</code></pre></div>
<h2>union型（合併型）・Intersection型（交差型）</h2>
<p><strong>合併型</strong>
複数の型を指定したい時に使用する。
型Aか型Bのどちらかの型を持つ</p>
<p><strong>交差型</strong>
型Aと型B両方の型を持つ
交差型は「AとBに共通する型」ではない。</p>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token comment">//合併型を簡素に使用した場合</span>
<span class="token keyword">let</span> unionType<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>


<span class="token keyword">type</span> <span class="token class-name">Knight</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
	hp<span class="token operator">:</span> <span class="token builtin">number</span>
	sp<span class="token operator">:</span> <span class="token builtin">number</span>
	weapon<span class="token operator">:</span> <span class="token builtin">string</span>
	swordSkill<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">Wizard</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
	hp<span class="token operator">:</span> <span class="token builtin">number</span>
	mp<span class="token operator">:</span> <span class="token builtin">number</span>
	weapon<span class="token operator">:</span> sting
	magicSkill<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token comment">// 合併型...KnightまたはWizardの型を持つ。</span>
<span class="token keyword">type</span> <span class="token class-name">Adventurer</span> <span class="token operator">=</span> <span class="token maybe-class-name">Knight</span> <span class="token operator">|</span> <span class="token maybe-class-name">Wizard</span>

<span class="token comment">// 交差型... KnightかつWizardの型を持つ</span>
<span class="token keyword">type</span> <span class="token class-name">Paladin</span> <span class="token operator">=</span> <span class="token maybe-class-name">Knight</span> <span class="token operator">&#x26;</span> <span class="token maybe-class-name">Wizard</span>

<span class="token comment">//合併型の場合ここにmpが追加されてもエラーにならない。</span>
<span class="token comment">//指定された型があってもなくても良い。</span>
<span class="token keyword">const</span> adventure1<span class="token operator">:</span> <span class="token maybe-class-name">Adventure</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
	hp<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
	sp<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
	<span class="token comment">//mp: 30,</span>
	weapon<span class="token operator">:</span> <span class="token string">'木の剣'</span><span class="token punctuation">,</span>
	swordSkill<span class="token operator">:</span> <span class="token string">'三連斬り'</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">//Wizard寄りの冒険者</span>
<span class="token keyword">const</span> adventure2<span class="token operator">:</span> <span class="token maybe-class-name">Adventurer</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
	hp<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
	mp<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
	weapon<span class="token operator">:</span> <span class="token string">'木の枝'</span><span class="token punctuation">,</span>
	magicSkill<span class="token operator">:</span> <span class="token string">'ファイアボール'</span>
<span class="token punctuation">}</span>

<span class="token comment">//交差型は合併したものが全て揃ってないとだめ。</span>
<span class="token keyword">const</span> paladin<span class="token operator">:</span> <span class="token maybe-class-name">Paladin</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
	hp<span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span>
	sp<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
	mp<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span><span class="token comment">//一つでも型が欠けるとエラーになる。</span>
	weapon<span class="token operator">:</span> <span class="token string">'銀の剣'</span><span class="token punctuation">,</span>
	swordSkill<span class="token operator">:</span> <span class="token string">'日輪'</span><span class="token punctuation">,</span>
	magicSkill<span class="token operator">:</span> <span class="token string">'アルティメットキャノン'</span>
<span class="token punctuation">}</span>


</code></pre></div>
<h2>リテラル型</h2>
<p>それしか代入出来なくなる。</p>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token comment">//エラーになる。</span>
<span class="token keyword">const</span> apple<span class="token operator">:</span> <span class="token string">'apple'</span> <span class="token operator">=</span> <span class="token string">'hello'</span>

<span class="token comment">//エラーなし。</span>
<span class="token keyword">const</span> apple<span class="token operator">:</span> <span class="token string">'apple'</span> <span class="token operator">=</span> <span class="token string">'apple'</span>
</code></pre></div>
<h2>uinon型 + リテラル型</h2>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">let</span> cloathSize<span class="token operator">:</span> <span class="token string">'small'</span> <span class="token operator">|</span> <span class="token string">'medium'</span> <span class="token operator">|</span> <span class="token string">'large'</span> <span class="token operator">=</span> <span class="token string">'large'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> cloth <span class="token operator">=</span> <span class="token punctuation">{</span>
	color<span class="token operator">:</span> <span class="token string">'white'</span><span class="token punctuation">,</span>
	size<span class="token operator">:</span> clothSize
<span class="token punctuation">}</span>
<span class="token comment">//上記の状態ではsizeはリテラル型になって'large'しか受け付けない。</span>
cloth<span class="token punctuation">.</span><span class="token property-access">size</span> <span class="token operator">=</span> <span class="token string">'small'</span> 

<span class="token comment">//そこでオブジェクトの型定義でユニオンを使用する。</span>
<span class="token keyword">const</span> cloth <span class="token operator">=</span> <span class="token punctuation">{</span>
	color<span class="token operator">:</span> <span class="token string">'white'</span><span class="token punctuation">;</span>
	<span class="token comment">//この3つしか入らないくなる。</span>
	size<span class="token operator">:</span> <span class="token string">'small'</span> <span class="token operator">|</span> <span class="token string">'medium'</span> <span class="token operator">|</span> <span class="token string">'large'</span>
<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
	color<span class="token operator">:</span> <span class="token string">'white'</span><span class="token punctuation">,</span>
	size<span class="token operator">:</span> <span class="token string">'medium'</span>
<span class="token punctuation">}</span>

</code></pre></div>
<h2>型エイリアス</h2>
<ul>
<li>typeを使って、型に名前を付けて宣言できる。</li>
<li>同じ型を何度も定義する必要がない。（再利用性が高い）</li>
<li>型に名前を付けることで変数の役割を明確化できる。</li>
</ul>
<p>先ほどの <code>'small' | 'medium' | 'large'</code> を変数みたいに格納したい。</p>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token comment">//独自の型を定義した感じになる。</span>
<span class="token keyword">type</span> <span class="token class-name">ClothSize</span> <span class="token operator">=</span> <span class="token string">'small'</span> <span class="token operator">|</span> <span class="token string">'medium'</span> <span class="token operator">|</span> <span class="token string">'large'</span>
<span class="token keyword">const</span> cloth <span class="token operator">=</span> <span class="token punctuation">{</span>
	color<span class="token operator">:</span> <span class="token string">'white'</span><span class="token punctuation">;</span>
	<span class="token comment">//この3つしか入らないくなる。</span>
	size<span class="token operator">:</span> <span class="token maybe-class-name">ClothSize</span>
<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
	color<span class="token operator">:</span> <span class="token string">'white'</span><span class="token punctuation">,</span>
	size<span class="token operator">:</span> <span class="token string">'medium'</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">Country</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
	capital<span class="token operator">:</span> <span class="token builtin">string</span>
	language<span class="token operator">:</span> <span class="token builtin">string</span>
	name<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> japan<span class="token operator">:</span> <span class="token maybe-class-name">Country</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
	capital<span class="token operator">:</span> <span class="token string">'Tokyo'</span><span class="token punctuation">,</span>
	language<span class="token operator">:</span> <span class="token string">'Japanese'</span><span class="token punctuation">,</span>
	name<span class="token operator">:</span> <span class="token string">'Japan'</span>
<span class="token punctuation">}</span>

</code></pre></div>
<h2>Interface・Type Alias 使い方</h2>
<p>2021年時点でマイクロソフトはInterfaceの方が拡張しやすいという。理由から推奨している。</p>
<h3>Interface</h3>
<ul>
<li>interface宣言子で定義する。</li>
<li>Type Aliasと違って「=」は不要（一種のクラスなので=がいらない）</li>
</ul>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">interface</span> <span class="token class-name">Bread</span> <span class="token punctuation">{</span>
	calories<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>
</code></pre></div>
<ul>
<li>同名のinterfaceを宣言すると型が追加（マージ）される後から型を追加定義できる。</li>
<li>宣言のマージ：同じ名前を共有する複数の宣言を自動的に結合</li>
</ul>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">interface</span> <span class="token class-name">Bread</span> <span class="token punctuation">{</span>
	type<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> francePan<span class="token operator">:</span> <span class="token maybe-class-name">Bread</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
	calories<span class="token operator">:</span> <span class="token number">350</span><span class="token punctuation">,</span>
	type<span class="token operator">:</span> <span class="token string">'hard'</span>
<span class="token punctuation">}</span>

</code></pre></div>
<p>実際に色々、継承してみる。</p>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">interface</span> <span class="token class-name">Bread</span> <span class="token punctuation">{</span>
	calories<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Bread</span> <span class="token punctuation">{</span>
	type<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> francePan<span class="token operator">:</span> <span class="token maybe-class-name">Bread</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
	calories<span class="token operator">:</span> <span class="token number">350</span><span class="token punctuation">,</span>
	type<span class="token operator">:</span> <span class="token string">'hard'</span>
<span class="token punctuation">}</span>

<span class="token comment">//上記のinterfaceを型エイリアスで表現</span>
<span class="token keyword">type</span> <span class="token class-name">MaboDofu</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
	calories<span class="token operator">:</span> <span class="token builtin">number</span>
	spicyLevel<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name">Rice</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
	calories<span class="token operator">:</span> <span class="token builtin">number</span>
	gram<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">MaboDon</span> <span class="token operator">=</span> <span class="token maybe-class-name">MaboDon</span> <span class="token operator">&#x26;</span> <span class="token maybe-class-name">Rice</span> <span class="token comment">// 交差型（Intersection）</span>

<span class="token keyword">const</span> maboDon<span class="token operator">:</span> <span class="token maybe-class-name">MaboDon</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
	calories<span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span>
	spicyLevel<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
	gram<span class="token operator">:</span> <span class="token number">350</span>
<span class="token punctuation">}</span> 
</code></pre></div>
<h3>Interfaceの拡張</h3>
<ul>
<li>extendsを使う事で継承したサブインターフェースを作れる。</li>
<li>Type Aliasをextendsすることも出来る。</li>
</ul>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">interface</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>
	page<span class="token operator">:</span> <span class="token builtin">number</span>
	title<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Magazine</span> <span class="token keyword">extends</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>
	cycle<span class="token operator">:</span> <span class="token string">'daily'</span> <span class="token operator">|</span> <span class="token string">'weekly'</span> <span class="token operator">|</span> <span class="token string">'monthly'</span> <span class="token operator">|</span> <span class="token string">'yearly'</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> jump<span class="token operator">:</span> <span class="token maybe-class-name">Magazine</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
	cycle<span class="token operator">:</span> <span class="token string">'weekly'</span><span class="token punctuation">,</span>
	oage<span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span>
	title<span class="token operator">:</span> <span class="token string">'週刊少年ジャンプ'</span>
<span class="token punctuation">}</span>

<span class="token comment">//type Aliasを継承してみる。</span>
<span class="token keyword">type</span> <span class="token class-name">BookType</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
	page<span class="token operator">:</span> <span class="token builtin">number</span>
	title<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Handbook</span> <span class="token keyword">extends</span> <span class="token class-name">BookType</span> <span class="token punctuation">{</span>
	theme<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token comment">//最後はInterfaceの型で変数を作成する。</span>
<span class="token keyword">const</span> nijiiro<span class="token operator">:</span> <span class="token maybe-class-name">HandBook</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
	page<span class="token operator">:</span> <span class="token number">138</span><span class="token punctuation">,</span>
	title<span class="token operator">:</span> <span class="token string">'にじいろ'</span><span class="token punctuation">,</span>
	theme<span class="token operator">:</span> <span class="token string">'旅行'</span>
<span class="token punctuation">}</span>
</code></pre></div>
<h3>Interfaceでclassに型を定義する。</h3>
<ul>
<li>implements（実装する）を使ってclassに型を定義する。</li>
</ul>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">interface</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>
	page<span class="token operator">:</span> <span class="token builtin">number</span>
	title<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>
<span class="token comment">//Bookを実装するComicと読めば良い。</span>
<span class="token comment">//Bookを実装するComicは必ずpage、titleというプロパティを持つ</span>
<span class="token keyword">class</span> <span class="token class-name">Comic</span> <span class="token keyword">implements</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>
	page<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
	title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
	<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">page<span class="token operator">:</span> number<span class="token punctuation">,</span> title<span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token keyword">private</span> publishYear<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">page</span> <span class="token operator">=</span> page
		<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">title</span> <span class="token operator">=</span> title
	<span class="token punctuation">}</span>
	<span class="token function">getPublishYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">title</span> <span class="token operator">+</span> <span class="token string">"が発売されたのは"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">publishYear</span> <span class="token operator">+</span> <span class="token string">"年です。"</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">const</span> popularComic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Comic</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">'鬼滅の刃'</span><span class="token punctuation">,</span> <span class="token number">2016</span><span class="token punctuation">)</span>

</code></pre></div>
<h3>Type AliasとInterfaceの違い</h3>
<p><strong>Type Alias</strong>
用途：複数の場所で再利用する型に名前を付ける。
拡張性：同名のtypeを宣言するとエラー
継承：継承はできない交差型で新しい型エイリアスを作る
使用できる型：オブジェクト関数以外のプリミティブ、配列、タプルも宣言可能
考慮事項：拡張しにくい不便さがある。
いつ使う：アプリ開発ではType Alias</p>
<p><strong>Interface</strong>
用途：オブジェクト・クラス・関数の構造を定義するため
拡張性：同名のinterfaceを宣言するとマージされる（宣言のマージ）
継承：extendsによる継承ができる
使用できる型：オブジェクトと関数の型のみ宣言できる
考慮事項：拡張できることによりバグを生む可能性
いつ使う：ライブラリ開発ではInterface</p>
<h2>関数に型を付ける</h2>
<p>引数と戻り値に型を付ける。</p>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token operator">:</span> number<span class="token punctuation">,</span> nunm2<span class="token operator">:</span> number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> num1 <span class="token operator">+</span> num2
<span class="token punctuation">}</span>
</code></pre></div>
<h3>Void型</h3>
<p>関数が何も返さない（undefindが一応返ってくる）物だとどうなるのか。</p>
<p>TypeScriptには <code>undefined</code> 型は存在するが関数の型定義で使用するとエラーになるので登場するのは稀になる。ただし関数の最後に <code>return</code> が存在する場合は <code>undefined</code> 型を使用する事ができる。</p>
<p>そこで関数で <code>undefined</code> が返ってくる場合は型定義で <code>void</code> を使用する。</p>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
	<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 実行するとundefindを一応返す。</span>
<span class="token comment">// なのでundefined型も存在する。</span>
<span class="token keyword">let</span> tmp<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
</code></pre></div>
<h3>Null型</h3>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">let</span> tmpNull<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">//ok</span>
<span class="token keyword">let</span> tmpNull<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">//ok</span>
<span class="token comment">//この逆でundefinedにnullをいれても良い。</span>
</code></pre></div>
<h2>無名関数に型書き方</h2>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">const</span> <span class="token function-variable function">anotherAdd</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">n1<span class="token operator">:</span> numebr<span class="token punctuation">,</span> n2<span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token function-variable function">number</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">num1<span class="token operator">:</span> number<span class="token punctuation">,</span> num2<span class="token operator">:</span> number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> num1 <span class="token operator">+</span> num2
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">//片方の型を省略できる。</span>
<span class="token keyword">const</span> <span class="token function-variable function">anotherAdd</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">n1<span class="token operator">:</span> numebr<span class="token punctuation">,</span> n2<span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token function-variable function">number</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> num1 <span class="token operator">+</span> num2
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>
<h2>アロー関数の型書き方</h2>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">const</span> doubleNumber <span class="token operator">=</span> <span class="token punctuation">(</span>num<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token parameter">num</span> <span class="token arrow operator">=></span> num <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token comment">//こんな感じに型定義をずらす事もできる。    //戻り値の型</span>
<span class="token keyword">const</span> <span class="token function-variable function">doubleNumber2</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">num<span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token function-variable function">number</span> <span class="token operator">=</span> <span class="token parameter">num</span> <span class="token arrow operator">=></span> num <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre></div>
<h2>コールバック関数の型書き方</h2>
<p>関数自体は戻り値を持たない。第一引数はnumberを型に持つ、第二引数は関数でその関数の引数はnumberを型に持ち戻り値もnumberを返す。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">doubleAndHandle</span><span class="token punctuation">(</span>num<span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token function-variable function">cb</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">num<span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> number<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> doubleNum <span class="token operator">=</span> <span class="token function">cb</span><span class="token punctuation">(</span>num <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>num <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// コールバック関数の引数にはdoubleAndHandleの第一引数が入る。</span>
<span class="token function">doubleAndHandle</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token parameter">doubleNum</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
	<span class="token keyword control-flow">return</span> doubleNum
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//仮にコールバック関数の戻り値をvoidの型にするとエラーは起きないが戻り値は無効となり使用出来なくなる。</span>
<span class="token keyword">function</span> <span class="token function">doubleAndHandle</span><span class="token punctuation">(</span>num<span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token function-variable function">cb</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">num<span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> number<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> doubleNum <span class="token operator">=</span> <span class="token function">cb</span><span class="token punctuation">(</span>num <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//if(doubleNum) //doubleNum.toString()とかにするとエラーになる。</span>
	<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>doubleNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">doubleAndHandle</span><span class="token punctuation">(</span><span class="token string">'21'</span><span class="token punctuation">,</span> <span class="token parameter">doubleNum</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
	<span class="token keyword control-flow">return</span> doubleNum
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre></div>
<h2>Any型・Unknow型</h2>
<ul>
<li>any型はなんでも入る型、便利だがTypeScriptの機能を放棄しているようにも思える。</li>
<li>unknon型はany型より少し厳しい型</li>
</ul>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">let</span> unknownInput<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> anyInput<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> text<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
unknownInput <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span>
unknownInput <span class="token operator">=</span> <span class="token number">21</span>
unknownInput <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
text <span class="token operator">=</span> anyInput<span class="token comment">//エラーにならない。使うときもエラーにならない。</span>
text <span class="token operator">=</span> unknownInput<span class="token comment">//ここでエラーになる。何でも入れられるが使うときに注意がでる。</span>
<span class="token comment">//unknownの使い方 stringの型が来たときのみ代入する。</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> unknownInput <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	text <span class="token operator">=</span> unknownInput<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre></div>
<h2>Never型</h2>
<p>エラーをキャッチする関数等の戻り値として使用される。</p>
<p>他にはずっとループで周り続ける関数の戻り値に使用されることもある。</p>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token comment">// もしneverが書かれていない場合、TypeScriptの型推論ではvoid型になる。</span>
<span class="token comment">// 理由はnever自体が新しい型でバージョンから登場してまだ追いついていない。</span>
<span class="token keyword">function</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token parameter">message<span class="token operator">:</span> string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">never</span> <span class="token punctuation">{</span>
	<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'This is an error'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<h2>最後に</h2>
<p>調べる前は String, Number等の引数型があらかじめ分かっても、そこまで読みやすくなるのかと思っていた。オブジェクトの型、配列の型で細かく型を設定できると知り確かにこれなら戻ってくるJsonファイルの型とかを書いておけば後でコードを読んでも実際に実行する機会とかを減らせして効率が上がるのかなと思った。まだ途中なので色々と勉強していきたいと思います。</p>
<p>記事に関するコメント等は</p>
<p>🕊：<a href="https://twitter.com/Unemployed_jp">Twitter</a>
📺：<a href="https://www.youtube.com/channel/UCT3wLdiZS3Gos87f9fu4EOQ/featured?view_as=subscriber">Youtube</a>
📸：<a href="https://www.instagram.com/unemployed_jp/">Instagram</a>
👨🏻‍💻：<a href="https://github.com/wimpykid719?tab=repositories">Github</a>
😥：<a href="https://ja.stackoverflow.com/users/edit/22565">Stackoverflow</a></p>
<p>でも受け付けています。どこかにはいます。</p>
<h3>参照</h3>
<p><a href="https://www.wakuwakubank.com/posts/501-typescript-declaration/">TypeScript｜アンビエント宣言(declare)と型定義ファイル(.d.ts) - わくわくBank</a></p>
<p><a href="https://www.youtube.com/watch?v=F9vzRz6jyRk">超TypeScript入門完全パック- TypeScriptでアプリを作りたい方必見！</a></p>
<p><a href="https://www.youtube.com/watch?v=2DoYdw-rvL0&#x26;list=PLX8Rsrpnn3IW0REXnTWQp79mxCvHkIrad&#x26;index=6">【日本一わかりやすいTypeScript入門】型エイリアス(type)でオブジェクトの型定義</a></p>
<p><a href="https://www.youtube.com/watch?v=J2vox52T4W8&#x26;list=PLX8Rsrpnn3IW0REXnTWQp79mxCvHkIrad&#x26;index=10">【日本一わかりやすいTypeScript入門】ハンズオンで理解するInterfaceとType Aliasの違い</a></p>
<p><a href="https://tech-for.com/2020/03/04/fix-an-error-that-ts2307-cannot-find-module-fs-by-installing-types-node-package/">TypeScript で error TS2307: Cannot find module ‘fs’. が表示された時に、@types/node パッケージをインストールすると解決されました。[2020]</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Zennの過去記事を含め、Githubで連携するようにした。]]></title>
        <id>https://techblog-pink.vercel.app/posts/zenn-migrate-past-articles-github</id>
        <link href="https://techblog-pink.vercel.app/posts/zenn-migrate-past-articles-github"/>
        <updated>2021-04-05T15:00:00.000Z</updated>
        <summary type="html"><![CDATA[...]]></summary>
        <content type="html"><![CDATA[<h2>最初に</h2>
<p>唐突ですが、Next.jsのチュートリアルを終えて、自分のサイトが欲しいと思うようになった。
どうせなら記事をGithubのリポジトリで管理して、そこにアップしたらzennと自分のブログに記事が表示されるようになったら一石二鳥だなと思った。
その前手順でGithubでZennの投稿を管理するようにしたいと思う。
すでに16記事ほどzennのオンラインエディタから投稿しているので過去の記事も移行したいと思う。</p>
<h3>やる事</h3>
<ul>
<li>リポジトリの作成</li>
<li>Zennと作成したGithubリポジトリを連携</li>
<li>過去記事をリポジトリに追加する</li>
</ul>
<h2>リポジトリの作成</h2>
<p>リポジトリの構成は <code>articles</code> フォルダに記事を入れていく。
zennではこのフォルダ名から記事を検索するようになっているので、同じように作成する必要がある。
最初はとりあえず、空のフォルダを作成して、リポジトリを作成する。</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">.
└─ articles
   ├── example-article1.md
   └── example-article2.md</code></pre></div>
<h2>ZennとGithubの連携</h2>
<p>ここは公式の記事がとても分かりやすくなっているので、それにしたがって <code>Only select repositories</code> にチェックボックスを入れ、作成したリポジトリを選択する。</p>
<p><a href="https://zenn.dev/zenn/articles/connect-to-github">GitHubリポジトリでZennのコンテンツを管理する</a></p>
<h2>過去記事をリポジトリに追加する</h2>
<p>最初からGithubで記事を管理している人は良いが、自分みたいにある程度記事を投稿している人は少し手間が掛かる。
最初は書いた記事を全て削除してからではないと、記事がダブったりするのではと思って <code>zenn github 連携 過去の記事</code> 等でgoogle先生に聞いていたのだが、結果的にその心配はなかった。
zennには <code>slug</code> と呼ばれる各記事に付けられる固有のIDがある。
そのIDは記事のURLに含まれている。</p>
<p><a href="https://zenn.dev/unemployed/articles/3c8a872a210ded">https://zenn.dev/unemployed/articles/3c8a872a210ded</a></p>
<p>この <a href="https://zenn.dev/unemployed/articles/3c8a872a210ded"><code>3c8a872a210ded</code></a> が <code>slug</code> と呼ばれるIDになる。
それをファイル名に入れて <code>3c8a872a210ded.md</code> とする事でオンラインエディタで作成した記事と結び付けてくれる。
そのおかげでこれまでのいいね・コメントを保ったままに出来る。これはとてもありがたい。
これだけだと、ファイルの中身が空っぽなので過去に投稿した記事をコピー・ペーストする必要がある。これが16記事もあるとまぁまぁ大変だった。
ファイルには記事のメタ情報（タイトル・絵文字・タイプ・トピック・公開設定）を含める必要があるので、こちらの内容もあらかじめ記事と同じにする。
上記の記事だとこんな感じのメタ情報になる。</p>
<p>ちなみに <a href="https://zenn.dev/api/articles/3c8a872a210ded/markdown">https://zenn.dev/api/articles/3c8a872a210ded/markdown</a> こうする事でマークダウンを取得出来る。</p>
<div class="remark-highlight"><pre class="language-markdown"><code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span>
<span class="token font-matter yaml language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token string">"独学・未経験】Pythonデスクトップアプリを作成したから見て欲しい。 （ポートフォリオ ）"</span> <span class="token comment"># 記事のタイトル</span>
<span class="token key atrule">emoji</span><span class="token punctuation">:</span> <span class="token string">"🖍️"</span> <span class="token comment"># アイキャッチとして使われる絵文字（1文字だけ）</span>
<span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"idea"</span> <span class="token comment"># tech: 技術記事 / idea: アイデア記事</span>
<span class="token key atrule">topics</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"python"</span><span class="token punctuation">,</span> <span class="token string">"初心者"</span><span class="token punctuation">,</span> <span class="token string">"ポートフォリオ"</span><span class="token punctuation">,</span> <span class="token string">"作業ログ"</span><span class="token punctuation">]</span> <span class="token comment"># タグ。["markdown", "rust", "aws"]のように指定する</span>
<span class="token key atrule">published</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 公開設定（falseにすると下書き）</span></span>
<span class="token punctuation">---</span></span>
ここから本文が入る。
</code></pre></div>
<p>2021/4/7時点では、過去の記事を取得する方法は手作業しかないのでこうする他ない。
記事のデータを取得する方法は今後追加されるかもしれない。それまで待てない、または記事がそこまで多くない人は早めにやっておくと楽かもしれない。
実際に自分が作成したzennの記事を管理するリポジトリ</p>
<p><a href="https://github.com/wimpykid719/zenn-content">wimpykid719/zenn-content</a></p>
<h2>最後に</h2>
<p>この記事がGithubに連携してから初めて書く記事で、連携させると今まで自動で生成されていた <code>slug</code> を個別に設定する事が出来る。
この記事のパスは <code>https://zenn.dev/unemployed/articles/zenn-migrate-past-articles-github</code> となっていて記事のファイル名に付けた <code>zenn-migrate-past-articles-github</code> がそのまま使用されている。</p>
<p>記事に関するコメント等は</p>
<p>🕊：<a href="https://twitter.com/Unemployed_jp">Twitter</a>
📺：<a href="https://www.youtube.com/channel/UCT3wLdiZS3Gos87f9fu4EOQ/featured?view_as=subscriber">Youtube</a>
📸：<a href="https://www.instagram.com/unemployed_jp/">Instagram</a>
👨🏻‍💻：<a href="https://github.com/wimpykid719?tab=repositories">Github</a>
😥：<a href="https://ja.stackoverflow.com/users/edit/22565">Stackoverflow</a></p>
<p>でも受け付けています。どこかにはいます。</p>
<h3>参照</h3>
<p><a href="https://zenn.dev/zenn/articles/zenn-cli-guide">Zenn CLIで記事・本を管理する方法</a></p>
<p><a href="https://zenn.dev/zenn/articles/what-is-slug">Zennのスラッグ（slug）とは</a></p>
<p><a href="https://zenn.dev/unsoluble_sugar/articles/9c04a36a5decdb6d1b20">GitHubリポジトリ連携を通して感じたZennの良さ</a></p>
<p><a href="https://zenn.dev/yajamon/articles/ebd678f0dd57936e7673">Zennの記事をexportする</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【独学・未経験】Pythonデスクトップアプリを作成したから見て欲しい。 （ポートフォリオ ）]]></title>
        <id>https://techblog-pink.vercel.app/posts/3c8a872a210ded</id>
        <link href="https://techblog-pink.vercel.app/posts/3c8a872a210ded"/>
        <updated>2021-03-27T15:00:00.000Z</updated>
        <summary type="html"><![CDATA[エンジニアに未経験から転職するにはポートフォリオが必要と聞いて、少しづつ作成していた物が自分の中でこれ以上作っても大きくは変わらないと思い、一旦区切りを付けるため公開することにしました。最近見かける「フレームワークを使用して・AWS・Docker・CI/CD等...]]></summary>
        <content type="html"><![CDATA[<h2>最初に</h2>
<p>エンジニアに未経験から転職するにはポートフォリオが必要と聞いて、少しづつ作成していた物が自分の中でこれ以上作っても大きくは変わらないと思い、一旦区切りを付けるため公開することにしました。</p>
<p>最近見かける「フレームワークを使用して・AWS・Docker・CI/CD等を使用してWebアプリを公開してURLはこれです。」みたいな派手さはないです。</p>
<p>ポートフォリオを公開するサイトを立て、そこに載せる事をネットで見かけた人の多くが行っていたのですが、自分が納得する出来栄えで作成するにはもう少し技術力が必要だと感じたのでGitHubにレポジトリでコードを残して、READMEにポートフォリオを作成する上でこだわった点・苦労した点を載せる事にしました。</p>
<h2>作者</h2>
<p>年齢は25歳です。
エンジニアを目指してプログラミングを学習している初学者です。
フロントエンド・バックエンド両方好きです。
機能的でデザイン性のあるアプリを作れるようになりたいと考えています。
大学は文系で希望したゼミに行けなく、教授が好きな物作って良いという事だったので、その際にPythonを勉強しました。
JavaScriptは最近、勉強しました。そのアウトプットとして今回のアプリはフロントエンドをHTML・CSS（SCSS）・JavaScriptで作成しました。</p>
<p>全く見当違いなポートフォリオの作り方をしているかも知れないのでとても不安です。人事の方に今自分が出来る事が上手く伝われば良いと思います。
ここをこうしたらもっと上手く伝わる等のフィードバックを頂けると幸いです。</p>
<h2>ポートフォリオとして</h2>
<p><img src="https://user-images.githubusercontent.com/23703281/112721198-fc19d980-8f45-11eb-8381-99e0b36c950c.png" alt="Frontend"></p>
<p><a href="https://github.com/wimpykid719/YT-Download">GitHubレポジトリ：YT_Download</a></p>
<h2>アプリの概要</h2>
<p>Youtubeをダウンロードして、音声の情報（曲名、アーティスト名、ジャンル、年代、アートワーク、歌詞）を自動で取得する。AACファイルにiTunesに対応した形式で書き込む。</p>
<h2>どんな意図で作ったのか</h2>
<p>昔Apple MusicやSpotifyの音楽ストリーミングサービスが出る前に、友人がYoutubeから音楽をipodに入れるのに<a href="http://www.area61.com/downloader/downloader-manual.htm">Area 61 ダウンローダー</a>というアプリを使用していました。</p>
<p><strong>作業内容</strong></p>
<ul>
<li>アプリを使って動画をダウンロード</li>
<li>別のアプリで動画から音声をAAC形式で抽出</li>
<li>iTunesに登録後に曲情報をgoogleで検索して貼り付ける</li>
</ul>
<p>動画をダウンロードして、音声を抽出して曲情報をgoogleで検索して、アートワークの画像を貼り付けてと一曲ずつ丁寧にiTunes上で作業を行なっていました。3曲追加するだけでも15分ほど掛かっていました。</p>
<p>当時はプログラミングのアプリを作るのは夢のまた夢みたいな感覚で友人は大変な作業を通して音楽を聞いていました。現在はプログラミングに関する情報も整備されて独学でも学びやすい環境になり、その事を思い出してポートフォリオも兼ねて作成しました。</p>
<p>このアプリを使えば友人が15分かけていた作業を20秒ほどで終わらせる事が出来ます。</p>
<h2>こだわった箇所</h2>
<h3>フロントエンド</h3>
<p><img src="https://user-images.githubusercontent.com/23703281/112608493-ba156880-8e5d-11eb-9402-ce723d9fe0a5.png" alt="radioButton"></p>
<ul>
<li>シンプルなUIでユーザの選択肢を減らした。</li>
</ul>
<p>「ヒックの法則」では選択肢が多過ぎるとユーザーは迷ってしまい、こちらが望む行動を起こさないと言われています。
ユーザが選択するのはダウンロード時に音声のみか、モバイル向けの画質で一番画質が良いもの、一番画質が良いものの3つのみに絞る事ユーザが判断する時間を減らしユーザにプレッシャーを与えないようにしました。そうする事でユーザがスムーズにアプリを使用出来るよう作成しました。</p>
<p><img src="https://user-images.githubusercontent.com/23703281/112608451-ad911000-8e5d-11eb-84aa-c794e4ca1d6f.png" alt="progress"></p>
<ul>
<li>待機処理が入る際はどれくらいで終わるか表示する。</li>
</ul>
<p>ローディングのアニメーションを挟む事でユーザへのストレスを軽減しました。
また重い処理が入る際はプログレスバーを表示してどれくらいの目安で処理が終わるのかを表示しています。</p>
<p><strong>苦労した箇所</strong></p>
<p>サーバから応答があるまでローディングアニメーションを表示させる事については記事が多くあったのですが、正確な進捗状況をサーバから受け取りそれを表示するという事について書かれた記事はなかったので実装する上で少し苦労しました。Eelではサーバ側からフロントのJavaScript関数を実行出来るため、「Python側の変数（進捗状態）JavaScriptの関数に引数として渡してDOM内容を書き換える作業」を1秒毎に行わせてプログレスバーを実装しました。</p>
<p><img src="https://user-images.githubusercontent.com/23703281/112608773-111b3d80-8e5e-11eb-9853-f6f682a8a98a.png" alt="Thumbnail"></p>
<ul>
<li>意図しない動画のダウンロード防止する。</li>
</ul>
<p>URLを入力した時点で動画のタイトル・サムネイルを取得して表示させています。ユーザがこれからダウンロードする動画が合っているか相互確認するために実装しました。</p>
<p><strong>苦労した箇所</strong></p>
<p>細かいデザインで機能としては関係ないのですが、サムネイル下半分にグラデーションが掛かっています。それは背景のサムネイルの色に合わせて変更するようになっていて、<a href="https://github.com/lokesh/color-thief">color-thief</a>というライブラリで画像にある特徴的な色を抽出してそれをグラデーションに適用しています。サムネイルのDOMは最初2つとも同じだったので片方の色が変わったらもう片方も変更されてしまう状態になっていました。個別にclass名を追加して変更されるようにしました。中々、思うようにいかないと痛感しました。</p>
<p><img src="https://user-images.githubusercontent.com/23703281/112721100-7007b200-8f45-11eb-99f0-88ed721067a9.gif" alt="resphonesive"></p>
<ul>
<li>レスポンシブ対応・ハンバーガーメニュー</li>
</ul>
<p>最近では当たり前だけど、しっかり作りきった事がなかったので今回作成する事が出来てよかった。</p>
<h3>バックエンド</h3>
<ul>
<li>待機処理を並列・非同期処理にする事で動作速度向上</li>
</ul>
<p>待機処理を行う動作は主に2種類あります。</p>
<ol>
<li>動画・音声のダウンロード時</li>
<li>サムネイル・タイトルのダウンロード・音声情報を取得するために歌詞サイト・iTunesAPIへのアクセス時</li>
</ol>
<p>前者はThreadを用いてマルチスレッドで並列に処理を行うようにしました。
理由は動画・音声のダウンロードはプログレッシブ形式（データを保存しながら再生可能）なので保存とダウンロードが交互に行われ、全く処理が行われない状況は少ないと思いました。並列処理を行わせ速度改善を図りました。マルチスレッドなのでこちらの方が多くリソースを消費すると予想されます。</p>
<p>後者はasyncioを用いて非同期処理で待機する時間がある際に途中で処理を切り替えて行うようにしました。
理由は <code>requests.get()</code> でリクエストを投げて返ってくるまでの間はそこで全く処理が行われない状況が発生して、その間に別のリクエストを投げるなどしてできる限り待機する処理を短くしました。
こうする事で2つリクエストを投げる処理がある際に1つの処理でレスポンスに1秒かかるとする。2つだと全体で2秒の待機処理が入る。これをノンブロッキングに変えリクエストを投げた直後に待機処理に入らず、直ぐに別のリクエストを投げる。するとほとんど同時にレスポンスが返ってくるので待機時間は1秒になる。これが8つなどのリクエストになってもだいたい1秒近くで返ってくるので、リクエストの数が増えるほど効果がある。そしてスレッドは一つしか使用していないのでマルチスレッドよりもリソースの消費が少ないと思われる。</p>
<p>※ただ今回のプログラムでは <code>requests</code> を用いておりライブラリ自体非同期に対応していないため構文上は非同期処理ですが、内部では並列処理が行われています。</p>
<p><strong>苦労した箇所</strong></p>
<p>asyncioの構文が難しくてどのような仕組みで動作しているの分からなかったので、asyncioがPythonのどんな機能から出来ているのか調べる所から入りました。調べた内容は下記の記事にまとめてあります。
<a href="https://zenn.dev/unemployed/articles/96ef729c7a091d">Pythonのrequestsを非同期にしてiTunes APIに高速にリクエストを投げるには</a></p>
<p><img src="https://user-images.githubusercontent.com/23703281/112609997-8f2c1400-8e5f-11eb-8051-4eb67a2eb4fa.png" alt="progressNumber"></p>
<ul>
<li>並列で行われている処理の進捗を計算する。</li>
</ul>
<div class="remark-highlight"><pre class="language-Python"><code class="language-Python">def show_progress_bar(self, stream, chunk, bytes_remaining):
    current = ((stream.filesize - bytes_remaining)/stream.filesize)
    with self.lock:
        self.percent[threading.currentThread().getName()] = current*100</code></pre></div>
<p><code>stream.filesize</code>にはURL一つ当たりでダウンロードされる予定のファイルサイズの値が入る。
<code>bytes_remaining</code>にはまだダウンロードされていないファイルサイズが入る。
<code>(全体のファイルサイズ - 残りのファイルサイズ)/全体のファイルサイズ</code> でどれくらいの割合のデータがダウンロードされたか計算している。その値を<code>self.percent</code> に各々のスレッド進捗として格納する。</p>
<div class="remark-highlight"><pre class="language-Python"><code class="language-Python">def get_progress(self, threads):
    while any(t.is_alive() for t in threads):
        with self.lock:
            percent = round(sum(self.percent.values()) / (self.count * self.number))
            eel.putProgress(percent)
        time.sleep(1.0)
    eel.putProgress(100)</code></pre></div>
<p>最後に<code>self.percent</code>の値を全て足して、現在立ち上がっているスレッドの数で割って全体の進捗状況の値を<code>eel.putProgress(percent)</code>でフロントに渡している。</p>
<p><img src="https://user-images.githubusercontent.com/23703281/112707310-b9c4ae00-8eed-11eb-9395-c9658a144023.png" alt="songInfo"></p>
<ul>
<li>音声情報の取得</li>
</ul>
<p>最初はShazamのように音声ファイルを解析して情報を取得出来るかと考えていましたが、そのようなAPIも技術もなかったので、無理かと考えていました。そこでYoutubeの動画についての説明欄に、動画内で使用されている音声情報を付与している事に気付きました。そこから音声情報を取得してiTunesAPIに投げる事でより詳細は情報（ジャンル、年代、アートワーク）を取得出来るようになりました。</p>
<p>担当者はポートフォリオを隅々とはみないので紹介したい機能は自分から名乗りましょう。出来ればその際に苦労した躓いた箇所も説明出来るといいかもしれません。</p>
<p><strong>苦労した箇所</strong></p>
<p>Pytubeに動画の詳細情報をリスト形式で取得出来るとドキュメントに書かれていたが、リスト形式で取得出来なかったのでissueを作成して直してもらった。自分でプルリクエスト出してマージして貰えれば良いのだが、難しいと考え助けを求めた。</p>
<h2>使用技術・選定理由</h2>
<p>バックエンドは一番慣れているPythonを使用して作成しました。Eelというライブラリを使用してフロントエンドはHTML・CSS（SCSS）・JavaScriptを用い作成しました。PythonでGUIアプリを作成する場合、tkinter, kivy, PyQt, wxPython等が挙げられるのですが、GUIを作成するのに独自の記法を学ぶ必要があり、それらは汎用性が低く今後Web開発もやってみたいと考えていたので、HTML・CSS・JavaScriptでGUIが作成出来る。Eelを選択しました。
作成後にexe, app形式にしてインストールを簡単に出来るようにcx_Freeze使用を試みました。その他にもpy2exe, py2app, PyInstallerがありましたが、2つは開発が終了しており、PyInstallerはexe化したファイルの起動が遅いと書かれた記事を見たのでcx_Freezeを選択しました。</p>
<h2>上手くいかなかった事</h2>
<p>結果的にbuildしてapp形式に出来ました。しかし新しくファイルを作成する <code>open()</code> 処理が走るとエラーが起こり上手く動作しませんでした。app形式にした場合、consoleが立ち上がらないのでエラーが起きても分かりません。そこでファイルにlogを残すコードを追記したのですが、logファイルを生成する過程でエラーが出るのでlogファイル自体を生成することが出来ませんでした。
別のパソコンでも簡単に動作する形にまで持っていきたかったのですが、上手くいきませんでした。実行環境を意識させずに実行ファイルとして作成する場合、Pythonでは難易度が高かったです。</p>
<h2>考えられる対策</h2>
<p>コンパイラ言語で書いていたらこの辺りの問題は解決出来ていたかと思います。もしくはElectronを使用してバックエンドをnodeJsで書く方法もあったと思います。それらを使って今回のアプリを作成する技術力が必要だと感じました。Pyinstallerの方が記事が豊富なので、起動時間は多少遅くてもbuildするのが良いかも知れないです。</p>
<h2>出来ない事・出来る事</h2>
<h3>出来ない事</h3>
<p>今回データベース等は使用しなかったので、SQL操作を行う練習が必要になると思います。少しづつではありますが勉強しています。
AWS、GCP（一度だけスクリプトをデプロイしました。）等にデプロイする事をしなかったので、その辺りのネットワーク・Linux等の知識がWeb開発をする場合、必要だと考えています。
Webサービス等を開発する際、先にGithub等でオープンソースの人気プロジェクトを参考に設計を進めると綺麗な設計手法を学びながら作成出来るという事を知りませんでした。思うままに設計してしまい読みやすく綺麗なコードと言い難い状態になっています。今後アプリを作成する際は似たようなプロジェクトを参考に開発をしたいと考えています。</p>
<h3>出来る事</h3>
<p>上記のポートフォリオから、Pythonを使用した簡単なAPIを使用したスクリプト、処理速度を配慮したスクリプトの作成、HTML・CSS（SCSS）・JavaScriptを使用したWeb制作は出来ます。JavaScriptのモダンなライブラリ等を使用してアプリを作成出来るほどではないですが、Reactのチュートリアルで<a href="https://github.com/wimpykid719/react-get-start">五目並べ</a>を作成しました。Webアプリ等に必要な基本的機能CRUDは今回のポートフォリオを作成する過程で一通りを行いました。iTunesAPIからJsonデータを取り扱う際に音声についての情報生成（ジャンル、年代、アートワーク）、フロントエンドでそれらの読み込み、ユーザからの変更があればJsonデータの更新・削除が出来ます。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[これだけ覚えておけばReact使える。（React公式チュートリアルに沿って）]]></title>
        <id>https://techblog-pink.vercel.app/posts/ccfa739f7d4e62</id>
        <link href="https://techblog-pink.vercel.app/posts/ccfa739f7d4e62"/>
        <updated>2021-03-22T15:00:00.000Z</updated>
        <summary type="html"><![CDATA[Reactでアプリのフロント作成したり、NextJSやGatsbyJSを使って自分のブログをいつか作りたいのでその第一歩としてReactの公式チュートリアルを挑戦する事にした。[チュートリアル：React の導入  React](https://ja.re...]]></summary>
        <content type="html"><![CDATA[<h2>最初に</h2>
<p>Reactでアプリのフロント作成したり、NextJSやGatsbyJSを使って自分のブログをいつか作りたいのでその第一歩としてReactの公式チュートリアルを挑戦する事にした。</p>
<p><a href="https://ja.reactjs.org/tutorial/tutorial.html">チュートリアル：React の導入 - React</a></p>
<p>簡単なOXゲームを通してReactの基本機能を学ぼうというものである。</p>
<p><strong>Reactのチュートリアルで作成したOXゲーム</strong>
<img src="https://storage.googleapis.com/zenn-user-upload/rpiahs1u6hsyokhettsqzwkxzone" alt="React-get-start"></p>
<p>その際に良く分からない機能を深掘りしていく事にした。</p>
<h2>render()は何をしているのか</h2>
<p>Reactには2種類のrenderメソッドがある。</p>
<h3>ReactDOM.render()</h3>
<p>誰かがReactのAPIを呼び出す文はこれだけと言っていたので、へぇーこれさえ覚えればいいのか意外に少ないなReact簡単じゃんと勘違いしました。</p>
<p>昔、このように書かれている記事を読んだ。</p>
<blockquote>
<p>React の API を露骨に呼び出しているのは最後の ReactDOM.render() だけ。しかもこれがこの記事に出てくる唯一の React の API です。</p>
</blockquote>
<p>実際にはこの後に出てくる。 <code>component</code>, <code>Props・State</code>, <code>key</code>, <code>&#x3C;button /></code>   等の概念・React組み込みのAPI、ReactでHTMLを扱う際に用いられる外部ライブラリ <code>JSX</code> などの知識が必要になってくるのでとても学習コスト高めです。</p>
<p><strong>実際の使われ方</strong></p>
<p>Reactエレメントをドキュメント（生成されるhtml等の文書）にレンダリングする役割</p>
<p>公式チュートリアルではこのように使われている。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token maybe-class-name">ReactDOM</span><span class="token punctuation">.</span><span class="token method function property-access">render</span><span class="token punctuation">(</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">Game</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>
  <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p><code>root</code> のIDをもつDOM要素（コンテナ）に <code>&#x3C;Game /></code> をレンダリングしている。</p>
<p>複数のコンポーネントを返す事が出来ないみたいだ。</p>
<p>ReactDOM.render()による</p>
<p><strong>出来ない例</strong></p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">hoge</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">fuga</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p><strong>出来る例</strong></p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">hoge</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">fuga</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>レンダリングが目的のメソッドなので、その他の処理を持たせないようにする。</p>
<h3>クラスコンポーネントで呼び出されるrender()</h3>
<p><code>React.Component</code> のサブクラスで定義する必要のある唯一のメソッドがこの <code>render()</code> になる。なので登場頻度は高めになる。</p>
<p>React.Componentの中で真っ先に呼び出されるのがrenderである。</p>
<p>Reactで画面を動かしたい時は、setStateメソッドを使用して、stateを更新する。</p>
<p>その際にrenderが自動で呼び出されるため、stateの変更差分が画面に反映される。</p>
<p>こちらも複数のコンポーネントは返す事が出来ない。</p>
<p>公式のチュートリアルに出てくる最初に気になった <code>render()</code> はこっちでクラスコンポーネントと呼ばれるクラスのメソッドとして書かれている。JSXなどで定義されたReactエレメントを返す処理を行なっている。</p>
<p>どこでrenderが実行されているんだろう?と思ってたが、Stateの値が更新されるたびに自動でrender()が走るのか。</p>
<h3>まとめ</h3>
<ul>
<li>React.DOMのrender()が実際のDOM要素にレンダリングを行なっている。</li>
<li>React.Componentのrender()はthis.propsとthis.stateを調べた後React要素などを返している。</li>
</ul>
<h2>Componentとは</h2>
<p>UIを再利用する事が出来る。</p>
<p>button.jsというのを作成して、それを <code>&#x3C;button /></code> とする事で好きな場所で呼び出せるようにする。</p>
<p>コンポーネントには大きく2種類ある。</p>
<h3>Class Component（クラスコンポーネント）</h3>
<p>props・state、lifecycleなどの状態を付与出来る。</p>
<h3>Functional Component（ファンクショナルコンポーネント）</h3>
<p>propsのみ付与可能で余計な情報は付与させない。だがHooksを用いる事でstate、lifecycleを付与出来るようになった。最近はfunctional componentを使用するのが主流らしい。</p>
<h3>実際の使用例</h3>
<p><strong>index.html</strong></p>
<div class="remark-highlight"><pre class="language-html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&#x3C;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>%PUBLIC_URL%/favicon.ico<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>theme-color<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000000<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>meta</span>
      <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span>
      <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Web site created using create-react-app<span class="token punctuation">"</span></span>
    <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>apple-touch-icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>%PUBLIC_URL%/logo192.png<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token comment">&#x3C;!--</span>
<span class="token comment">      manifest.json provides metadata used when your web app is installed on a</span>
<span class="token comment">      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/</span>
<span class="token comment">    --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>manifest<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>%PUBLIC_URL%/manifest.json<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token comment">&#x3C;!--</span>
<span class="token comment">      Notice the use of %PUBLIC_URL% in the tags above.</span>
<span class="token comment">      It will be replaced with the URL of the `public` folder during the build.</span>
<span class="token comment">      Only files inside the `public` folder can be referenced from the HTML.</span>
<span class="token comment"></span>
<span class="token comment">      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will</span>
<span class="token comment">      work correctly both with client-side routing and a non-root public URL.</span>
<span class="token comment">      Learn how to configure a non-root public URL by running `npm run build`.</span>
<span class="token comment">    --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>title</span><span class="token punctuation">></span></span>React App<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>title</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>noscript</span><span class="token punctuation">></span></span>You need to enable JavaScript to run this app.<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>noscript</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token comment">&#x3C;!--</span>
<span class="token comment">      This HTML file is a template.</span>
<span class="token comment">      If you open it directly in the browser, you will see an empty page.</span>
<span class="token comment"></span>
<span class="token comment">      You can add webfonts, meta tags, or analytics to this file.</span>
<span class="token comment">      The build step will place the bundled scripts into the &#x3C;body> tag.</span>
<span class="token comment"></span>
<span class="token comment">      To begin the development, run `npm start` or `yarn start`.</span>
<span class="token comment">      To create a production bundle, use `npm run build` or `yarn build`.</span>
<span class="token comment">    --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>html</span><span class="token punctuation">></span></span>
</code></pre></div>
<p><strong>App.js</strong></p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword module">import</span> <span class="token imports"><span class="token maybe-class-name">React</span></span> <span class="token keyword module">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>

<span class="token comment">//Appというコンポーネントを作成</span>
<span class="token keyword">const</span> <span class="token function-variable function"><span class="token maybe-class-name">App</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
	<span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">			</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">App</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">		</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span>
	<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">//読み込み出来るように記述する。</span>
<span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token maybe-class-name">App</span><span class="token punctuation">;</span>
</code></pre></div>
<p><strong>index.js</strong></p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword module">import</span> <span class="token imports"><span class="token maybe-class-name">React</span></span> <span class="token keyword module">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token maybe-class-name">ReactDOM</span></span> <span class="token keyword module">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span>

<span class="token comment">//App.jsを読み込む</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token maybe-class-name">App</span></span> <span class="token keyword module">from</span> <span class="token string">'./App'</span><span class="token punctuation">;</span>

<span class="token comment">//index.htmlの#rootのdivタグ内に&#x3C;div>&#x3C;div>App&#x3C;/div>&#x3C;/div>が追加される。</span>
<span class="token maybe-class-name">ReactDOM</span><span class="token punctuation">.</span><span class="token method function property-access">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">App</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">querySelector</span><span class="token punctuation">(</span><span class="token string">'#root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<h2>Props とは</h2>
<p>componentと合わせて使用される。親コンポーネントから子コンポーネントに値を渡す仕組み。</p>
<ul>
<li>親→子に一方向のみ</li>
<li>受け取ったpropsを子コンポーネントで書き換える事は出来ない。</li>
</ul>
<h3>なぜ使用するのか</h3>
<p>ただコンポーネントだけだとそれと全く同じ物しか作成出来ない。融通が聞かない。</p>
<p>先ほどのapp Componentの例だとAppの中身を変更したいという時に似たような構成でも再びコンポーネントを作成する必要があるのでそれを回避してコンポーネントに柔軟性を持たせるためにpropsを使用する。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function"><span class="token maybe-class-name">App</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
	<span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">			</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">App</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">		</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span>
	<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>
<p><strong>親 Component MyApp.js</strong></p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token comment">//APP.jsが2回それぞれのタイトル名で追加される。</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">App</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>My-App<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">App</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>My-App2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>

<span class="token comment">//index.htmlは下記のようになる。</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">	</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">My-App</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">	</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">My-App2</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span>
</code></pre></div>
<p>子コンポーネント App.js</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword module">import</span> <span class="token imports"><span class="token maybe-class-name">React</span></span> <span class="token keyword module">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>

<span class="token comment">//Appというコンポーネントを作成</span>
<span class="token comment">//たぶんこんな感じになってると思う。</span>
<span class="token comment">//親コンポーネントから{title:'My-App'}の中身を受け取る。それをpropsという連想配列?に渡す。</span>
<span class="token keyword">const</span> <span class="token function-variable function"><span class="token maybe-class-name">App</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
	<span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">			</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span><span class="token property-access">title</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">		</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span>
	<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">//読み込み出来るように記述する。</span>
<span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token maybe-class-name">App</span><span class="token punctuation">;</span>
</code></pre></div>
<p>これで一つのコンポーネントから別々のtitleを変更した要素を追加出来るようになった。</p>
<h2>Stateとは</h2>
<p>コンポーネント単位で状態（数値、文字列、配列）を保持するための仕組み。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Board</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">state</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token comment">//{squares: [null, null,.......]}</span>
      squares<span class="token operator">:</span> <span class="token known-class-name class-name">Array</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">fill</span><span class="token punctuation">(</span><span class="token keyword null nil">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      xIsNext<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre></div>
<p>こんな感じでコンストラクタで定義されて、使用される。</p>
<p>stateの中に連想配列で値を格納して取りさせ出せるようにしてる。少し違うのはstateの値を更新するには</p>
<p><code>this.setState()</code> に更新したい値を代入する。 <code>this.setState()</code> を通す事で、更新する処理が終わったらクラスコンポーネントのに定義された<code>render()</code> が走るようになっている。そのため更新作業が複数ある場合はそれらの処理が終了したのちに <code>render()</code> が走るためたくさん <code>render()</code> が走ることはない。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	squares<span class="token operator">:</span> squares<span class="token punctuation">,</span>
  xIsNext<span class="token operator">:</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">state</span><span class="token punctuation">.</span><span class="token property-access">xIsNext</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>最近ではStateの管理にReduxよりもHooksが使用されるのが主流になりつつある。しかし今回のチュートリアルではそれらを使用しなくても状態を管理するには十分なのでおいおいにしようと思う。</p>
<h2>Keyとは</h2>
<p>Reactで予約されたプロパティ、動的に <code>&#x3C;li></code> のようなリスト要素が作成される際に割り当てる。</p>
<p>チュートリアルには下記のように書かれています。</p>
<blockquote>
<p>Keyは、どの要素が変更、追加もしくは削除されたのかをReactが識別するのに役立ちます。配列内の項目に安定した識別性を与えるため、それぞれの項目にkeyを与えるべきです。</p>
</blockquote>
<p>Keyを使って再描画の処理を最小限に止めることが出来る。</p>
<p><strong>keyを使用しないと</strong></p>
<div class="remark-highlight"><pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>ul</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>li</span><span class="token punctuation">></span></span>cat<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>li</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>li</span><span class="token punctuation">></span></span>dog<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>li</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>li</span><span class="token punctuation">></span></span>bird<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>li</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>ul</span><span class="token punctuation">></span></span>
</code></pre></div>
<p>このような要素があって <code>&#x3C;li></code> の一番上に  <code>&#x3C;li>lion&#x3C;/li></code> を追加する。</p>
<p>この場合にデータを一つ追加しただけですが、それぞれの要素順が1つずれる。lionは0, catは0→１~ birdは2→3になる。</p>
<p>するとReactでは兄弟要素全てが再描画の対象になり無駄にリソースを消費する。</p>
<h2>最後に</h2>
<p>今の所 Python → JavaScript → React（言語ではないが） と来ていて他のReactの記事とか読もうとするとTypeScriptで書かれていたりするのでそのうちやろうと思う。
次から次へと新しい言語が出て来て少し疲れた。</p>
<p><strong>今後の課題</strong></p>
<ul>
<li>チュートリアルの最後に学んだ知識を生かして、こんな機能作ってみたらという課題があるのでそちらをやる。</li>
<li>チュートリアルのコードをTypeScriptで書き直す。</li>
</ul>
<p><strong>Githubにコメント付きでコードを残した。</strong>
<a href="https://github.com/wimpykid719/react-get-start">Reactチュートリアル（コメント付き）</a>コメントは自分がよく分からなかったコードの動作について書き残してある。</p>
<p>記事に関するコメント等は</p>
<p>🕊：<a href="https://twitter.com/Unemployed_jp">Twitter</a>
📺：<a href="https://www.youtube.com/channel/UCT3wLdiZS3Gos87f9fu4EOQ/featured?view_as=subscriber">Youtube</a>
📸：<a href="https://www.instagram.com/unemployed_jp/">Instagram</a>
👨🏻‍💻：<a href="https://github.com/wimpykid719?tab=repositories">Github</a>
😥：<a href="https://ja.stackoverflow.com/users/edit/22565">Stackoverflow</a></p>
<p>でも受け付けています。</p>
<h3>参照</h3>
<p><a href="https://qiita.com/ozaki25/items/b7cc9434e83b5e0fe59b">[React]setState実行時のrenderメソッドの動きを検証する - Qiita</a></p>
<p><a href="https://ja.reactjs.org/docs/faq-state.html">コンポーネントの state - React</a></p>
<p><a href="https://mabui.org/react-render-description/">reactのrenderは何をやっているのか？コード付きで説明します。 |</a></p>
<p><a href="https://qiita.com/tatane616/items/9808f8861586fb2b2926">ReactDOMのrender()とReact.Componentのrender()の違いを理解する - Qiita</a></p>
<p><a href="https://qiita.com/naruto/items/fdb61bc743395f8d8faf">Reactを使うとなぜjQueryが要らなくなるのか - Qiita</a></p>
<p><a href="https://ja.reactjs.org/docs/components-and-props.html">コンポーネントと props - React</a></p>
<h3>一応読んだ。</h3>
<p>タイトルはReact学習を楽にしてくれていると書いてあるが、あんまり関係ない気がする。難しそうな関数型プログラミングについて書かれているだけだった。</p>
<p><a href="https://qiita.com/terry_6518/items/4b39826d9ee76076a0a7">React学習を楽にしてくれるJavaScriptでの関数型プログラミングの基礎知識 - Qiita</a></p>
<p>stateを理解したかったが、いまいちピンとこなかった。</p>
<p><a href="https://kenjimorita.jp/imadakarawakattareact/">【Reactのstateとpropsの違いが知りたい！(変更・更新の仕方等デモあり)】過去のReact初心者の自分にpropsとstateの違いを説明する | 武骨日記</a></p>
<p><a href="https://se-tomo.com/2019/03/09/%E3%80%90react-js%E3%80%91%E3%83%AA%E3%82%B9%E3%83%88%E3%81%A8key%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/"></a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonライブラリなしでlog計算してみた。math.log()関数を自作してみた。]]></title>
        <id>https://techblog-pink.vercel.app/posts/64e08e9e839919</id>
        <link href="https://techblog-pink.vercel.app/posts/64e08e9e839919"/>
        <updated>2021-03-17T15:00:00.000Z</updated>
        <summary type="html"><![CDATA[数学の勉強でlogの計算について、四則演算で理解したいと思ったので、Pythonで math.log() を自作してみたいと思った。自分は文系で高校の頃、数学が全然出来なかった。最近になって読解力が上がったのか数学が昔より出来るようになり、楽しくなってきたの...]]></summary>
        <content type="html"><![CDATA[<h2>最初に</h2>
<p>数学の勉強でlogの計算について、四則演算で理解したいと思ったので、Pythonで <code>math.log()</code> を自作してみたいと思った。自分は文系で高校の頃、数学が全然出来なかった。最近になって読解力が上がったのか数学が昔より出来るようになり、楽しくなってきたので中学・高校数学から勉強してる。それでも現役の高校生には余裕で負けるだろう。</p>
<h2>対数関数（logのこと）</h2>
<p>指数関数 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><msup><mn>2</mn><mi>x</mi></msup></mrow><annotation encoding="application/x-tex">y = 2^x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span></span></span></span></span>という形になっており、<span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span></span>に値を入れる事で<span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span></span>が求まる式になっている。これを逆関数（yがわかってxを求めるなら）にすると <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><mi>log</mi><mo>⁡</mo><mn>2</mn><mi>y</mi></mrow><annotation encoding="application/x-tex">x=\log2y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span></span>となる。<span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span></span>が真数と呼ばれるものでここに8を入れると底と呼ばれる2を何乗すると8になるかという式になる。<span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span></span>は3という事がわかる。</p>
<p>これくらいなら8を2で割り続けて、何回割る事が出来るかで暗算出来るが真数が4096とか膨大になると大変になる。</p>
<h2>math.log(a, b)</h2>
<p><strong>ライブラリ使用する場合</strong></p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">import</span> math

<span class="token keyword">print</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 実行結果</span>
<span class="token number">2.0</span>
</code></pre></div>
<p><strong>ライブラリ使用しない場合</strong></p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">myLog2</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> x <span class="token operator">&#x3C;</span> b<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">0</span>  
    <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> myLog2<span class="token punctuation">(</span>x<span class="token operator">/</span>b<span class="token punctuation">,</span> b<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>myLog2<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 実行結果</span>
<span class="token number">2</span>
</code></pre></div>
<p>真数を底で割って、何回割れるかを数えている。</p>
<p>これがシンプルで一番分かりやすい。</p>
<h2>別のやり方</h2>
<p>ほんとはpythonに組み込まれた <code>math.log()</code> のソースコードを見れば良いのだが、そのコードの中で別の関数が使用されていたり読むの大変そうだったので諦めてしまった。</p>
<p><a href="https://docs.python.org/2/library/math.html#math.log">公式のドキュメント</a>には <code>log(x)/log(base)</code> で求めていると書かれている。</p>
<p>※このbaseが何を指しているか分からない。（to base e)と書かれているが、ネイピア数の事を指しているのか?</p>
<p>ご存知の方はコメント欄で教えて下さい、お願いします。</p>
<blockquote>
<p>With one argument, return the natural logarithm of x (to base e).</p>
</blockquote>
<p>With two arguments, return the logarithm of x to the given base, calculated as log(x)/log(base).
Changed in version 2.3: base argument added.</p>
<p>底の変換公式に似ているから勝手にそれだと思った。</p>
<div class="math math-display"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mo><mi>log</mi><mo>⁡</mo></mo><mi>a</mi></msub><mi>b</mi><mo>=</mo><mfrac><mrow><msub><mo><mi>log</mi><mo>⁡</mo></mo><mi>c</mi></msub><mi>b</mi></mrow><mrow><msub><mo><mi>log</mi><mo>⁡</mo></mo><mi>c</mi></msub><mi>a</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\log_a{b} = \frac{\log_c{b}}{\log_c{a}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.93858em;vertical-align:-0.24414em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.057252em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">b</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.30158em;vertical-align:-0.9301400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.3139999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.057252em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.6769999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.057252em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9301400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></div>
<p><strong>log(x)を求める数式</strong></p>
<p><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ln</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>n</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></msub><mi>n</mi><mo stretchy="false">(</mo><msup><mi>x</mi><mfrac><mn>1</mn><mi>n</mi></mfrac></msup><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\ln(x) = \lim_{n \to \infty} n(x^{\frac{1}{n}} -1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">ln</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.20402em;vertical-align:-0.25em;"></span><span class="mop"><span class="mop">lim</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9540200000000001em;"><span style="top:-3.363em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8443142857142858em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p>
<p><strong>Pythonコードにすると</strong></p>
<p>極限なのでnの値を大きくすればするほど、より正確な値になると思う。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">ln</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    n <span class="token operator">=</span> <span class="token number">1000.0</span>
    <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">**</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
</code></pre></div>
<p><strong>底の変換公式をPythonコードにすると</strong></p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">ln</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    n <span class="token operator">=</span> <span class="token number">1000.0</span>
    <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">**</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">mylog</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">:</span>
    x <span class="token operator">=</span> ln<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token operator">/</span>ln<span class="token punctuation">(</span>a<span class="token punctuation">)</span>
    <span class="token keyword">return</span> x

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span>mylog<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">#実行結果</span>
<span class="token number">12</span>
</code></pre></div>
<p>この際のcがどれに当たるか分からないが、これでa, bが整数の場合はlogの値を計算出来るようになった。</p>
<h2>最後に</h2>
<p>少し最後は雑になってしまったが、もし数学が得意な方でこの記事を読んで下さっていたら <strong>base</strong> が何なのかと <em>c</em> がどこに行ってしまったか教えてくださると嬉しいです。</p>
<p>記事を読んで、数学得意な方広めて下さると幸いです。</p>
<p>大したコードではないですが、Githubにも<a href="https://github.com/wimpykid719/pyLogrithm">コード</a>を置いておきます。</p>
<p>記事に関するコメント等は</p>
<p>🕊：<a href="https://twitter.com/Unemployed_jp">Twitter</a>
📺：<a href="https://www.youtube.com/channel/UCT3wLdiZS3Gos87f9fu4EOQ/featured?view_as=subscriber">Youtube</a>
📸：<a href="https://www.instagram.com/unemployed_jp/">Instagram</a>
👨🏻‍💻：<a href="https://github.com/wimpykid719?tab=repositories">Github</a>
😥：<a href="https://ja.stackoverflow.com/users/edit/22565">Stackoverflow</a></p>
<p>でも受け付けています。</p>
<h3>参照</h3>
<p><a href="https://stackoverflow.com/questions/13211137/get-logarithm-without-math-log-python">Get logarithm without math log python</a></p>
<p><a href="https://stackoverflow.com/questions/33754670/calculate-logarithm-in-python/33754706">Calculate logarithm in python</a></p>
<p><a href="https://sci-pursuit.com/math/logarithm-formulae-and-calculation.html">対数 log の公式と計算</a></p>
<p><a href="https://note.nkmk.me/python-math-exp-log/">Pythonで指数関数・対数関数を計算（exp, log, log10, log2） | note.nkmk.me</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2021個人的に最強だと思うPythonの環境構築]]></title>
        <id>https://techblog-pink.vercel.app/posts/cc111706c3167c</id>
        <link href="https://techblog-pink.vercel.app/posts/cc111706c3167c"/>
        <updated>2021-03-09T15:00:00.000Z</updated>
        <summary type="html"><![CDATA[...]]></summary>
        <content type="html"><![CDATA[<h2>最初に</h2>
<p>タイトルでだいぶハードルをあげてしまった気がしますが、どうか暖かい目で見てくださると幸いです。
Pythonの環境自分だったらこんな感じの構成にしてます。</p>
<p>という事です。</p>
<p>他にも環境構築の仕方は色々あると思うので、「こんな方法もあるよ」など教えて頂けると嬉しいです。</p>
<p>昔は「エラー」が出るとどうしてそうなったのか調べて分からないまま何日も過ごしてしまい。結局、スタックオーバーフロー等のコミュニティに助けを求めてました。</p>
<p>そこで解決すればいいのですが、中には環境依存だったり、何かの拍子でインストールしたパッケージと組み合わせが悪かったり、全てのエラーを潰していくにはシステム内部に精通してないとても時間がかかりそうな物もあったりします。</p>
<p>最近はそんなマニアックなエラーを調べるくらいなら、いっそ環境を壊して新しく作り直してまっさらな状態にして、それでもエラーが出るなら調べようスタンスでやって行こうと思ってます。</p>
<p>よく使用するPythonの環境が壊れても直ぐに新しく作り直せるように、普段使ってる環境構築の手順をまとめたものになります。</p>
<h2>anaconda</h2>
<p>個人的にはこれが好きで使ってます。condaコマンドとpipコマンドを共存させると環境が壊れる等、何かとソフトウェアごと壊滅的に環境が壊れやすいイメージですが、自身の環境では壊れる事なく動作してるので気に入って使用しています。</p>
<p>ubuntu18.04（vagrant）、MacOS HighSierraの両方にインストールして使っています。</p>
<h3>構成</h3>
<p><img src="https://storage.googleapis.com/zenn-user-upload/wqdfv77b3ni1ribn6m5gsovshb1d" alt="anaconda構成"></p>
<p>環境構築の仕方としては仮装環境それぞれに独立したPythonをインストールして、そこに同梱されているpipを通してライブラリをインストールする。ライブラリ等も環境ごとにきっちり別ける事が出来ます。</p>
<p>ライブラリのインストールに <code>conda install</code> は使用しない。</p>
<p>これだとライブラリどうしの衝突等なく環境が壊れにくいです。</p>
<p>この構成とてもいいと思うんだけど、使っている人あんまりいないからなんでかなと思う。rootにインストールされているライブラリーを使用しないのが無駄に容量喰っていて無駄な気はする。</p>
<h3>インストール方法</h3>
<p><strong>パッケージ</strong></p>
<p>Macの場合、公式サイトからパッケージをダウンロードしてインストール手順にしたがっていけば無事に使用出来ます。PATHの設定もしてくれるのでターミナルで直ぐに <code>conda</code> コマンドが使用出来ます。</p>
<p><strong>コマンドライン</strong></p>
<p><a href="https://www.anaconda.com/products/individual">公式サイト</a>の一番下部にある <code>64-Bit Command Line Installer (428 MB)</code> をクリックして、ダウンロードする。</p>
<p>ダウンロードが終わったら、安全のためファイルが改ざんされてないか調べるためにハッシュ値を計算する。（インストールする上では絶対必要な作業ではない。）</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">hasum -a <span class="token number">256</span> ダウンロードしたファイル名.sh
</code></pre></div>
<p>出力された値を<a href="https://docs.anaconda.com/anaconda/install/hashes/mac-3-cli/">公式サイト</a>でダウンロードしたバージョンと同じか確認する。</p>
<p>確認出来たら、下記のコマンドでファイルを実行する。あとは手順に従う。</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash"><span class="token function">bash</span> ダウンロードしたファイル名.sh
</code></pre></div>
<p>Ubuntuの場合、自分はVagrantで環境を作っているのでMacコマンドラインと同様の方法でインストールします。</p>
<p>ファイルをダウンロードして</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash"><span class="token function">bash</span> ダウンロードしたファイル名.sh
</code></pre></div>
<p>を実行する。</p>
<p>PATHが自動で設定されない事がなるので</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">conda -V
</code></pre></div>
<p>でバージョンが出力されない場合は、.bash_profileをなければ作成して</p>
<p><code>export PATH=**~**/anaconda3/bin:$PATH</code> と記述して保存する。</p>
<p>編集したファイルの更新をする事で</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/.bash_profile
</code></pre></div>
<p>PATHが通りでcondaコマンドの使用できるようになる。</p>
<h3>仮装環境</h3>
<p>ここからはcondaコマンドを用いて、実際に仮装環境を作成していく。</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">conda create -n 環境名 python
</code></pre></div>
<p>これで仮装環境ごとにPython・pipがインストールされた構成になる。 <code>python=3.7</code> 等でバージョンを指定してインストールする事ができる。この <code>python</code> の指定を忘れるとルートのPython・pipを使用することになるので注意が必要。</p>
<p>自分が今どこのPythonを使用しているか知りたい時は</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash"><span class="token function">which</span> python
</code></pre></div>
<p>と入力する。</p>
<p>rootのPythonを参照している場合</p>
<p><code>ここは各々の環境で異なる/anaconda3/bin/python</code></p>
<p>仮装環境内のPythonを使用している場合</p>
<p><code>ここは各々の環境で異なる/anaconda3/envs/仮装環境1/bin/python</code></p>
<p>後者の状態でpipを使用してライブラリをインストールすると個別の環境が作れる。</p>
<p>これでPythonの環境が完成した。あとは好きに開発を始める。</p>
<h3>よく使用するコマンド各種</h3>
<p>いらなくなった仮装環境等を削除する方法を記述していく。</p>
<p>作成した仮装環境一覧</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">conda info -e
</code></pre></div>
<p>仮装環境内に入る。（PATHに切り替える。）</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash"><span class="token builtin class-name">source</span> activate 環境名
</code></pre></div>
<p>確か <code>conda activate 環境名</code> でも入れるんだけど <code>source</code> を使用してる。推奨は <code>canda</code> の方だった気がする。</p>
<p>仮装環境内でライブラリ何がインストールされているか確認するのに使う。</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">pip freeze
</code></pre></div>
<p>これでpipインストールの一覧をテキストに書き出して</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">pip freeze <span class="token operator">></span> requirements.txt
</code></pre></div>
<p>新しい環境にまとめてインストールすれば直ぐにライブラリのインストールができる。</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">pip <span class="token function">install</span> -r requirements.txt
</code></pre></div>
<p>ただこれでまとめてインストールするといつもどこかでエラーが出て結果手打ちになるのであんま機能的でない。</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">pip uinstall -r requirements.txt
</code></pre></div>
<p>こうすればインストールしたライブラリ一覧を削除するのにも使える。ただインストール時にtxtに書かれていないライブラリもインストールされる事があるので、それらは削除されない。結果あんま機能的でない。</p>
<p>仮装環境から抜ける。</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">conda deactivate
</code></pre></div>
<p>仮装環境の削除</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">conda remove -n 環境名 --all
</code></pre></div>
<p>自分の環境だけかもしれないが仮装環境を作成する際にPythonをインストールせずrootのPythonを使用している仮装環境の場合これで削除しようとすると下記のようなエラーになる。</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">WARNING: The conda.compat module is deprecated and will be removed <span class="token keyword">in</span> a future release.

Remove all packages <span class="token keyword">in</span> environment /home/vagrant/anaconda3/envs/pyengine:

PackagesNotFoundError: The following packages are missing from the target environment:
  -
</code></pre></div>
<p>その場合は <code>conda info -e</code>  で仮装環境のパスを調べて <code>rm -rf /home/vagrant/anaconda3/envs/仮装環境1</code> で直接フォルダを削除する。その後、 <code>conda info -e</code> で削除されているのが確認できればいいと思う。もしかしたら仮装環境に切り替えるPATH設定があってそこに残るかもしれないが、それが存在するのかよく分からないしあっても容量は取らないから無視する。</p>
<h3>たまに使う</h3>
<p>conda社のレポジトリからライブラリーをダウンロードする。基本的には使わない。</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">condo <span class="token function">install</span> ライブラリー名 複数の場合は空白を入れてライブラリー名
</code></pre></div>
<p>node.jsをインストールして環境も作れちゃう。これで今環境構築して、Reactの勉強（チュートリアル）してる。</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">conda <span class="token function">install</span> -c conda-forge nodejs
</code></pre></div>
<p>conda-forgeはデフォルトのcondaインストールでアクセスする場所とは別の場所である。</p>
<p>オプション -cがチャンネル先を変更すると言う意味</p>
<p>インストールされたライブラリー確認</p>
<p>仮想環境下で実行すれば、仮想環境内でのインストールされたパッケージを確認できる。</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">conda list
</code></pre></div>
<h2>公式のパッケージからシステムに直でインストールする。（Mac）</h2>
<p>公式から<a href="https://www.python.org/downloads/mac-osx/">パッケージ</a>をダウンロードして後は手順に従ってインストールする。</p>
<p>これもmacに元々入っているpythonと競合する事なくインストールされる。anacondaはpipからダウンロードしたライブラリとパスの関係等で相性が悪い場合がある。特にPythonスクリプトをexe・app形式に変換する。 cx_freezeと相性悪いのでこのライブラリを使用したい場合は公式のパッケージからインストールした方が無難だと思う。Python自体に仮装環境を作る <del><code>venv</code></del> <code>pyvenv</code> という物があるらしいが、Pythonの3.6から非推奨になった。公式のツールだとPython3.5から推奨されている <code>venv</code> を使用する。あとサードパーティ製ので <code>virtualenv</code> がある。2つとも上手く環境を分けれなかったのか使いずらかったかの理由で使ってない。</p>
<h2>最後に</h2>
<p>他にもこんな環境構築の仕方があるよ、ここは少しこうした方がもっと効率いいんじゃない等教えて頂けると嬉しいです。いまさらですが、dockerを使えるようになろうと勉強しているのですが、dockerを使えばこんな感じに仮装環境作らなくてもいいのではと考えたりしてます。</p>
<p>imageで一発で環境が作れるのをみてしまうと毎回pathを通したり、pipインストールしたりが無駄に見えてしまいます。</p>
<p>記事に関するコメント等は</p>
<p>🕊：<a href="https://twitter.com/Unemployed_jp">Twitter</a>
📺：<a href="https://www.youtube.com/channel/UCT3wLdiZS3Gos87f9fu4EOQ/featured?view_as=subscriber">Youtube</a>
📸：<a href="https://www.instagram.com/unemployed_jp/">Instagram</a>
👨🏻‍💻：<a href="https://github.com/wimpykid719?tab=repositories">Github</a>
😥：<a href="https://ja.stackoverflow.com/users/edit/22565">Stackoverflow</a></p>
<p>でも受け付けています。どこかにはいます。</p>
<h3>参照</h3>
<p><a href="https://note.nkmk.me/python-pip-install-requirements/">Python, pipでrequirements.txtを使ってパッケージ一括インストール | note.nkmk.me</a></p>
<p><a href="https://qiita.com/pkaiky/items/df62de4ce6ea956d7a8c">Anacondaの仮想環境の削除で手間取った話 - Qiita</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[無職が丁寧にubuntu18.04にMongoDBをインストールしたら起動させるのに一日かかった。（コマンドの意味詳細まで調べた。）]]></title>
        <id>https://techblog-pink.vercel.app/posts/4eadf5b38cde2f</id>
        <link href="https://techblog-pink.vercel.app/posts/4eadf5b38cde2f"/>
        <updated>2021-03-08T15:00:00.000Z</updated>
        <summary type="html"><![CDATA[...]]></summary>
        <content type="html"><![CDATA[<h2>最初に</h2>
<p>大学の卒業制作で作成した検索エンジンを今の自分のパソコンで動かして見たくなったので、vagrantで作成したubuntu18.04の環境にmongodbをインストールしていこうと思う。</p>
<h2>環境</h2>
<ul>
<li>ubuntu18.04 (vagrant)</li>
</ul>
<h2>インストール手順</h2>
<p>wegetでmongodbの公式サイトから認証キーを取得して、apt-key</p>
<ul>
<li>
<p>-q：コマンドの処理過程を出力しない。</p>
</li>
<li>
<p>-O ファイル名：ダウンロードしたファイルの保存先を指定する ファイル名の場所が <code>-</code> とするとファイルを保存せず標準出力になる。今回の場合 <code>server-4.4.asc</code> という引数が渡される。</p>
</li>
<li>
<p>apt-key add ファイル名でダウンロードした認証キーを信頼キーのリストに追加する。ファイル名の部分が <code>-</code> の場合は標準入力になる。今回の場合 <code>server-4.4.asc</code> が引数で受け取られる。これはもちろんただの文字列ではなくファイルとして生成されていないが、参照すると認証キーを受け取れる。</p>
</li>
<li>
<p><code>-</code> この標準入出力を使用する事でファイルを生成せずに、値を受け渡す事が出来る。</p>
</li>
<li>
<p><code>|</code> はパイプラインと呼ばれ別々のコマンドを繋げている。今回の場合は左側の <code>-O -</code>  で標準出力にして右側で <code>add -</code> で標準入力で出力された <code>server-4.4.asc</code> を受け取っている。</p>
</li>
</ul>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash"><span class="token function">wget</span> -qO - https://www.mongodb.org/static/pgp/server-4.4.asc <span class="token operator">|</span> <span class="token function">sudo</span> apt-key <span class="token function">add</span> -
</code></pre></div>
<p>上手く行くと、出力結果にokと表示される。</p>
<p>次に下記のコマンドを実行する。</p>
<ul>
<li>echoで""囲った文字列を標準出力する。</li>
<li>teeコマンドを使って標準出力をファイルに書き込むと同時にコンソール画面にも出力して確認出来るようにする。</li>
<li>実行するとechoの内容 <code>deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.4 multiverse</code> が <code>/etc/apt/sources.list.d/mongodb-org-4.4.list</code>  に書き込まれると同時にターミナルに出力される。</li>
</ul>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.4 multiverse"</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/apt/sources.list.d/mongodb-org-4.4.list
</code></pre></div>
<p>aptの更新をする。</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update
</code></pre></div>
<p>エラーが発生した。google-chromeの32bitバージョンのサポートが打ち切られて、リポジトリにアクセス出来なくなっているために起きていたので、 <code>google-chrome.list</code> のサーバ先をコメントアウトしてアクセス出来ないようにした。 <code>.list</code> の拡張形式のファイルは先頭に <code>#</code> を付ける事でコメントアウトになる。</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">W: Target Packages <span class="token punctuation">(</span>main/binary-amd64/Packages<span class="token punctuation">)</span> is configured multiple <span class="token builtin class-name">times</span> <span class="token keyword">in</span> /etc/apt/sources.list.d/google-chrome.list:3 and /etc/apt/sources.list.d/google.list:1
W: Target Packages <span class="token punctuation">(</span>main/binary-all/Packages<span class="token punctuation">)</span> is configured multiple <span class="token builtin class-name">times</span> <span class="token keyword">in</span> /etc/apt/sources.list.d/google-chrome.list:3 and /etc/apt/sources.list.d/google.list:1
W: Target Translations <span class="token punctuation">(</span>main/i18n/Translation-en<span class="token punctuation">)</span> is configured multiple <span class="token builtin class-name">times</span> <span class="token keyword">in</span> /etc/apt/sources.list.d/google-chrome.list:3 and /etc/apt/sources.list.d/google.list:1
W: Target CNF <span class="token punctuation">(</span>main/cnf/Commands-amd64<span class="token punctuation">)</span> is configured multiple <span class="token builtin class-name">times</span> <span class="token keyword">in</span> /etc/apt/sources.list.d/google-chrome.list:3 and /etc/apt/sources.list.d/google.list:1
W: Target CNF <span class="token punctuation">(</span>main/cnf/Commands-all<span class="token punctuation">)</span> is configured multiple <span class="token builtin class-name">times</span> <span class="token keyword">in</span> /etc/apt/sources.list.d/google-chrome.list:3 and /etc/apt/sources.list.d/google.list:1
W: Target Packages <span class="token punctuation">(</span>main/binary-amd64/Packages<span class="token punctuation">)</span> is configured multiple <span class="token builtin class-name">times</span> <span class="token keyword">in</span> /etc/apt/sources.list.d/google-chrome.list:3 and /etc/apt/sources.list.d/google.list:1
W: Target Packages <span class="token punctuation">(</span>main/binary-all/Packages<span class="token punctuation">)</span> is configured multiple <span class="token builtin class-name">times</span> <span class="token keyword">in</span> /etc/apt/sources.list.d/google-chrome.list:3 and /etc/apt/sources.list.d/google.list:1
W: Target Translations <span class="token punctuation">(</span>main/i18n/Translation-en<span class="token punctuation">)</span> is configured multiple <span class="token builtin class-name">times</span> <span class="token keyword">in</span> /etc/apt/sources.list.d/google-chrome.list:3 and /etc/apt/sources.list.d/google.list:1
W: Target CNF <span class="token punctuation">(</span>main/cnf/Commands-amd64<span class="token punctuation">)</span> is configured multiple <span class="token builtin class-name">times</span> <span class="token keyword">in</span> /etc/apt/sources.list.d/google-chrome.list:3 and /etc/apt/sources.list.d/google.list:1
W: Target CNF <span class="token punctuation">(</span>main/cnf/Commands-all<span class="token punctuation">)</span> is configured multiple <span class="token builtin class-name">times</span> <span class="token keyword">in</span> /etc/apt/sources.list.d/google-chrome.list:3 and /etc/apt/sources.list.d/google.list:1
</code></pre></div>
<p>やっとこれでmongodbをインストール出来ると思い下記のコードを実行する。</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> -y mongodb-org
</code></pre></div>
<p>エラーが起きる。</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">E: dpkg was interrupted, you must manually run <span class="token string">'sudo dpkg --configure -a'</span> to correct the problem.
</code></pre></div>
<p>実行しろみたいに書かれているので実行した。</p>
<ul>
<li>Debian Packageの略が名前の由来で「deb」ファイルを取り扱うコマンド</li>
<li>debはdebianのパッケージである。</li>
<li>展開済だが未設定のパッケージを設定する。package の代わりに -a もしくは --pending を指定した場合は、展開済だが未設定のパッケージすべてを設定する。</li>
</ul>
<p>「展開済みだが未設定のパッケージ」がなぜ出来ていたのか不明である。上記の文の意味が今の知識量では何を言っているのか分からない。</p>
<p>だがとりあえず、これを実行する事でインストール出来るようになった。</p>
<p>※どなたかご存知でしたら教えて下さい。</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash"><span class="token function">sudo</span> dpkg --configure -a
</code></pre></div>
<p>実行結果</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">Setting up linux-image-4.15.0-109-generic <span class="token punctuation">(</span><span class="token number">4.15</span>.0-109.110<span class="token punctuation">)</span> <span class="token punctuation">..</span>.
depmod: ERROR: failed to load symbols from /lib/modules/4.15.0-109-generic/misc/vboxvideo.ko: Invalid argument
Processing triggers <span class="token keyword">for</span> linux-image-4.15.0-109-generic <span class="token punctuation">(</span><span class="token number">4.15</span>.0-109.110<span class="token punctuation">)</span> <span class="token punctuation">..</span>.
/etc/kernel/postinst.d/initramfs-tools:
update-initramfs: Generating /boot/initrd.img-4.15.0-109-generic
modinfo: ERROR: could not get modinfo from <span class="token string">'vboxvideo'</span><span class="token builtin class-name">:</span> Invalid argument
depmod: ERROR: failed to load symbols from /var/tmp/mkinitramfs_AkT88d/lib/modules/4.15.0-109-generic/misc/vboxvideo.ko: Invalid argument
/etc/kernel/postinst.d/x-grub-legacy-ec2:
Searching <span class="token keyword">for</span> GRUB installation directory <span class="token punctuation">..</span>. found: /boot/grub
Searching <span class="token keyword">for</span> default <span class="token function">file</span> <span class="token punctuation">..</span>. found: /boot/grub/default
Testing <span class="token keyword">for</span> an existing GRUB menu.lst <span class="token function">file</span> <span class="token punctuation">..</span>. found: /boot/grub/menu.lst
Searching <span class="token keyword">for</span> splash image <span class="token punctuation">..</span>. none found, skipping <span class="token punctuation">..</span>.
Found kernel: /boot/vmlinuz-4.15.0-108-generic
Found kernel: /boot/vmlinuz-4.15.0-106-generic
Found kernel: /boot/vmlinuz-4.15.0-109-generic
Found kernel: /boot/vmlinuz-4.15.0-108-generic
Found kernel: /boot/vmlinuz-4.15.0-106-generic
Replacing config <span class="token function">file</span> /run/grub/menu.lst with new version
Updating /boot/grub/menu.lst <span class="token punctuation">..</span>. <span class="token keyword">done</span>

/etc/kernel/postinst.d/zz-update-grub:
Sourcing <span class="token function">file</span> <span class="token variable"><span class="token variable">`</span>/etc/default/grub'
Sourcing <span class="token function">file</span> <span class="token variable">`</span></span>/etc/default/grub.d/50-cloudimg-settings.cfg'
Generating grub configuration <span class="token function">file</span> <span class="token punctuation">..</span>.
Found linux image: /boot/vmlinuz-4.15.0-109-generic
Found initrd image: /boot/initrd.img-4.15.0-109-generic
Found linux image: /boot/vmlinuz-4.15.0-108-generic
Found initrd image: /boot/initrd.img-4.15.0-108-generic
Found linux image: /boot/vmlinuz-4.15.0-106-generic
Found initrd image: /boot/initrd.img-4.15.0-106-generic
<span class="token keyword">done</span>
</code></pre></div>
<p>その後再び</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> -y mongodb-org
</code></pre></div>
<p>実行結果</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">Reading package lists<span class="token punctuation">..</span>. Done
Building dependency tree       
Reading state information<span class="token punctuation">..</span>. Done
The following packages were automatically installed and are no longer required:
  dh-python libexpat1-dev libllvm8 libpython-all-dev libpython-dev libpython2.7 libpython2.7-dev libpython3-dev libpython3.6-dev linux-headers-4.15.0-106
  linux-headers-4.15.0-106-generic linux-image-4.15.0-106-generic linux-modules-4.15.0-106-generic python-all python-all-dev python-asn1crypto python-cffi-backend python-crypto
  python-cryptography python-dbus python-dev python-enum34 python-gi python-idna python-ipaddress python-keyring python-keyrings.alt python-pip-whl python-pkg-resources
  python-secretstorage python-setuptools python-six python-wheel python-xdg python2.7-dev python3-dev python3-keyring python3-keyrings.alt python3-secretstorage python3-wheel
  python3-xdg python3.6-dev
Use <span class="token string">'sudo apt autoremove'</span> to remove them.
The following additional packages will be installed:
  mongodb-database-tools mongodb-org-database-tools-extra mongodb-org-mongos mongodb-org-server mongodb-org-shell mongodb-org-tools
The following NEW packages will be installed:
  mongodb-database-tools mongodb-org mongodb-org-database-tools-extra mongodb-org-mongos mongodb-org-server mongodb-org-shell mongodb-org-tools
<span class="token number">0</span> upgraded, <span class="token number">7</span> newly installed, <span class="token number">0</span> to remove and <span class="token number">226</span> not upgraded.
Need to get <span class="token number">102</span> MB of archives.
After this operation, <span class="token number">200</span> MB of additional disk space will be used.
Get:1 https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.4/multiverse amd64 mongodb-database-tools amd64 <span class="token number">100.3</span>.0-1-g8b223b0a <span class="token punctuation">[</span><span class="token number">52.8</span> MB<span class="token punctuation">]</span>
Get:2 https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.4/multiverse amd64 mongodb-org-shell amd64 <span class="token number">4.4</span>.4 <span class="token punctuation">[</span><span class="token number">13.2</span> MB<span class="token punctuation">]</span>
Get:3 https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.4/multiverse amd64 mongodb-org-server amd64 <span class="token number">4.4</span>.4 <span class="token punctuation">[</span><span class="token number">20.4</span> MB<span class="token punctuation">]</span>
Get:4 https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.4/multiverse amd64 mongodb-org-mongos amd64 <span class="token number">4.4</span>.4 <span class="token punctuation">[</span><span class="token number">15.8</span> MB<span class="token punctuation">]</span>
Get:5 https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.4/multiverse amd64 mongodb-org-database-tools-extra amd64 <span class="token number">4.4</span>.4 <span class="token punctuation">[</span><span class="token number">5628</span> B<span class="token punctuation">]</span>
Get:6 https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.4/multiverse amd64 mongodb-org-tools amd64 <span class="token number">4.4</span>.4 <span class="token punctuation">[</span><span class="token number">2888</span> B<span class="token punctuation">]</span>
Get:7 https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.4/multiverse amd64 mongodb-org amd64 <span class="token number">4.4</span>.4 <span class="token punctuation">[</span><span class="token number">3516</span> B<span class="token punctuation">]</span>
Fetched <span class="token number">102</span> MB <span class="token keyword">in</span> 6s <span class="token punctuation">(</span><span class="token number">16.5</span> MB/s<span class="token punctuation">)</span>                                                                                                                                                  
Selecting previously unselected package mongodb-database-tools.
<span class="token punctuation">(</span>Reading database <span class="token punctuation">..</span>. <span class="token number">189860</span> files and directories currently installed.<span class="token punctuation">)</span>
Preparing to unpack <span class="token punctuation">..</span>./0-mongodb-database-tools_100.3.0-1-g8b223b0a_amd64.deb <span class="token punctuation">..</span>.
Unpacking mongodb-database-tools <span class="token punctuation">(</span><span class="token number">100.3</span>.0-1-g8b223b0a<span class="token punctuation">)</span> <span class="token punctuation">..</span>.
Selecting previously unselected package mongodb-org-shell.
Preparing to unpack <span class="token punctuation">..</span>./1-mongodb-org-shell_4.4.4_amd64.deb <span class="token punctuation">..</span>.
Unpacking mongodb-org-shell <span class="token punctuation">(</span><span class="token number">4.4</span>.4<span class="token punctuation">)</span> <span class="token punctuation">..</span>.
Selecting previously unselected package mongodb-org-server.
Preparing to unpack <span class="token punctuation">..</span>./2-mongodb-org-server_4.4.4_amd64.deb <span class="token punctuation">..</span>.
Unpacking mongodb-org-server <span class="token punctuation">(</span><span class="token number">4.4</span>.4<span class="token punctuation">)</span> <span class="token punctuation">..</span>.
Selecting previously unselected package mongodb-org-mongos.
Preparing to unpack <span class="token punctuation">..</span>./3-mongodb-org-mongos_4.4.4_amd64.deb <span class="token punctuation">..</span>.
Unpacking mongodb-org-mongos <span class="token punctuation">(</span><span class="token number">4.4</span>.4<span class="token punctuation">)</span> <span class="token punctuation">..</span>.
Selecting previously unselected package mongodb-org-database-tools-extra.
Preparing to unpack <span class="token punctuation">..</span>./4-mongodb-org-database-tools-extra_4.4.4_amd64.deb <span class="token punctuation">..</span>.
Unpacking mongodb-org-database-tools-extra <span class="token punctuation">(</span><span class="token number">4.4</span>.4<span class="token punctuation">)</span> <span class="token punctuation">..</span>.
Selecting previously unselected package mongodb-org-tools.
Preparing to unpack <span class="token punctuation">..</span>./5-mongodb-org-tools_4.4.4_amd64.deb <span class="token punctuation">..</span>.
Unpacking mongodb-org-tools <span class="token punctuation">(</span><span class="token number">4.4</span>.4<span class="token punctuation">)</span> <span class="token punctuation">..</span>.
Selecting previously unselected package mongodb-org.
Preparing to unpack <span class="token punctuation">..</span>./6-mongodb-org_4.4.4_amd64.deb <span class="token punctuation">..</span>.
Unpacking mongodb-org <span class="token punctuation">(</span><span class="token number">4.4</span>.4<span class="token punctuation">)</span> <span class="token punctuation">..</span>.
Setting up mongodb-org-shell <span class="token punctuation">(</span><span class="token number">4.4</span>.4<span class="token punctuation">)</span> <span class="token punctuation">..</span>.
Setting up mongodb-org-database-tools-extra <span class="token punctuation">(</span><span class="token number">4.4</span>.4<span class="token punctuation">)</span> <span class="token punctuation">..</span>.
Setting up mongodb-database-tools <span class="token punctuation">(</span><span class="token number">100.3</span>.0-1-g8b223b0a<span class="token punctuation">)</span> <span class="token punctuation">..</span>.
Setting up mongodb-org-mongos <span class="token punctuation">(</span><span class="token number">4.4</span>.4<span class="token punctuation">)</span> <span class="token punctuation">..</span>.
Processing triggers <span class="token keyword">for</span> man-db <span class="token punctuation">(</span><span class="token number">2.8</span>.3-2ubuntu0.1<span class="token punctuation">)</span> <span class="token punctuation">..</span>.
Setting up mongodb-org-tools <span class="token punctuation">(</span><span class="token number">4.4</span>.4<span class="token punctuation">)</span> <span class="token punctuation">..</span>.
Setting up mongodb-org-server <span class="token punctuation">(</span><span class="token number">4.4</span>.4<span class="token punctuation">)</span> <span class="token punctuation">..</span>.
Adding system user <span class="token variable"><span class="token variable">`</span>mongodb' <span class="token punctuation">(</span><span class="token environment constant">UID</span> <span class="token number">111</span><span class="token punctuation">)</span> <span class="token punctuation">..</span>.
Adding new user <span class="token variable">`</span></span>mongodb<span class="token string">' (UID 111) with group `nogroup'</span> <span class="token punctuation">..</span>.
Not creating home directory <span class="token variable"><span class="token variable">`</span>/home/mongodb'.
Adding group <span class="token variable">`</span></span>mongodb<span class="token string">' (GID 115) ...</span>
<span class="token string">Done.</span>
<span class="token string">Adding user `mongodb'</span> to group `mongodb' <span class="token punctuation">..</span>.
Adding user mongodb to group mongodb
Done.
Setting up mongodb-org <span class="token punctuation">(</span><span class="token number">4.4</span>.4<span class="token punctuation">)</span> <span class="token punctuation">..</span>.
</code></pre></div>
<p>インストール後にバージョンを確認するコマンドを実行する。</p>
<p>無事に <code>db version v4.4.4</code> と出力されインストールされたと考える。</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">mongod --version
</code></pre></div>
<h2>起動</h2>
<p>過去の記憶によると</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">mongod
</code></pre></div>
<p>これで起動するはず。</p>
<p>出力結果</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash"><span class="token punctuation">{</span><span class="token string">"t"</span>:<span class="token punctuation">{</span><span class="token string">"<span class="token variable">$date</span>"</span><span class="token builtin class-name">:</span><span class="token string">"2021-03-09T07:50:33.535+00:00"</span><span class="token punctuation">}</span>,<span class="token string">"s"</span><span class="token builtin class-name">:</span><span class="token string">"I"</span>,  <span class="token string">"c"</span><span class="token builtin class-name">:</span><span class="token string">"CONTROL"</span>,  <span class="token string">"id"</span>:23285,   <span class="token string">"ctx"</span><span class="token builtin class-name">:</span><span class="token string">"main"</span>,<span class="token string">"msg"</span><span class="token builtin class-name">:</span><span class="token string">"Automatically disabling TLS 1.0, to force-enable TLS 1.0 specify --sslDisabledProtocols 'none'"</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token string">"t"</span>:<span class="token punctuation">{</span><span class="token string">"<span class="token variable">$date</span>"</span><span class="token builtin class-name">:</span><span class="token string">"2021-03-09T07:50:33.540+00:00"</span><span class="token punctuation">}</span>,<span class="token string">"s"</span><span class="token builtin class-name">:</span><span class="token string">"W"</span>,  <span class="token string">"c"</span><span class="token builtin class-name">:</span><span class="token string">"ASIO"</span>,     <span class="token string">"id"</span>:22601,   <span class="token string">"ctx"</span><span class="token builtin class-name">:</span><span class="token string">"main"</span>,<span class="token string">"msg"</span><span class="token builtin class-name">:</span><span class="token string">"No TransportLayer configured during NetworkInterface startup"</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token string">"t"</span>:<span class="token punctuation">{</span><span class="token string">"<span class="token variable">$date</span>"</span><span class="token builtin class-name">:</span><span class="token string">"2021-03-09T07:50:33.541+00:00"</span><span class="token punctuation">}</span>,<span class="token string">"s"</span><span class="token builtin class-name">:</span><span class="token string">"I"</span>,  <span class="token string">"c"</span><span class="token builtin class-name">:</span><span class="token string">"NETWORK"</span>,  <span class="token string">"id"</span>:4648601, <span class="token string">"ctx"</span><span class="token builtin class-name">:</span><span class="token string">"main"</span>,<span class="token string">"msg"</span><span class="token builtin class-name">:</span><span class="token string">"Implicit TCP FastOpen unavailable. If TCP FastOpen is required, set tcpFastOpenServer, tcpFastOpenClient, and tcpFastOpenQueueSize."</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token string">"t"</span>:<span class="token punctuation">{</span><span class="token string">"<span class="token variable">$date</span>"</span><span class="token builtin class-name">:</span><span class="token string">"2021-03-09T07:50:33.542+00:00"</span><span class="token punctuation">}</span>,<span class="token string">"s"</span><span class="token builtin class-name">:</span><span class="token string">"I"</span>,  <span class="token string">"c"</span><span class="token builtin class-name">:</span><span class="token string">"STORAGE"</span>,  <span class="token string">"id"</span>:4615611, <span class="token string">"ctx"</span><span class="token builtin class-name">:</span><span class="token string">"initandlisten"</span>,<span class="token string">"msg"</span><span class="token builtin class-name">:</span><span class="token string">"MongoDB starting"</span>,<span class="token string">"attr"</span>:<span class="token punctuation">{</span><span class="token string">"pid"</span>:2435,<span class="token string">"port"</span>:27017,<span class="token string">"dbPath"</span><span class="token builtin class-name">:</span><span class="token string">"/data/db"</span>,<span class="token string">"architecture"</span><span class="token builtin class-name">:</span><span class="token string">"64-bit"</span>,<span class="token string">"host"</span><span class="token builtin class-name">:</span><span class="token string">"ubuntu-bionic"</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token string">"t"</span>:<span class="token punctuation">{</span><span class="token string">"<span class="token variable">$date</span>"</span><span class="token builtin class-name">:</span><span class="token string">"2021-03-09T07:50:33.542+00:00"</span><span class="token punctuation">}</span>,<span class="token string">"s"</span><span class="token builtin class-name">:</span><span class="token string">"I"</span>,  <span class="token string">"c"</span><span class="token builtin class-name">:</span><span class="token string">"CONTROL"</span>,  <span class="token string">"id"</span>:23403,   <span class="token string">"ctx"</span><span class="token builtin class-name">:</span><span class="token string">"initandlisten"</span>,<span class="token string">"msg"</span><span class="token builtin class-name">:</span><span class="token string">"Build Info"</span>,<span class="token string">"attr"</span>:<span class="token punctuation">{</span><span class="token string">"buildInfo"</span>:<span class="token punctuation">{</span><span class="token string">"version"</span><span class="token builtin class-name">:</span><span class="token string">"4.4.4"</span>,<span class="token string">"gitVersion"</span><span class="token builtin class-name">:</span><span class="token string">"8db30a63db1a9d84bdcad0c83369623f708e0397"</span>,<span class="token string">"openSSLVersion"</span><span class="token builtin class-name">:</span><span class="token string">"OpenSSL 1.1.0g  2 Nov 2017"</span>,<span class="token string">"modules"</span>:<span class="token punctuation">[</span><span class="token punctuation">]</span>,<span class="token string">"allocator"</span><span class="token builtin class-name">:</span><span class="token string">"tcmalloc"</span>,<span class="token string">"environment"</span>:<span class="token punctuation">{</span><span class="token string">"distmod"</span><span class="token builtin class-name">:</span><span class="token string">"ubuntu1804"</span>,<span class="token string">"distarch"</span><span class="token builtin class-name">:</span><span class="token string">"x86_64"</span>,<span class="token string">"target_arch"</span><span class="token builtin class-name">:</span><span class="token string">"x86_64"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token string">"t"</span>:<span class="token punctuation">{</span><span class="token string">"<span class="token variable">$date</span>"</span><span class="token builtin class-name">:</span><span class="token string">"2021-03-09T07:50:33.542+00:00"</span><span class="token punctuation">}</span>,<span class="token string">"s"</span><span class="token builtin class-name">:</span><span class="token string">"I"</span>,  <span class="token string">"c"</span><span class="token builtin class-name">:</span><span class="token string">"CONTROL"</span>,  <span class="token string">"id"</span>:51765,   <span class="token string">"ctx"</span><span class="token builtin class-name">:</span><span class="token string">"initandlisten"</span>,<span class="token string">"msg"</span><span class="token builtin class-name">:</span><span class="token string">"Operating System"</span>,<span class="token string">"attr"</span>:<span class="token punctuation">{</span><span class="token string">"os"</span>:<span class="token punctuation">{</span><span class="token string">"name"</span><span class="token builtin class-name">:</span><span class="token string">"Ubuntu"</span>,<span class="token string">"version"</span><span class="token builtin class-name">:</span><span class="token string">"18.04"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token string">"t"</span>:<span class="token punctuation">{</span><span class="token string">"<span class="token variable">$date</span>"</span><span class="token builtin class-name">:</span><span class="token string">"2021-03-09T07:50:33.543+00:00"</span><span class="token punctuation">}</span>,<span class="token string">"s"</span><span class="token builtin class-name">:</span><span class="token string">"I"</span>,  <span class="token string">"c"</span><span class="token builtin class-name">:</span><span class="token string">"CONTROL"</span>,  <span class="token string">"id"</span>:21951,   <span class="token string">"ctx"</span><span class="token builtin class-name">:</span><span class="token string">"initandlisten"</span>,<span class="token string">"msg"</span><span class="token builtin class-name">:</span><span class="token string">"Options set by command line"</span>,<span class="token string">"attr"</span>:<span class="token punctuation">{</span><span class="token string">"options"</span>:<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token string">"t"</span>:<span class="token punctuation">{</span><span class="token string">"<span class="token variable">$date</span>"</span><span class="token builtin class-name">:</span><span class="token string">"2021-03-09T07:50:33.545+00:00"</span><span class="token punctuation">}</span>,<span class="token string">"s"</span><span class="token builtin class-name">:</span><span class="token string">"E"</span>,  <span class="token string">"c"</span><span class="token builtin class-name">:</span><span class="token string">"STORAGE"</span>,  <span class="token string">"id"</span>:20557,   <span class="token string">"ctx"</span><span class="token builtin class-name">:</span><span class="token string">"initandlisten"</span>,<span class="token string">"msg"</span><span class="token builtin class-name">:</span><span class="token string">"DBException in initAndListen, terminating"</span>,<span class="token string">"attr"</span>:<span class="token punctuation">{</span><span class="token string">"error"</span><span class="token builtin class-name">:</span><span class="token string">"NonExistentPath: Data directory /data/db not found. Create the missing directory or specify another path using (1) the --dbpath command line option, or (2) by adding the 'storage.dbPath' option in the configuration file."</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token string">"t"</span>:<span class="token punctuation">{</span><span class="token string">"<span class="token variable">$date</span>"</span><span class="token builtin class-name">:</span><span class="token string">"2021-03-09T07:50:33.545+00:00"</span><span class="token punctuation">}</span>,<span class="token string">"s"</span><span class="token builtin class-name">:</span><span class="token string">"I"</span>,  <span class="token string">"c"</span><span class="token builtin class-name">:</span><span class="token string">"REPL"</span>,     <span class="token string">"id"</span>:4784900, <span class="token string">"ctx"</span><span class="token builtin class-name">:</span><span class="token string">"initandlisten"</span>,<span class="token string">"msg"</span><span class="token builtin class-name">:</span><span class="token string">"Stepping down the ReplicationCoordinator for shutdown"</span>,<span class="token string">"attr"</span>:<span class="token punctuation">{</span><span class="token string">"waitTimeMillis"</span>:10000<span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token string">"t"</span>:<span class="token punctuation">{</span><span class="token string">"<span class="token variable">$date</span>"</span><span class="token builtin class-name">:</span><span class="token string">"2021-03-09T07:50:33.546+00:00"</span><span class="token punctuation">}</span>,<span class="token string">"s"</span><span class="token builtin class-name">:</span><span class="token string">"I"</span>,  <span class="token string">"c"</span><span class="token builtin class-name">:</span><span class="token string">"COMMAND"</span>,  <span class="token string">"id"</span>:4784901, <span class="token string">"ctx"</span><span class="token builtin class-name">:</span><span class="token string">"initandlisten"</span>,<span class="token string">"msg"</span><span class="token builtin class-name">:</span><span class="token string">"Shutting down the MirrorMaestro"</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token string">"t"</span>:<span class="token punctuation">{</span><span class="token string">"<span class="token variable">$date</span>"</span><span class="token builtin class-name">:</span><span class="token string">"2021-03-09T07:50:33.546+00:00"</span><span class="token punctuation">}</span>,<span class="token string">"s"</span><span class="token builtin class-name">:</span><span class="token string">"I"</span>,  <span class="token string">"c"</span><span class="token builtin class-name">:</span><span class="token string">"SHARDING"</span>, <span class="token string">"id"</span>:4784902, <span class="token string">"ctx"</span><span class="token builtin class-name">:</span><span class="token string">"initandlisten"</span>,<span class="token string">"msg"</span><span class="token builtin class-name">:</span><span class="token string">"Shutting down the WaitForMajorityService"</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token string">"t"</span>:<span class="token punctuation">{</span><span class="token string">"<span class="token variable">$date</span>"</span><span class="token builtin class-name">:</span><span class="token string">"2021-03-09T07:50:33.546+00:00"</span><span class="token punctuation">}</span>,<span class="token string">"s"</span><span class="token builtin class-name">:</span><span class="token string">"I"</span>,  <span class="token string">"c"</span><span class="token builtin class-name">:</span><span class="token string">"NETWORK"</span>,  <span class="token string">"id"</span>:20562,   <span class="token string">"ctx"</span><span class="token builtin class-name">:</span><span class="token string">"initandlisten"</span>,<span class="token string">"msg"</span><span class="token builtin class-name">:</span><span class="token string">"Shutdown: going to close listening sockets"</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token string">"t"</span>:<span class="token punctuation">{</span><span class="token string">"<span class="token variable">$date</span>"</span><span class="token builtin class-name">:</span><span class="token string">"2021-03-09T07:50:33.546+00:00"</span><span class="token punctuation">}</span>,<span class="token string">"s"</span><span class="token builtin class-name">:</span><span class="token string">"I"</span>,  <span class="token string">"c"</span><span class="token builtin class-name">:</span><span class="token string">"NETWORK"</span>,  <span class="token string">"id"</span>:4784905, <span class="token string">"ctx"</span><span class="token builtin class-name">:</span><span class="token string">"initandlisten"</span>,<span class="token string">"msg"</span><span class="token builtin class-name">:</span><span class="token string">"Shutting down the global connection pool"</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token string">"t"</span>:<span class="token punctuation">{</span><span class="token string">"<span class="token variable">$date</span>"</span><span class="token builtin class-name">:</span><span class="token string">"2021-03-09T07:50:33.546+00:00"</span><span class="token punctuation">}</span>,<span class="token string">"s"</span><span class="token builtin class-name">:</span><span class="token string">"I"</span>,  <span class="token string">"c"</span><span class="token builtin class-name">:</span><span class="token string">"STORAGE"</span>,  <span class="token string">"id"</span>:4784906, <span class="token string">"ctx"</span><span class="token builtin class-name">:</span><span class="token string">"initandlisten"</span>,<span class="token string">"msg"</span><span class="token builtin class-name">:</span><span class="token string">"Shutting down the FlowControlTicketholder"</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token string">"t"</span>:<span class="token punctuation">{</span><span class="token string">"<span class="token variable">$date</span>"</span><span class="token builtin class-name">:</span><span class="token string">"2021-03-09T07:50:33.546+00:00"</span><span class="token punctuation">}</span>,<span class="token string">"s"</span><span class="token builtin class-name">:</span><span class="token string">"I"</span>,  <span class="token string">"c"</span><span class="token builtin class-name">:</span><span class="token string">"-"</span>,        <span class="token string">"id"</span>:20520,   <span class="token string">"ctx"</span><span class="token builtin class-name">:</span><span class="token string">"initandlisten"</span>,<span class="token string">"msg"</span><span class="token builtin class-name">:</span><span class="token string">"Stopping further Flow Control ticket acquisitions."</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token string">"t"</span>:<span class="token punctuation">{</span><span class="token string">"<span class="token variable">$date</span>"</span><span class="token builtin class-name">:</span><span class="token string">"2021-03-09T07:50:33.546+00:00"</span><span class="token punctuation">}</span>,<span class="token string">"s"</span><span class="token builtin class-name">:</span><span class="token string">"I"</span>,  <span class="token string">"c"</span><span class="token builtin class-name">:</span><span class="token string">"NETWORK"</span>,  <span class="token string">"id"</span>:4784918, <span class="token string">"ctx"</span><span class="token builtin class-name">:</span><span class="token string">"initandlisten"</span>,<span class="token string">"msg"</span><span class="token builtin class-name">:</span><span class="token string">"Shutting down the ReplicaSetMonitor"</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token string">"t"</span>:<span class="token punctuation">{</span><span class="token string">"<span class="token variable">$date</span>"</span><span class="token builtin class-name">:</span><span class="token string">"2021-03-09T07:50:33.546+00:00"</span><span class="token punctuation">}</span>,<span class="token string">"s"</span><span class="token builtin class-name">:</span><span class="token string">"I"</span>,  <span class="token string">"c"</span><span class="token builtin class-name">:</span><span class="token string">"SHARDING"</span>, <span class="token string">"id"</span>:4784921, <span class="token string">"ctx"</span><span class="token builtin class-name">:</span><span class="token string">"initandlisten"</span>,<span class="token string">"msg"</span><span class="token builtin class-name">:</span><span class="token string">"Shutting down the MigrationUtilExecutor"</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token string">"t"</span>:<span class="token punctuation">{</span><span class="token string">"<span class="token variable">$date</span>"</span><span class="token builtin class-name">:</span><span class="token string">"2021-03-09T07:50:33.546+00:00"</span><span class="token punctuation">}</span>,<span class="token string">"s"</span><span class="token builtin class-name">:</span><span class="token string">"I"</span>,  <span class="token string">"c"</span><span class="token builtin class-name">:</span><span class="token string">"CONTROL"</span>,  <span class="token string">"id"</span>:4784925, <span class="token string">"ctx"</span><span class="token builtin class-name">:</span><span class="token string">"initandlisten"</span>,<span class="token string">"msg"</span><span class="token builtin class-name">:</span><span class="token string">"Shutting down free monitoring"</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token string">"t"</span>:<span class="token punctuation">{</span><span class="token string">"<span class="token variable">$date</span>"</span><span class="token builtin class-name">:</span><span class="token string">"2021-03-09T07:50:33.546+00:00"</span><span class="token punctuation">}</span>,<span class="token string">"s"</span><span class="token builtin class-name">:</span><span class="token string">"I"</span>,  <span class="token string">"c"</span><span class="token builtin class-name">:</span><span class="token string">"STORAGE"</span>,  <span class="token string">"id"</span>:4784927, <span class="token string">"ctx"</span><span class="token builtin class-name">:</span><span class="token string">"initandlisten"</span>,<span class="token string">"msg"</span><span class="token builtin class-name">:</span><span class="token string">"Shutting down the HealthLog"</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token string">"t"</span>:<span class="token punctuation">{</span><span class="token string">"<span class="token variable">$date</span>"</span><span class="token builtin class-name">:</span><span class="token string">"2021-03-09T07:50:33.546+00:00"</span><span class="token punctuation">}</span>,<span class="token string">"s"</span><span class="token builtin class-name">:</span><span class="token string">"I"</span>,  <span class="token string">"c"</span><span class="token builtin class-name">:</span><span class="token string">"STORAGE"</span>,  <span class="token string">"id"</span>:4784929, <span class="token string">"ctx"</span><span class="token builtin class-name">:</span><span class="token string">"initandlisten"</span>,<span class="token string">"msg"</span><span class="token builtin class-name">:</span><span class="token string">"Acquiring the global lock for shutdown"</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token string">"t"</span>:<span class="token punctuation">{</span><span class="token string">"<span class="token variable">$date</span>"</span><span class="token builtin class-name">:</span><span class="token string">"2021-03-09T07:50:33.547+00:00"</span><span class="token punctuation">}</span>,<span class="token string">"s"</span><span class="token builtin class-name">:</span><span class="token string">"I"</span>,  <span class="token string">"c"</span><span class="token builtin class-name">:</span><span class="token string">"-"</span>,        <span class="token string">"id"</span>:4784931, <span class="token string">"ctx"</span><span class="token builtin class-name">:</span><span class="token string">"initandlisten"</span>,<span class="token string">"msg"</span><span class="token builtin class-name">:</span><span class="token string">"Dropping the scope cache for shutdown"</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token string">"t"</span>:<span class="token punctuation">{</span><span class="token string">"<span class="token variable">$date</span>"</span><span class="token builtin class-name">:</span><span class="token string">"2021-03-09T07:50:33.548+00:00"</span><span class="token punctuation">}</span>,<span class="token string">"s"</span><span class="token builtin class-name">:</span><span class="token string">"I"</span>,  <span class="token string">"c"</span><span class="token builtin class-name">:</span><span class="token string">"FTDC"</span>,     <span class="token string">"id"</span>:4784926, <span class="token string">"ctx"</span><span class="token builtin class-name">:</span><span class="token string">"initandlisten"</span>,<span class="token string">"msg"</span><span class="token builtin class-name">:</span><span class="token string">"Shutting down full-time data capture"</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token string">"t"</span>:<span class="token punctuation">{</span><span class="token string">"<span class="token variable">$date</span>"</span><span class="token builtin class-name">:</span><span class="token string">"2021-03-09T07:50:33.548+00:00"</span><span class="token punctuation">}</span>,<span class="token string">"s"</span><span class="token builtin class-name">:</span><span class="token string">"I"</span>,  <span class="token string">"c"</span><span class="token builtin class-name">:</span><span class="token string">"CONTROL"</span>,  <span class="token string">"id"</span>:20565,   <span class="token string">"ctx"</span><span class="token builtin class-name">:</span><span class="token string">"initandlisten"</span>,<span class="token string">"msg"</span><span class="token builtin class-name">:</span><span class="token string">"Now exiting"</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token string">"t"</span>:<span class="token punctuation">{</span><span class="token string">"<span class="token variable">$date</span>"</span><span class="token builtin class-name">:</span><span class="token string">"2021-03-09T07:50:33.548+00:00"</span><span class="token punctuation">}</span>,<span class="token string">"s"</span><span class="token builtin class-name">:</span><span class="token string">"I"</span>,  <span class="token string">"c"</span><span class="token builtin class-name">:</span><span class="token string">"CONTROL"</span>,  <span class="token string">"id"</span>:23138,   <span class="token string">"ctx"</span><span class="token builtin class-name">:</span><span class="token string">"initandlisten"</span>,<span class="token string">"msg"</span><span class="token builtin class-name">:</span><span class="token string">"Shutting down"</span>,<span class="token string">"attr"</span>:<span class="token punctuation">{</span><span class="token string">"exitCode"</span>:100<span class="token punctuation">}</span><span class="token punctuation">}</span>
</code></pre></div>
<p>何かおかしい。</p>
<p>確か起動出来たらサーバが起動してるみたいに通常のコマンド入力を受け付けない形になるはずなんだけど、コマンドが入力出来る。</p>
<p>何かがおかしい。</p>
<p>プロセスを確認する。</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash"><span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> mongod
</code></pre></div>
<p>出力結果</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">vagrant   <span class="token number">2449</span>  <span class="token number">1626</span>  <span class="token number">0</span> 08:03 pts/0    00:00:00 <span class="token function">grep</span> --color<span class="token operator">=</span>auto mongod
</code></pre></div>
<ul>
<li>grep --color=auto mongo は検索結果に関わらず表示される。</li>
<li>特にmongodのプロセスは起動してない。</li>
</ul>
<h2>解決策</h2>
<p>原因はデフォルトでストーレージにする予定の <code>/data/db</code> フォルダがないという事だった。</p>
<p>なぜこんな事になっているかというとubuntuでは <code>apt-get</code> でインストールしたため、dataを保存する予定のパスが <code>/var/lib/mongodb</code> に作られてしまうためらしい。</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash"><span class="token string">"error"</span><span class="token builtin class-name">:</span><span class="token string">"NonExistentPath: Data directory /data/db not found. Create the missing directory or specify another path using (1) the --dbpath command line option, or (2) by adding the 'storage.dbPath' option in the configuration file."</span>
</code></pre></div>
<h3>解決策1</h3>
<p>mongod.confに <code>dbpath=/data/db</code> の一行を追加する。</p>
<p><strong>mongod.conf</strong></p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash"><span class="token comment"># mongod.conf</span>
  
<span class="token comment"># for documentation of all options, see:</span>
<span class="token comment">#   http://docs.mongodb.org/manual/reference/configuration-options/</span>

<span class="token comment"># Where and how to store data.</span>
storage:
  dbPath: /var/lib/mongodb
  journal:
    enabled: <span class="token boolean">true</span>

<span class="token comment"># この辺にでも追加しておけば良いと思う。</span>
<span class="token comment"># それか直接上のdbpathを上書きすれば良いと思う。</span>
<span class="token assign-left variable">dbpath</span><span class="token operator">=</span>/data/db

<span class="token comment">#  engine:</span>
<span class="token comment">#  mmapv1:</span>
<span class="token comment">#  wiredTiger:</span>

<span class="token comment"># where to write logging data.</span>
systemLog:
  destination: <span class="token function">file</span>
  logAppend: <span class="token boolean">true</span>
  path: /var/log/mongodb/mongod.log

<span class="token comment"># network interfaces</span>
net:
  port: <span class="token number">27017</span>
  bindIp: <span class="token number">127.0</span>.0.1

<span class="token comment"># how the process runs</span>
processManagement:
  timeZoneInfo: /usr/share/zoneinfo

<span class="token comment">#security:</span>

<span class="token comment">#operationProfiling:</span>

<span class="token comment">#replication:</span>

<span class="token comment">#sharding:</span>

<span class="token comment">## Enterprise-Only Options:</span>

<span class="token comment">#auditLog:</span>

<span class="token comment">#snmp:</span>
</code></pre></div>
<p>その後、 <code>/data/db</code> のフォルダを手動で作成する。</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash"><span class="token function">vi</span> /etc/mongod.conf
</code></pre></div>
<h3>解決策2</h3>
<p>起動時のdbパスを指定する。</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash"><span class="token function">sudo</span> mongod --dbpath /var/lib/mongodb
</code></pre></div>
<p>個人的にはファイルの生成とか書き換えがなくて良い気がする。</p>
<p>エイリアス等で指定しておけばいいと思うが、朝から格闘してここで力尽きた。</p>
<h2>最後に</h2>
<p>ただmongodbを起動したかっただけなのに、どうしてこんな面倒なんだ。</p>
<p>パスの問題はどうにかして欲しい。</p>
<p>そもそもubuntuに <code>apt-get</code> インストールして使用することを想定してないのか?（そんなバカな事ないよなドキュメント通りにやっての <code>apt-get</code> だし）</p>
<p>ドキュメントには <code>data/db</code> フォルダを手動で作成して下さいなんて書かれてなかった。</p>
<p>それに systemd (systemctl)： <code>sudo systemctl start mongod</code> と System V Init (service)：<code>sudo service mongod start</code> と書かれていて意味が分からなかった。最近は <code>mongod</code> でデータベースを起動しないのか??</p>
<p><code>systemctl</code> を使用するとデータベースが起動したあとに、そのままコマンド入力出来るみたい。おそらく <code>mongod</code> と変わらないがログの出力がファイルにされるようだ。</p>
<p><code>service</code> との違いは詳しくは分からないが <code>systemctl</code> が使えるなら標準になっているためそちらを使用した方が良いらしい。</p>
<p>※もしご存知の方がいたら教えて下さい。</p>
<p>最終的にはとりあえず、Mongodbを起動することが出来て良かった。まだ大学で制作した検索エンジンのクローラーを動かして、データベースに保存するまでの動作確認は出来ていないが、明日そこまで行おうと思う。</p>
<p>なぜSQL構文をまともに書けないのに、Nosqlでデータベースを始めたのか当時の自分に疑問が残る。
当時はまだNosqlという概念が珍しくてモダンな環境って言葉に惹かれたんだと思う。
エンジニア目指してるんだったら、SQL構文についてしっかり勉強しようと思う。</p>
<p>この一日格闘した記事が誰かのお役に立てればこれほど嬉しい事はない。</p>
<p>記事に関するコメント等は</p>
<p>🕊：<a href="https://twitter.com/Unemployed_jp">Twitter</a>
📺：<a href="https://www.youtube.com/channel/UCT3wLdiZS3Gos87f9fu4EOQ/featured?view_as=subscriber">Youtube</a>
📸：<a href="https://www.instagram.com/unemployed_jp/">Instagram</a>
👨🏻‍💻：<a href="https://github.com/wimpykid719?tab=repositories">Github</a>
😥：<a href="https://ja.stackoverflow.com/users/edit/22565">Stackoverflow</a></p>
<p>でも受け付けています。どこかにはいます。</p>
<h3>参照</h3>
<p><a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/">Install MongoDB Community Edition on Ubuntu - MongoDB Manual</a></p>
<p><a href="https://www.nemotos.net/?p=996">Linuxにおけるハイフンの意味</a></p>
<p><a href="https://manpages.debian.org/unstable/apt/apt-key.8.ja.html">apt-key(8) - apt - Debian unstable - Debian Manpages</a></p>
<p><a href="https://www.creatology.jp/unix/outin.html">標準入力、標準出力、標準エラー出力、パイプとは ?</a></p>
<p><a href="https://www.garunimo.com/program/linux/column-linux12.php">Debianのsources.listの編集方法</a></p>
<p><a href="https://qiita.com/on-vegetable/items/8f821be0641d0dbb7631"></a></p>
<p><a href="https://manpages.debian.org/jessie/dpkg/dpkg.1.ja.html">dpkg(1) - dpkg - Debian jessie - Debian Manpages</a></p>
<p><a href="https://qiita.com/thirdpenguin/items/4711e28f46cd9c7b09e4">MongoDB の dbpath を変更した時のトラブルシューティング - Qiita</a></p>
<p><a href="https://stackoverflow.com/questions/12738322/what-is-the-default-database-path-for-mongodb">What is the default database path for MongoDB?</a></p>
<p><a href="https://www.toumasu-program.net/qfr8l41pigu2v05ztwbc">Linuxのコマンド実行で使うserviceとsystemctlの違いとは何か？</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[自宅ネットワークにどんな機器がぶら下がってるか気になったのでNmapを使って調査してみた。 ]]></title>
        <id>https://techblog-pink.vercel.app/posts/ec1db9dcc5fca9</id>
        <link href="https://techblog-pink.vercel.app/posts/ec1db9dcc5fca9"/>
        <updated>2021-03-03T15:00:00.000Z</updated>
        <summary type="html"><![CDATA[...]]></summary>
        <content type="html"><![CDATA[<h2>環境</h2>
<p>vagrantでubuntu20.04の仮装環境を作成してそこにnmapをインストールした。</p>
<p><code>sudo apt-get update</code> を実行する。（vagrant 環境なのでsudoを付ける必要がある。）</p>
<p><code>sudo apt-get install -y nmap</code> でオプション <code>-y</code> を付けてインストール中のyesを飛ばす。</p>
<p>インストールが上手く行けば <code>nmap -V</code> でバージョン情報が表示される。</p>
<p>ローカルにぶら下がっている機器を検索するコマンドは
x = 1（自宅の環境ならたぶん多くは1になる。）</p>
<p><code>nmap 192.168.x.0/24</code> と入力するしばらくすると下記の情報が出力される。</p>
<h2>192.168.x.0/24とは</h2>
<p>そもそも <code>192.168.x.0/24</code> は何を意味しているのか気になったので調べてみると</p>
<p><strong>ブロードキャストアドレス</strong> と呼ばれるものでホスト部が全て1で表現されるアドレスを指す。</p>
<p>ブロードキャストアドレスはホスト部すべてを示すもので、同一のネットワークに存在する全ホストに同一のパケットを送信するときなどに利用される。</p>
<p>nmapでこのネットワークアドレスを指定するとそのネットワーク内に繋がれたIPアドレスを検出してくれる。上記のコマンドでは <code>192.168.x.0</code> ~ <code>192.168.x.255</code> までの256のホストを検索する事になる。</p>
<h3>IPアドレスについて少し調べた。</h3>
<blockquote>
<p>ホスト部が全て1で表現される。</p>
</blockquote>
<p>ホスト部がなんなのか分からないので調べてみた。</p>
<p>IPアドレスにはネットワーク部、ホスト部がある。</p>
<p>実際のIPアドレスを元に見ていく。</p>
<p><code>192.168.0.2</code> を二進数に直すと <code>11000000.10101000.00000000.00000010</code> となる。</p>
<p>この時サブネットマスクは <code>255.255.255.0</code> だったとする。二進数にする。 <code>11111111.11111111.11111111.00000000</code></p>
<p>このサブネットマスクの二進数に変換した数値の</p>
<p><code>1</code> ：ネットワーク部</p>
<p><code>0</code> ：ホスト部</p>
<p>IP　　　　　　　　<code>11000000.10101000.00000000.00000010</code></p>
<p>サブネットマスク　<code>11111111.11111111.11111111.00000000</code></p>
<p>これでIPの24桁まではネットワーク部、残り8桁がホスト部という事が分かる。</p>
<p>さらにこのIPアドレスのホスト部 <code>00000010</code> を全て0に変えたのが <strong>ネットワークアドレス</strong> と呼ばれるものになる。ここが全て1に変えたのが <strong>ブロードキャストアドレス</strong>になる。</p>
<p>ホスト部を全て0にされたIPアドレス</p>
<p><code>11000000.10101000.00000000.00000000</code></p>
<p>十進数に直すと</p>
<p><code>192.168.0.0</code> になる。</p>
<p>サブネットマスク は両者の境界を表現するために存在する。</p>
<p>先ほどホスト部の数値を全て0にしたのがネットワークアドレスと言ったがもう一つネットワークアドレスと呼ばれる部分があってそれはネットワーク部=ネットワークアドレス使われている場合もあるので注意が必要である。</p>
<p><code>192.168.1.0/24</code></p>
<p><code>/24</code> の部分はプレフィックス記法、CIDR(Classless Inter-Domain routing)などと呼びます。</p>
<p>二進数にした際、左から24桁はネットワーク部という事を示しています。 <code>/16</code> の場合は16桁になります。</p>
<h2>ぶら下がっていた機器たち</h2>
<p>次にスキャン結果を見ていく。（一応、意味はあんまないと思うけどローカルIPアドレスは伏せておく）</p>
<p>7つの機器？がローカルネットワークにぶら下がっていた。意外に少なかった。</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">vagrant@ubuntu-focal:~$ nmap <span class="token number">192.168</span>.x.0/24
Starting Nmap <span class="token number">7.80</span> <span class="token punctuation">(</span> https://nmap.org <span class="token punctuation">)</span> at <span class="token number">2021</span>-03-03 00:09 UTC
Nmap scan report <span class="token keyword">for</span> ntt.setup <span class="token punctuation">(</span><span class="token number">192.168</span>.x.x<span class="token punctuation">)</span>
Host is up <span class="token punctuation">(</span><span class="token number">0</span>.0042s latency<span class="token punctuation">)</span>.
Not shown: <span class="token number">997</span> filtered ports
PORT     STATE SERVICE
<span class="token number">53</span>/tcp   <span class="token function">open</span>  domain
<span class="token number">80</span>/tcp   <span class="token function">open</span>  http
<span class="token number">8888</span>/tcp <span class="token function">open</span>  sun-answerbook

Nmap scan report <span class="token keyword">for</span> <span class="token number">192.168</span>.x.x
Host is up <span class="token punctuation">(</span><span class="token number">0</span>.0069s latency<span class="token punctuation">)</span>.
Not shown: <span class="token number">997</span> closed ports
PORT    STATE SERVICE
<span class="token number">22</span>/tcp  <span class="token function">open</span>  <span class="token function">ssh</span>
<span class="token number">80</span>/tcp  <span class="token function">open</span>  http
<span class="token number">443</span>/tcp <span class="token function">open</span>  https

Nmap scan report <span class="token keyword">for</span> <span class="token number">192.168</span>.x.x
Host is up <span class="token punctuation">(</span><span class="token number">0</span>.014s latency<span class="token punctuation">)</span>.
Not shown: <span class="token number">997</span> closed ports
PORT    STATE SERVICE
<span class="token number">22</span>/tcp  <span class="token function">open</span>  <span class="token function">ssh</span>
<span class="token number">80</span>/tcp  <span class="token function">open</span>  http
<span class="token number">443</span>/tcp <span class="token function">open</span>  https

Nmap scan report <span class="token keyword">for</span> <span class="token number">192.168</span>.x.x
Host is up <span class="token punctuation">(</span><span class="token number">0</span>.0057s latency<span class="token punctuation">)</span>.
Not shown: <span class="token number">999</span> closed ports
PORT     STATE SERVICE
<span class="token number">8009</span>/tcp <span class="token function">open</span>  ajp13

Nmap scan report <span class="token keyword">for</span> <span class="token number">192.168</span>.x.x
Host is up <span class="token punctuation">(</span><span class="token number">0</span>.0055s latency<span class="token punctuation">)</span>.
Not shown: <span class="token number">999</span> closed ports
PORT     STATE SERVICE
<span class="token number">9000</span>/tcp <span class="token function">open</span>  cslistener

Nmap scan report <span class="token keyword">for</span> <span class="token number">192.168</span>.x.x
Host is up <span class="token punctuation">(</span><span class="token number">0</span>.0038s latency<span class="token punctuation">)</span>.
Not shown: <span class="token number">994</span> closed ports
PORT      STATE    SERVICE
<span class="token number">21</span>/tcp    filtered <span class="token function">ftp</span>
<span class="token number">22</span>/tcp    <span class="token function">open</span>     <span class="token function">ssh</span>
<span class="token number">80</span>/tcp    <span class="token function">open</span>     http
<span class="token number">1900</span>/tcp  <span class="token function">open</span>     upnp
<span class="token number">20005</span>/tcp <span class="token function">open</span>     btx
<span class="token number">49152</span>/tcp <span class="token function">open</span>     unknown

Nmap scan report <span class="token keyword">for</span> <span class="token number">192.168</span>.x.x
Host is up <span class="token punctuation">(</span><span class="token number">0</span>.0060s latency<span class="token punctuation">)</span>.
Not shown: <span class="token number">998</span> closed ports
PORT      STATE    SERVICE
<span class="token number">14238</span>/tcp filtered unknown
<span class="token number">62078</span>/tcp <span class="token function">open</span>     iphone-sync

Nmap done: <span class="token number">256</span> IP addresses <span class="token punctuation">(</span><span class="token number">7</span> hosts up<span class="token punctuation">)</span> scanned <span class="token keyword">in</span> <span class="token number">35.52</span> seconds
</code></pre></div>
<p><code>Not shown: 997 filtered ports</code> は一つのローカルIPアドレスで1000のportsを検索してそのうち997はportsが開いてなかった？という意味だと思う。残り3つが検出したものでそのすぐ下に詳細が表示される。</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">PORT    STATE SERVICE
<span class="token number">22</span>/tcp  <span class="token function">open</span>  <span class="token function">ssh</span>
<span class="token number">80</span>/tcp  <span class="token function">open</span>  http
<span class="token number">443</span>/tcp <span class="token function">open</span>  https
</code></pre></div>
<p>httpでアクセス出来るみたいなので、アクセスしてみた。</p>
<p><img src="https://storage.googleapis.com/zenn-user-upload/ynz7rqfv9bk2kegwvq5xhi0p50vf" alt=""></p>
<p>ルータのログイン画面が表示された。</p>
<p>他の3つもルータ関係だった。sshが開いてるのはセキュリティ的に良くないと聞く。これでサポートの際に遠隔操作したりするのに使用するのだろうか。</p>
<p>port 9000で開いている <code>cslistener</code> はおそらくVirtualBoxの仮装環境だと思われる。</p>
<p><code>iphone-sync</code> は名前からしてiphoneの機能だと思う。詳しくは分からないがセキュリティ的に良くないと書かれた記事をみた。もしかしたら名前は油断させるためでほんとは変なアプリかも知れない。</p>
<p>全く分からないのが <code>ajp13</code> である。見覚えがない。調べるとapacheが関係しているみたいでインストールした覚えはないが、何かのアプリに組み込まれているのかも知れない。</p>
<p><strong>ご存知の方がいらしたら教えて下さると助かります。</strong></p>
<p>パッと見怪しい機器は見つからなかった。</p>
<h2>最後に</h2>
<p>ここまで記事を読んで頂きありがとうございます。</p>
<p>実際にnmapを使って自宅のローカル環境をスキャンする事で、間接的にIPアドレスとサブネットマスクの関係性について知る事が出来た。</p>
<p>思ってたより、繋がってる機器は少なかった。chromecast、amazonTV、テレビがあると思ったが電源が切れていたのかスキャン結果には出てこなかった。</p>
<p>次回は自宅のネットワーク外からどんなポートが開いているのか調べてみたい。</p>
<p>ハッカーと呼ばれる人達はローカルネットワークに侵入した、次に開いているポート対してエクスプロイトコードを実行して権限を奪うのが主な手法なのか気になる。そもそも外側からどうやって入ってくるのかも気になる。</p>
<p>Wifiならパスワードを見つけて接続すれば可能だと思う。</p>
<p>インターネットからだと、ブロードバンドルータに対してエクスプロイトコードを実行するとか勝手に考えている。</p>
<p>まだまだ知識不足なので、必要だと思ってマスタリングTCP/IPという専門書を読んでいるが、手を動かす事なく用語の説明が多く、内容も退屈なので悲しい事に読んでも頭に入らないのが現状である。</p>
<p>記事に関するコメント等は</p>
<p>🕊：<a href="https://twitter.com/Unemployed_jp">Twitter</a>
📺：<a href="https://www.youtube.com/channel/UCT3wLdiZS3Gos87f9fu4EOQ/featured?view_as=subscriber">Youtube</a>
📸：<a href="https://www.instagram.com/unemployed_jp/">Instagram</a>
👨🏻‍💻：<a href="https://github.com/wimpykid719?tab=repositories">Github</a>
😥：<a href="https://ja.stackoverflow.com/users/edit/22565">Stackoverflow</a></p>
<p>でも受け付けています。どこかにはいます。</p>
<h3>参照</h3>
<p><a href="https://nmap.org/man/ja/man-target-specification.html">ターゲットの指定 |</a></p>
<p><a href="https://wa3.i-3-i.info/word11993.html">ネットワークアドレス (network address)とは｜「分かりそう」で「分からない」でも「分かった」気になれるIT用語辞典</a></p>
<p><a href="https://nishinatoshiharu.com/fundamental-ipaddress/">【図解】IPアドレスの仕組み(クラス分類からサブネットまで) | Enjoy IT Life</a></p>
<p><a href="https://pctips.jp/security/nmap-security202001/">nmap(zenmap)で調べた自宅内の怪しいサービスを何とかせねば！</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonのloggingを使ってエラーログをテキストファイルに出力してみた。]]></title>
        <id>https://techblog-pink.vercel.app/posts/d199d9e0b46f84</id>
        <link href="https://techblog-pink.vercel.app/posts/d199d9e0b46f84"/>
        <updated>2021-03-01T15:00:00.000Z</updated>
        <summary type="html"><![CDATA[...]]></summary>
        <content type="html"><![CDATA[<h2>最初に</h2>
<p>普段は <code>print()</code> でデバッグを済ましており、それだけだと対応仕切れない場面が出てきたのでloggingの使い方を学ぼうと思う。例：Pythonスクリプトをmacで実行出来る形式にした際にコンソールに出力されなくなり、必要になった。</p>
<h2>ログレベル</h2>
<p>Pythonのロギングには5つのレベルがある。デフォルトは値は <code>warning</code> になっており、 <code>critical, error, warning</code> までが出力される。</p>
<p><code>info</code>, <code>debug</code> はコンソールに出力されない</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">import</span> logging

logging<span class="token punctuation">.</span>critical<span class="token punctuation">(</span><span class="token string">'critical'</span><span class="token punctuation">)</span>
logging<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span>
logging<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">'warning'</span><span class="token punctuation">)</span>
logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'info'</span><span class="token punctuation">)</span>
logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">'debug'</span><span class="token punctuation">)</span>

<span class="token comment">#実行結果</span>
CRITICAL<span class="token punctuation">:</span>root<span class="token punctuation">:</span>critical
ERROR<span class="token punctuation">:</span>root<span class="token punctuation">:</span>error
WARNING<span class="token punctuation">:</span>root<span class="token punctuation">:</span>warning
</code></pre></div>
<p><code>info</code>, <code>debug</code> も出力したい場合は <code>basicConfig</code> でログレベルを下に変更する。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">import</span> logging

<span class="token comment"># ログレベルを DEBUG に変更</span>
logging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>level<span class="token operator">=</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span>

logging<span class="token punctuation">.</span>critical<span class="token punctuation">(</span><span class="token string">'critical'</span><span class="token punctuation">)</span>
logging<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span>
logging<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">'warning'</span><span class="token punctuation">)</span>
logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'info'</span><span class="token punctuation">)</span>
logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">'debug'</span><span class="token punctuation">)</span>

<span class="token comment">#実行結果</span>
CRITICAL<span class="token punctuation">:</span>root<span class="token punctuation">:</span>critical
ERROR<span class="token punctuation">:</span>root<span class="token punctuation">:</span>error
WARNING<span class="token punctuation">:</span>root<span class="token punctuation">:</span>warning
INFO<span class="token punctuation">:</span>root<span class="token punctuation">:</span>info
DEBUG<span class="token punctuation">:</span>root<span class="token punctuation">:</span>debug
</code></pre></div>
<h2>ログのフォーマットを変更する。</h2>
<p>個人的にはログが出てこればそれで十分なのだが一応見ていこうと思う。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">import</span> logging

<span class="token comment"># ログレベルを DEBUG に変更</span>
logging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>level<span class="token operator">=</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span>

<span class="token comment"># 従来の出力</span>
logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'error{}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">'outputting error'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'warning %s %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">'was'</span><span class="token punctuation">,</span> <span class="token string">'outputted'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># logging のみの書き方</span>
logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'info %s %s'</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">)</span>
</code></pre></div>
<p>まぁテンプレートリテラルみたいなの使えますよってだけだった。</p>
<h2>ログをファイルに出力</h2>
<p>これを今回行いたかった。コンソールに出力されないのでログをファイルに書き出す。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">import</span> logging

<span class="token comment"># ログレベルを DEBUG に変更</span>
logging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'logfile/logger.log'</span><span class="token punctuation">,</span> level<span class="token operator">=</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span>
</code></pre></div>
<p>filenameにパスを指定してあげれば生成されるみたいだ。フォルダは生成されないのであらかじめ作って置かないとパスエラーになる。</p>
<h2>ロガーの設定</h2>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">import</span> logging

<span class="token comment"># ロギングの基本設定(infoレベルを指定)</span>
logging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>level<span class="token operator">=</span>logging<span class="token punctuation">.</span>INFO<span class="token punctuation">)</span>
logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'info'</span><span class="token punctuation">)</span>

<span class="token comment"># 現在のロギングの情報を取得(引数はファイル名)</span>
logger <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
<span class="token comment"># ロギングの設定を DEBUG に変更</span>
logger<span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span>
logger<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">'debug'</span><span class="token punctuation">)</span>

<span class="token comment">#実行結果</span>
INFO<span class="token punctuation">:</span>root<span class="token punctuation">:</span>info
DEBUG<span class="token punctuation">:</span>__main__<span class="token punctuation">:</span>debug
</code></pre></div>
<p><code>__name__</code> を引数にする事で現在実行中のPythonファイル名を取得している。それはわかるんだけどいまいち上記のコードではただ <code>debug</code> という文字列が出力されるだけでデバッグの意味をなしていない気がする。 <code>logging.info('文字列')</code> , <code>logging.debug('文字列')</code> とする事でそのレベルでログの出力が許可されていたら文字列を出力するくらいの機能にしかなってない。</p>
<p>どんなエラーなのかまでは分からない。そもそもエラー出なくても出力されているから上記だけでは意味ないよな。</p>
<h2>ロギング ハンドラとは</h2>
<p>ハンドラ：特定の処理に対して、処理を行うプログラムを指す。</p>
<p>例をあげるとtry except構文もエラーの発生に対して処理を実行するからハンドラーに該当する。</p>
<p>main処理に記述するbasiConfigのfilenameにログのパスを記述すればログが書き込まれる事については上記に記してある。</p>
<p>main処理以外のログ情報をファイルに出力する為には、ハンドラを使う必要がある。</p>
<p><code>logging.FileHandler('logfile/logger.log')</code> を使用する事でコンソールではなくファイルにログを残せる。</p>
<p>上記で先に紹介した <code>logging.basicConfig(filename='logfile/logger.log', level=logging.DEBUG)</code> との違いは上記はデフォルトのロギング設定を変更するものであり、 <code>FileHandler</code> はまず、 <code>logging.getLogger(__name__)</code> でloggerと呼ばれる物を生成してそれの設定を変更してるイメージなのかもしれない。一段階壁を置くみたいな感じどんな意味があるかよく分からない。別の設定でロガーを生成したり汎用性が高くなるのかもしれない。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">import</span> logging

logger <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
logger<span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span>

<span class="token comment">##ハンドラ取得</span>
get_handler <span class="token operator">=</span> logging<span class="token punctuation">.</span>FileHandler<span class="token punctuation">(</span><span class="token string">'logfile/logger.log'</span><span class="token punctuation">)</span>
logger<span class="token punctuation">.</span>addHandler<span class="token punctuation">(</span>get_handler<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">do_something</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'from logger_lesson2'</span><span class="token punctuation">)</span>
    logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'from logger_lesson2_debug'</span><span class="token punctuation">)</span>
</code></pre></div>
<p>これをデバックしたいスクリプトに書いてmain.py 等 のメイン処理にimportして実行する。ことで個別にデバックレベル等設定出来る。</p>
<p>上記の情報を元にオリジナルのロガー関数を作成してみた。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">import</span> logging

<span class="token keyword">def</span> <span class="token function">get_logger</span><span class="token punctuation">(</span>logger_name<span class="token punctuation">,</span> log_file<span class="token punctuation">,</span> f_fmt<span class="token operator">=</span><span class="token string">'%(message)s'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

	<span class="token triple-quoted-string string">"""ロガーを取得"""</span>
	<span class="token comment"># ロガー作成</span>
	logger <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span>logger_name<span class="token punctuation">)</span>
	logger<span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span>

	<span class="token comment"># ファイルハンドラ作成</span>
	file_handler <span class="token operator">=</span> logging<span class="token punctuation">.</span>FileHandler<span class="token punctuation">(</span>log_file<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'a'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>
	file_handler<span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span>
	file_handler<span class="token punctuation">.</span>setFormatter<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>Formatter<span class="token punctuation">(</span>f_fmt<span class="token punctuation">)</span><span class="token punctuation">)</span>

	<span class="token comment"># ロガーに追加</span>
	logger<span class="token punctuation">.</span>addHandler<span class="token punctuation">(</span>file_handler<span class="token punctuation">)</span>

	<span class="token keyword">return</span> logger
</code></pre></div>
<p>この関数を使用したいスクリプトで <code>import</code> して</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">import</span> sys
<span class="token comment"># 同じ階層のmodulesフォルダにcreatelog.pyで保存している。</span>
<span class="token keyword">from</span> modules <span class="token keyword">import</span> createlog

lg <span class="token operator">=</span> createlog<span class="token punctuation">.</span>get_logger<span class="token punctuation">(</span>__name__<span class="token punctuation">,</span> <span class="token string">'log.txt'</span><span class="token punctuation">)</span>
lg<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">'ロギング 開始'</span><span class="token punctuation">)</span>

<span class="token keyword">try</span><span class="token punctuation">:</span>
	<span class="token comment">#デバックしたい処理</span>
<span class="token keyword">except</span><span class="token punctuation">:</span>
	lg<span class="token punctuation">.</span>exception<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>exc_info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#エラーをlog.txtに書き込む</span>
</code></pre></div>
<p>実行するとスクリプトを実行した階層にlog.txtが生成される。</p>
<h2>終わりに</h2>
<p>結局、実行形式にしたアプリに導入したが、ファイルを生成する事が出来ない（バグか仕様？）ので機能しなかった。普通のPythonスクリプトではもちろん使えるので今後、使用する機会があれば積極的に使っていきたい。
一応Githubにもコードを残しておいた。
<a href="https://github.com/wimpykid719/Pylogger">Pylogger</a></p>
<p>記事に関するコメント等は</p>
<p>🕊：<a href="https://twitter.com/Unemployed_jp">Twitter</a>
📺：<a href="https://www.youtube.com/channel/UCT3wLdiZS3Gos87f9fu4EOQ/featured?view_as=subscriber">Youtube</a>
📸：<a href="https://www.instagram.com/unemployed_jp/">Instagram</a>
👨🏻‍💻：<a href="https://github.com/wimpykid719?tab=repositories">Github</a>
😥：<a href="https://ja.stackoverflow.com/users/edit/22565">Stackoverflow</a></p>
<p>でも受け付けています。どこかにはいます。</p>
<h3>参照</h3>
<p><a href="https://qiita.com/__init__/items/91e5841ed53d55a7895e">Pythonでロギングを学ぼう - Qiita</a></p>
<p><a href="https://srbrnote.work/archives/1656">Pythonでログを出力するコード例【logging】</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[最近よく聞くISR, SPA, CSR, SSR ,SSG等のややこしい用語についてざっくり調べた。]]></title>
        <id>https://techblog-pink.vercel.app/posts/5ae3040453bc1b</id>
        <link href="https://techblog-pink.vercel.app/posts/5ae3040453bc1b"/>
        <updated>2021-02-16T15:00:00.000Z</updated>
        <summary type="html"><![CDATA[...]]></summary>
        <content type="html"><![CDATA[<h2>SPA（Single Page Application）</h2>
<p>フロント側でDOMをこねくり回してページを表示する。Google botの読み取りに難あり。</p>
<h2>CSR（Client Server Side Rendering）</h2>
<p>クライアント側でページを組み立てると書かれていたが、SPAとの違いは不明。
追記：同じ意味だった。</p>
<h2>SSR（Server Side Rendering）</h2>
<p>リクエスト時にビルドが走る。
サーバ側でDOMを組み立ててユーザに表示させる。従来のフレームワークを用いたWeb開発はこれに当てはまる。例；Ruby on rails、Django</p>
<h2>SSG（Static Site Generation）</h2>
<p>元々ビルドしておく。
SSRとそんな変わらないけど、先に静的サイトを用意しておいてそれを返すだけだから、SSRよりもページを早く表示できる。</p>
<h2>ISR（Incremental Static Regeneration）</h2>
<p>SSGの静的ページを生成する頻度を多くして、ページが頻繁に更新されるサイトにも対応したもの。</p>
<h2>SWR</h2>
<p>Reactのライブラリの一つ。
クライアント側のデータ取得を、Reactで状態管理しやすいようにしてくれるReact Hooksとそれを内包するライブラリ。</p>
<p>他にもこんな感じの用語があったら教えて下さい。</p>
<p>記事に関するコメント等は</p>
<p>🕊：<a href="https://twitter.com/Unemployed_jp">Twitter</a>
📺：<a href="https://www.youtube.com/channel/UCT3wLdiZS3Gos87f9fu4EOQ/featured?view_as=subscriber">Youtube</a>
📸：<a href="https://www.instagram.com/unemployed_jp/">Instagram</a>
👨🏻‍💻：<a href="https://github.com/wimpykid719?tab=repositories">Github</a>
😥：<a href="https://ja.stackoverflow.com/users/edit/22565">Stackoverflow</a></p>
<p>でも受け付けています。どこかにはいます。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonのrequestsを非同期にしてiTunes APIに高速にリクエストを投げるには]]></title>
        <id>https://techblog-pink.vercel.app/posts/96ef729c7a091d</id>
        <link href="https://techblog-pink.vercel.app/posts/96ef729c7a091d"/>
        <updated>2021-01-21T15:00:00.000Z</updated>
        <summary type="html"><![CDATA[...]]></summary>
        <content type="html"><![CDATA[<h2>最初に</h2>
<p>なんでか分からないけど、PythonのasyncはJavaScriptのasyncと比較しても使いづらい、そのため、threadに逃げてしまう。今回はその謎を探すために、PythonでITunes APIに非同期でリクエストを投げることを目標にasyncを勉強して行こうと思う。これは個人的なイメージだが、threadは実際にスレッドを2つ立て同時に動作させているが、asyncはたぶんスレッドは1つでも処理を中断して切り替える事（なんかJavsScriptのイベントループ）をやって非同期処理を実現してるからこっちのほうがリソースの消費が少ない気がする。</p>
<p>その辺を少しまとめてみた。</p>
<h3>threading（マルチスレッド）</h3>
<p>スレッドはプロセスの中にある処理単位で、同じプロセス内にあるスレッドはメモリを共有できる。</p>
<h3>multiprocessing（マルチプロセス）</h3>
<p>cpuの各コアに対してプロセスをあてる事ができる2コアなら2プロセスあてると効率的に処理を行える。</p>
<h3>asyncio（ノンブロッキング）</h3>
<p>一つのスレッドで複数の処理を切り替えながら行う。思った通りだった。</p>
<p>だからこんな感じの上下関係になる。</p>
<p>マルチプロセス > スレッド > ノンブロッキング</p>
<p>だからマルチスレッドでそのスレッド一つ一つにノンブロッキングで処理を行わせればかなり効率いい気がする。</p>
<p>今回はasyncio（ノンブロッキング）をPythonを用いてリクエストを非同期処理で送信する機能を実装するのが目標でそれを行うのに必要そうな用語等を周辺知識をまとめた。</p>
<p>学習コストの高い分野なので、個人的になんども挫折しそうになった。</p>
<p>使いこなせれば、普段のプログラムをさらに高速で動作させられるのでその価値はあると思う。</p>
<h2>Futureについて</h2>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">import</span> asyncio
<span class="token keyword">import</span> time

<span class="token comment">#計算を処理する部分</span>
<span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>future<span class="token punctuation">)</span><span class="token punctuation">:</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment"># 時間のかかる処理</span>
    future<span class="token punctuation">.</span>set_result<span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span>

future <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>futures<span class="token punctuation">.</span>Future<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">#計算を実行する部分</span>
f<span class="token punctuation">(</span>future<span class="token punctuation">)</span>

<span class="token keyword">if</span> future<span class="token punctuation">.</span>done<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    res <span class="token operator">=</span> future<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
</code></pre></div>
<p>これだけではfutureの利点が生かされず、いまいち何がしたいのかわかりません。ただ <code>future.done()</code> を使用してfutureオブジェクトに処理結果があればそれを出力する、この後に出てくるイベントループでは <code>"hello"</code> がセットされたら処理を終えてイベントループを終了するような使い方をする。詳しくはイベントループの項目に書いてあります。</p>
<h2>イベントループ</h2>
<p>これは登録された関数を実行する機能を持ちます。JavaScriptみたいですね。もしかするとasyncはPythonの処理を一時的にJavaScriptの非同期処理みたいにしてくれるのかもしれません。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">import</span> asyncio
<span class="token keyword">import</span> time

<span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>future<span class="token punctuation">)</span><span class="token punctuation">:</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment"># 時間のかかる処理</span>
    future<span class="token punctuation">.</span>set_result<span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span>

loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>
future <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>futures<span class="token punctuation">.</span>Future<span class="token punctuation">(</span><span class="token punctuation">)</span>
loop<span class="token punctuation">.</span>call_soon<span class="token punctuation">(</span>f<span class="token punctuation">,</span> future<span class="token punctuation">)</span>
loop<span class="token punctuation">.</span>run_forever<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div>
<p>上のコードでは、<code>asyncio.get_event_loop</code>を呼び出して<code>BaseEventLoop</code>オブジェクトを取得しています。そして、<code>call_soon</code>によって関数<code>f</code>を<code>loop</code>に登録しています。最後に<code>loop.run_forever()</code>でイベントループを実行しています。</p>
<p>これを実際実行すると、<code>run_forever()</code>で無限ループになっており永遠にプログラムが終了しません。代わりに、以下のように書くことで、関数<code>f()</code>の実行が終わった後に自動的にイベントループを停止することができます。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python">res <span class="token operator">=</span> loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>future<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
</code></pre></div>
<p><code>run_until_complete()</code>はどのようにして関数<code>f()</code>の完了を知ることができるのでしょうか。これには、<code>future</code>のコールバックという仕組みが用いられています。<code>run_until_complete()</code>ではまず<code>future.add_done_callback()</code>という関数を実行し、<code>future</code>にコールバックを設定しています。その後<code>run_forever()</code>が呼ばれ関数<code>f()</code>が実行されます。その後関数<code>f()</code>内で<code>future.set_result()</code>によって値が設定されると、<code>add_done_callback()</code>によって設定されたコールバックが呼ばれます。<code>run_until_complete()</code>が設定するコールバック内では、<code>loop.stop()</code>によってイベントループの終了を予約する処理を行っているため、<code>f()</code>の実行終了後にイベントループが停止します。</p>
<p>注意点としては、<code>future.set_result()</code>が実行されて即座に関数<code>f()</code>の実行が終了するわけではないことです。あくまで終了が予約されるだけで、実際は<code>return</code>まで実行が継続されます。</p>
<h3>イベントループを用いた複数の処理</h3>
<p>イベントループは複数の処理を実行した際に効果を実感できます。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">import</span> asyncio
<span class="token keyword">import</span> time

<span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>future<span class="token punctuation">,</span> tag<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"waiting for f(%d)"</span> <span class="token operator">%</span> tag<span class="token punctuation">)</span>
    future<span class="token punctuation">.</span>set_result<span class="token punctuation">(</span><span class="token string">"hello %d"</span> <span class="token operator">%</span> tag<span class="token punctuation">)</span>
    <span class="token keyword">return</span>

<span class="token comment">#イベントループを作成</span>
loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>
futures <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> tag <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
		<span class="token comment">#futureオブジェクトを作成</span>
    future <span class="token operator">=</span> loop<span class="token punctuation">.</span>create_future<span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token comment">#loop（イベントループ）に関数とfutureと関数の引数を登録する。</span>
    loop<span class="token punctuation">.</span>call_soon<span class="token punctuation">(</span>f<span class="token punctuation">,</span> future<span class="token punctuation">,</span> tag<span class="token punctuation">)</span>
		<span class="token comment"># futureの状態はfuturesに格納されて管理する。</span>
    futures <span class="token operator">+=</span> <span class="token punctuation">[</span>future<span class="token punctuation">]</span>
<span class="token comment">#イベントループを実際に実行する。ここでgatherでfuturesを配列から*で展開している。</span>
res <span class="token operator">=</span> loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>asyncio<span class="token punctuation">.</span>gather<span class="token punctuation">(</span><span class="token operator">*</span>futures<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>

<span class="token comment">#実行結果</span>
waiting <span class="token keyword">for</span> f<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
waiting <span class="token keyword">for</span> f<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
waiting <span class="token keyword">for</span> f<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
waiting <span class="token keyword">for</span> f<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
waiting <span class="token keyword">for</span> f<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
waiting <span class="token keyword">for</span> f<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
waiting <span class="token keyword">for</span> f<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
waiting <span class="token keyword">for</span> f<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
waiting <span class="token keyword">for</span> f<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token string">'hello 0'</span><span class="token punctuation">,</span> <span class="token string">'hello 1'</span><span class="token punctuation">,</span> <span class="token string">'hello 2'</span><span class="token punctuation">]</span>
</code></pre></div>
<p>このコードでは3つの処理を登録しています。</p>
<p>先ほどは <code>res = loop.run_until_complete(future)</code> としていましたが、futureの数が増えて配列で渡す場合には <code>asyncio.gather(*futures)</code> が必要みたいです。いまいちどのように機能しているのかは分からない。ただ <code>*</code> で配列を展開しているので <code>asyncio.gather(future, future, future...)</code> と引数で渡しているのは分かる。</p>
<p>実行結果から</p>
<p>この結果からわかるようにf(0),f(1),f(2)は並列で実行されているわけではないことに注意してください。ライブラリのソースコードを見れば分かるように、loop.run_until_complete()内ではloop._readyに登録されたコールバックを順次実行しているだけなのです。</p>
<p>なのでまだ実際に非同期処理が行われていない事がわかります。</p>
<h2>ジェネレータ</h2>
<p><code>__iter__</code> と <code>yield</code> を使用するとイベントループを非同期で実行できるのだが、なぜ非同期と関係ないイテレータを使用する話になるのかというと <code>__iter__</code> はイベントループに登録されるジェネレータオブジェクトに含まれるメソッドで、それと <code>yield</code> を使う事で処理を途中で中断して別の処理に移ったりするといった繊細な動作が出来るようになるのでここで説明に入ります。</p>
<p>詳しくはこの先で説明されています。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">generator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">yield</span> <span class="token number">1</span>
    <span class="token keyword">yield</span> <span class="token number">2</span>
    <span class="token keyword">yield</span> <span class="token number">3</span>
    <span class="token keyword">return</span> <span class="token string">"END"</span>

gg <span class="token operator">=</span> generator<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__iter__<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>gg<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>gg<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>gg<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">try</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>gg<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> StopIteration <span class="token keyword">as</span> e<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
</code></pre></div>
<p>ジェネレータは「イテレータを返す関数」つまりリスト等を生成する関数なのか？</p>
<p>違うイテレータは似ているがリストではない。イテレータの場合、配列から値が取り出された事を覚えている。</p>
<p>実行するとジェネレータオブジェクトが返される。ジェネレータオブジェクトはイテレータを表す関数 <code>__iter__</code> を実装している。</p>
<p>たぶんPythonのメソッドである。 <code>iter()</code> と関係がある気がする。</p>
<h3>iter()について深く見ていく</h3>
<p>リストやタプルなどの複数の要素を持つデータに対して、イテレータに変換する事で要素を最初から順番に取り出す事ができる機能。</p>
<p><strong>イテレータとイテラブル</strong></p>
<p>そうなのかリスト自体がイテレータかと思っていたがどうやら違うようだ...てっきりforループで使える物イテレータつまりそれにはリストが含まれると考えていたが、それはイテレータではなくイテラブルだった。</p>
<p>ややこしい</p>
<p>リスト：順番が決められたデータの集団を表すデータ構造</p>
<p>イテレータ：データ集団に対し順番にアクセスしてくためのオブジェクト</p>
<p>たぶんリストを拡張（変換？）したのがイテレータな気がする。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python">イテレータ <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>配列<span class="token punctuation">)</span>
要素 <span class="token operator">=</span> <span class="token builtin">next</span><span class="token punctuation">(</span>イテレータ<span class="token punctuation">)</span>
</code></pre></div>
<p>このような使い方をするので、まぁ変換の方が正しいのかもしれない。拡張したところでリストと機能変わんないし。</p>
<p>イテレータに変換する事で、リストに値を取り出したら覚えている機能が追加される。</p>
<p>いまいち使い所は分からないが、一度取り出した値を再び取り出すミス等を防げる。</p>
<p><code>for 変数 in 配列</code> を使えば順番に要素を取り出せるので <code>iter()</code> をわざわざ使うことはないだろう。個人的に思ってしまう。</p>
<p>その <code>for in</code> が <code>iter()</code> を使って実装されている。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>  <span class="token comment"># これはリスト</span>
l_iter <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span>  <span class="token comment"># リストからlist_iteratorを取り出す</span>
<span class="token builtin">next</span><span class="token punctuation">(</span>l_iter<span class="token punctuation">)</span>
<span class="token number">0</span>
<span class="token builtin">next</span><span class="token punctuation">(</span>l_iter<span class="token punctuation">)</span>
<span class="token number">1</span>
<span class="token builtin">next</span><span class="token punctuation">(</span>l_iter<span class="token punctuation">)</span>
<span class="token number">2</span>
<span class="token builtin">next</span><span class="token punctuation">(</span>l_iter<span class="token punctuation">)</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">"&#x3C;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&#x3C;</span>module<span class="token operator">></span>
StopIteration
</code></pre></div>
<p>このようにリストイテレータを順次 <code>next(...)</code> することで1つ1つリストの要素を取り出しています。 すべての要素が取り出されると、イテレーターは <code>StopIteration</code> を送出します。</p>
<p>???</p>
<p>なぜこのようになっているかというと、簡単に言えばforループの繰り返し処理を制御するためです。 リストをループするときに、ループがどこまで進んでいるかを管理するためにリストイテレーターが使われています。</p>
<blockquote>
<p>もしリスト自身がイテレーターであれば、1度ループしただけでリストはループできなくなってしまいます（ループの進行状況が管理されるので）。 そのために、リスト自身ではなくリストイテレーターさん（つまりイテレーター）にループの状況を管理してもらっています。Pythonってすごい！</p>
</blockquote>
<p>ここの表現が全く理解出来ない。<a href="https://ja.stackoverflow.com/questions/73381/python%e3%83%aa%e3%82%b9%e3%83%88%e3%81%a8%e3%82%a4%e3%83%86%e3%83%ac%e3%83%bc%e3%82%bf%e3%81%ab%e3%81%a4%e3%81%84%e3%81%a6/73385?noredirect=1#comment81581_73385">スタックオーバーフローに助けを求めた。</a></p>
<p>イテレータはリストと違い値を排出した事を覚えているので、一度プログラムから__next__を用いて取り出された場合その値は再び取り出す事は出来ないため、一度ループで全て取り出した後、再びループで回してもイテレータの場合値を取り出すことが出来ないという事だ。正直それがすごいかどうか分からない...紛らわしい表現だ。</p>
<p>イテレーターは同時にイテラブルでもあります。 なので、イテレーターは <code>for in ...</code> に渡せます。この場合、イテレーターは <code>iter(my_iterator)</code> をすると <code>my_iterator</code> 自身を返します。</p>
<p><strong>for in に似た機能をforなしで実装してみる。</strong></p>
<p>また、for文は以下のようにも模式的に書けます。 この <code>my_for</code> 関数は、第一引数にイテラブルを、第二引数にforブロックの処理に相当する関数を渡します。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">my_for</span><span class="token punctuation">(</span>iterable<span class="token punctuation">,</span> iter_func<span class="token punctuation">)</span><span class="token punctuation">:</span>
     it <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>iterable<span class="token punctuation">)</span>
     <span class="token keyword">try</span><span class="token punctuation">:</span>
         <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
             el <span class="token operator">=</span> <span class="token builtin">next</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>
             iter_func<span class="token punctuation">(</span>el<span class="token punctuation">)</span>
     <span class="token keyword">except</span> StopIteration<span class="token punctuation">:</span>
         <span class="token keyword">pass</span>

<span class="token keyword">def</span> <span class="token function">print_pow</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">:</span>
     <span class="token keyword">print</span><span class="token punctuation">(</span>el <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span>

my_for<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> print_pow<span class="token punctuation">)</span>

<span class="token comment">#実行結果</span>
<span class="token number">0</span>
<span class="token number">1</span>
<span class="token number">4</span>
<span class="token number">9</span>
</code></pre></div>
<h3>イテレータの種類</h3>
<ul>
<li>イテレーターではない（イテラブル）
<ul>
<li>文字列</li>
<li>リスト</li>
<li>タプル</li>
<li>rangeオブジェクト</li>
<li>辞書、辞書.keys()、辞書.values()、辞書.items()</li>
<li>集合</li>
</ul>
</li>
<li>イテレーター（イテラブル）
<ul>
<li>リストとかタプルとかrangeとかを <code>iter</code> したら返ってくるやつ</li>
<li>ジェネレーター</li>
<li>ファイルとかのI/O</li>
</ul>
</li>
</ul>
<h3><strong>iter</strong>()</h3>
<p>どうやらiter()とは少し使い方をみると違いがありそう。 <code>__</code> で囲まれたメソッドを特殊メソッドと呼ばれる物で <code>iter()</code> の内部では <code>__iter__</code> が呼ばれているみたい。違いはなかった...iter() = __iter__の認識で良さそう。</p>
<h3>特殊メソッドとは</h3>
<p>ここで少し特殊メソッドについて、学習していく。非同期処理と関係ないが毎回出てくる <code>__iter__</code> が</p>
<p>気持ち悪かったので慣れるためにも深く調べてみた。特に気にならない人は <a href="#__iter__%E3%81%AE%E7%B6%9A%E3%81%8D">__iter__の続き</a> から読んで頂けたら幸いです。</p>
<p>Pythonのクラスでは「特殊メソッド」と呼ばれるメソッドを定義（オーバライド=上書き）できる。</p>
<p>特殊メソッドとは、各種の演算子や組み込み関数（ <code>iter()</code> 、 <code>print()</code> 等）などの操作の対象として、独自のクラスを利用できるようにするための仕組みだと考えられる。</p>
<p>クラスを自分で定義している時に、適切な名前の特殊メソッドを適切にオーバライドする事で、次のような処理が可能になる。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
	<span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
		<span class="token comment">#ここに色々処理を書き込めば初期化時に処理を追加出来る（オーバライド）</span>
</code></pre></div>
<ul>
<li>インスタンスの生成と初期化</li>
<li>インスタンス同士の比較</li>
<li>他の型への変換</li>
<li>数値として演算</li>
<li>反復可能オブジェクト（コンテナ）的な動作</li>
<li>関数的な動作</li>
</ul>
<p>特殊メソッドの名前は、特定の処理を示す名前を、2つのアンダースコア「<strong>」で囲んだものになる。例えば、「<strong>init</strong>」は「インスタンスの初期化」を意味する「init」を「</strong>」で囲んだものになる。</p>
<p>インスタンスの生成と破壊に関係する特殊メソッド</p>
<p><code>__new__(cls, ...)</code> ：クラスのインスタンス生成時に呼び出される。</p>
<p><code>__init__(cls, ...)</code> ：クラスのインスタンス生成後に、それを初期化するために呼び出される。</p>
<p><code>__del__(cls, ...)</code> ：クラスのインスタンス破壊される時に呼び出される。</p>
<p>__new__メソッドは、クラスのインスタンス生成をカスタマイズする際に定義する。暗黙の第1パラメーターには「self」ではなく「cls」を指定する。インスタンスの生成自体は、親クラスの__new__メソッドを呼び出して、cls（とその他の引数）を指定する、つまり「 <code>super().__new__(cls, .....)</code> 」とするのが典型的なやり方、加えて、__new__メソッドでしか行えないインスタンスの初期化も行える。</p>
<p>__new__メソッドを定義した場合そこで作成されたインスタンスは__init__メソッドへ引き渡される。</p>
<p>__del__メソッドは、インスタンスが破壊されるタイミングで自動的に呼び出される。</p>
<p>特殊なリソースを破壊する必要がある際はこれを定義する必要がある。注意点はこのメソッドが呼び出されるタイミングだ。</p>
<p>「delインスタンス」を実行したタイミングで呼び出されるわけではない。</p>
<p>インスタンスが破壊されるのは、それに結び付けられている名前がなくなった時点なので注意が必要????</p>
<p>基底クラスで__del__メソッドが定義されているのであれば、それらを呼び出して、オブジェクトの破壊が確実に行われるようにする必要がある。</p>
<p>以下に例を示す</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'__new__'</span><span class="token punctuation">)</span>
        self <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>  <span class="token comment"># インスタンス生成を行う典型的なコード</span>
        self<span class="token punctuation">.</span>attr <span class="token operator">=</span> <span class="token string">'set in __new__'</span>  <span class="token comment"># ここでしかできない初期化処理を書いてもよい</span>
        <span class="token keyword">return</span> self  <span class="token comment"># 生成したインスタンスを返す</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'__init__'</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token comment"># インスタンスの初期化処理</span>

    <span class="token keyword">def</span> <span class="token function">__del__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment">#super().__del__()  # 基底クラスに__del__メソッドがあれば必ず呼び出す</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'__del__'</span><span class="token punctuation">)</span>  <span class="token comment"># インスタンスが破壊されるときに行う処理</span>

foo <span class="token operator">=</span> Foo<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># '__new__'と'__init__'が表示される</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'foo.attr:'</span><span class="token punctuation">,</span> foo<span class="token punctuation">.</span>attr<span class="token punctuation">)</span>  <span class="token comment"># 'foo.attr: set in __new__'</span>
bar <span class="token operator">=</span> foo
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'bar.name:'</span><span class="token punctuation">,</span> bar<span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token comment"># 'bar.name: foo'</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'del foo'</span><span class="token punctuation">)</span>  <span class="token comment"># この時点ではまだ生成したインスタンスには別名がある</span>
<span class="token keyword">del</span> foo
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'del bar'</span><span class="token punctuation">)</span>
<span class="token keyword">del</span> bar  <span class="token comment"># '__del__'：この時点でインスタンスを束縛する名前がなくなる</span>
</code></pre></div>
<p>この例では、__new__メソッドで「 <code>super().__new__(cls)</code> 」によりインスタンスを作成した後、「attr」という名前の属性（インスタンス変数）を定義して、それを <code>return self</code> で戻り値として返している。__init__メソッドでは、これを受け取り、それに対して「name」という名前の属性を設定している。これにより、インスタンスは2つの属性を持つことになる。</p>
<p>だから普段クラスを作成する時に__init__の引数にselfと書くのか!!!</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
	<span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
		<span class="token keyword">pass</span>
</code></pre></div>
<p>この時に書かれてないけど</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
	<span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>
		self <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>
		<span class="token keyword">return</span> self

	<span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
		<span class="token keyword">pass</span>
</code></pre></div>
<p>こうなってるのか。</p>
<p>なぜこのように内部的に__new__と__init__分けているのかというと、__init__メソッドはインスタンスの初期化に使うが、「変更不可能なオブジェクトを初期化できない」事がある。tupleクラス等のPythonに元々組み込まれたクラスのオブジェクトを初期化することは __init__では難しい。</p>
<p>基本的に__init__より前に実行されるオブジェクトの初期化は出来ない。そのため__new__メソッドを用いてオブジェクトが生成される前に初期化を行う。</p>
<p>そもそもそんな場面そうそう出くわすことないしイメージが全然湧かない。</p>
<p>上記の文も自分で書いておきながらいまいちイメージが難しい。</p>
<p>クラスオブジェクトが生成される際に実行される特殊メソッドの順番</p>
<ol>
<li><strong>new</strong></li>
<li><strong>init</strong></li>
</ol>
<p>となっているので、initより手前で生成されたオブジェクトは初期化出来ないよね。という事を言いたいだけだと思う。</p>
<p>個人的にはinitで出来るようにすればいいじゃんと思ってしまう。</p>
<p>下記に__new__メソッドでtupleクラスのオブジェクトを初期化するコードを示した。</p>
<p>※クラス tupleはpythonに組み込まれているクラス <code>class tuple([iterable])</code></p>
<p><a href="https://docs.python.org/ja/3/library/stdtypes.html?highlight=list#tuple">Built-in Types - Python 3.9.1 documentation</a></p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">NumberedTuple</span><span class="token punctuation">(</span><span class="token builtin">tuple</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> iterable<span class="token punctuation">)</span><span class="token punctuation">:</span>
				<span class="token comment">#引数が['foo','bar', 'baz']の場合</span>
        tmp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token keyword">for</span> idx<span class="token punctuation">,</span> value <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>iterable<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment">#こんな感じになる：[(0, 'foo'), (1, 'bar'), (2, 'baz')]</span>
        self <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span>
        <span class="token keyword">return</span> self

nt <span class="token operator">=</span> NumberedTuple<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span><span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'baz'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>nt<span class="token punctuation">)</span>  <span class="token comment"># ((0, 'foo'), (1, 'bar'), (2, 'baz'))</span>
</code></pre></div>
<p>tupleクラスを継承して、反復可能なオブジェクトを受け取り、「（インデックス、要素）」で構成されるタプルを要素とするタプルを生成するクラス</p>
<p>通常のtupleクラスが配列 <code>['foo','bar', 'baz']</code> からタプル  <code>('foo', 'bar', 'baz')</code> を生成するのを</p>
<p>配列 <code>['foo','bar', 'baz']</code> から2次元のタプル <code>((0, 'foo'), (1, 'bar'), (2, 'baz'))</code> を生成するクラスを作成している。</p>
<p>細かく見ていくと、enumerate関数はインデックスと要素を取り出しており返り値が2つになる。0, リスト[0] みたいな関係になっている。</p>
<p>それで作成したイテラブル（for inで回せる)なオブジェクトを親クラス（tupleクラス）の__new__メソッドに渡している。これにより、番号付きのタプルを生成できるようになる。このような変更不可能な型を基に派生クラスを定義するような際には、__new__メソッドでインスタンス生成と初期化の処理を独自に行う必要があるだろう。</p>
<p>ただこんな面倒な事しなくとも <code>tuple([(0, 'foo'), (1, 'bar'), (2, 'baz')])</code> でいいような気もするけどよく分からない。</p>
<h3>__iter__の続き</h3>
<p>特殊メソッドはこのようにして使用する。そろそろ __iter__に戻ろうと思う。</p>
<p>今まで出てきた用語の特徴をみると</p>
<p>反復可能オブジェクト：要素を一度に1つずつ返せるオブジェクト。</p>
<p>反復可能オブジェクトは、それが内包するイテレータを返す__iter__メソッドを持つ。</p>
<p>イテレータ：リストと似てfor inで回せる（反復可能オブジェクト）しかし、イテレータでは値の取り出しを覚えているので、一度取り出した値を再び取り出す事は出来ない。そして自身を戻り値とする__iter__メソッド、次の要素を返す__next__メソッドを持つ。</p>
<p>イテラブル：反復可能なオブジェクト、リスト、イテレータ等が含まれる。</p>
<p>大体こんな感じの意味合いになる。</p>
<p>リストやタプル、辞書、集合は典型的な反復可能オブジェクトだ。これらは内部にイテレータを持ち、for文などで要素を反復的に処理する際には、python内部で自動的にそれが使われているようになっている。</p>
<p>なお、反復可能オブジェクトの条件は__iter__メソッドを持つ事。そのためイテレータも反復可能なオブジェクトに入る。</p>
<p>ここではrangeクラスのオブジェクトを参考に上記の用語を実際に見ていこうと思う。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python">r <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">#実行結果</span>
<span class="token operator">&#x3C;</span><span class="token keyword">class</span> <span class="token string">'range'</span><span class="token operator">></span>
</code></pre></div>
<p>次にrangeクラスに__iter__が含まれているか確認する。 <code>dir()</code> を使用する事でオブジェクトに含まれるメソッド・プロパティを確認する事が出来る。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python">r <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">#実行結果</span>
<span class="token punctuation">[</span><span class="token string">'__bool__'</span><span class="token punctuation">,</span> <span class="token string">'__class__'</span><span class="token punctuation">,</span> <span class="token string">'__contains__'</span><span class="token punctuation">,</span> <span class="token string">'__delattr__'</span><span class="token punctuation">,</span> <span class="token string">'__dir__'</span><span class="token punctuation">,</span> <span class="token string">'__doc__'</span><span class="token punctuation">,</span> <span class="token string">'__eq__'</span><span class="token punctuation">,</span> <span class="token string">'__format__'</span><span class="token punctuation">,</span> <span class="token string">'__ge__'</span><span class="token punctuation">,</span> <span class="token string">'__getattribute__'</span><span class="token punctuation">,</span> <span class="token string">'__getitem__'</span><span class="token punctuation">,</span> <span class="token string">'__gt__'</span><span class="token punctuation">,</span> <span class="token string">'__hash__'</span><span class="token punctuation">,</span> <span class="token string">'__init__'</span><span class="token punctuation">,</span> <span class="token string">'__init_subclass__'</span><span class="token punctuation">,</span> <span class="token string">'__iter__'</span><span class="token punctuation">,</span> <span class="token string">'__le__'</span><span class="token punctuation">,</span> <span class="token string">'__len__'</span><span class="token punctuation">,</span> <span class="token string">'__lt__'</span><span class="token punctuation">,</span> <span class="token string">'__ne__'</span><span class="token punctuation">,</span> <span class="token string">'__new__'</span><span class="token punctuation">,</span> <span class="token string">'__reduce__'</span><span class="token punctuation">,</span> <span class="token string">'__reduce_ex__'</span><span class="token punctuation">,</span> <span class="token string">'__repr__'</span><span class="token punctuation">,</span> <span class="token string">'__reversed__'</span><span class="token punctuation">,</span> <span class="token string">'__setattr__'</span><span class="token punctuation">,</span> <span class="token string">'__sizeof__'</span><span class="token punctuation">,</span> <span class="token string">'__str__'</span><span class="token punctuation">,</span> <span class="token string">'__subclasshook__'</span><span class="token punctuation">,</span> <span class="token string">'count'</span><span class="token punctuation">,</span> <span class="token string">'index'</span><span class="token punctuation">,</span> <span class="token string">'start'</span><span class="token punctuation">,</span> <span class="token string">'step'</span><span class="token punctuation">,</span> <span class="token string">'stop'</span><span class="token punctuation">]</span>
</code></pre></div>
<p>rangeクラスには__iter__は含まれるが、__next__メソッドはないことがわかる。</p>
<p>よってrange反復可能オブジェクトだが、イテレータではない事がわかる。</p>
<p>そしてイテレータを取り出すには、__iter__メソッドを呼び出すか、組み込みのiter関数に反復可能オブジェクトを渡す。iter関数に反復可能オブジェクトを渡すと、そこから__iter__メソッドが呼び出されてイテレータが返されるようになっている。そのため、下の2行は同じことになる。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python">r <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>

range_iter <span class="token operator">=</span> r<span class="token punctuation">.</span>__iter__<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># イテレータを取り出す</span>
range_iter2 <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>  <span class="token comment"># イテレータを取り出す</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>range_iter<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>range_iter2<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">#実行結果</span>
<span class="token operator">&#x3C;</span><span class="token keyword">class</span> <span class="token string">'range_iterator'</span><span class="token operator">></span>
<span class="token operator">&#x3C;</span><span class="token keyword">class</span> <span class="token string">'range_iterator'</span><span class="token operator">></span>

</code></pre></div>
<p>ここでrangeクラスからイテレータのrange_iteratorを取り出す事で__next__メソッドが使えるようになる。</p>
<p>なんかややこしいね。rangeクラスはイテレータではなく__next__メソッドが使用出来ないが、その中に含まれるイテレータ range_iteratorを取り出すことでその中には__next__メソッドが含まれており、使用出来る。</p>
<p>range（__next__なし） > range_iterator（__next__あり）</p>
<p>勝手にイテレータの方が反復可能オブジェクトより便利な機能が追加される（値の取り出しを記憶する）から上位概念かと思ってたけど、そうではなさそう。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token comment">#さらに</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>range_iter<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># range_iterから次の値を取得</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>range_iter<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># range_iterから次の値を取得</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>range_iter2<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># range_iter2から次の値を取得</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>range_iter2<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># range_iter2から次の値を取得</span>

<span class="token comment">#実行結果</span>
<span class="token number">0</span>
<span class="token number">1</span>
<span class="token number">0</span>
<span class="token number">1</span>

<span class="token comment">#さらにrange_iterの値を全て取り出す</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>range_iter<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># range(3)で作成したので、要素はここで尽きる</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>range_iter<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># これ以降は例外が発生する</span>

<span class="token comment">#実行結果</span>
<span class="token number">2</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">"&#x3C;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&#x3C;</span>module<span class="token operator">></span>
StopIteration
</code></pre></div>
<p>一つのrangeオブジェクトから複数のイテレータを作成して独自に値の取り出し具合を管理する事が出来る。こんな機能いつ使うのか知らんが...</p>
<p>__next__メソッドは全ての値を取り出しさらに値を取り出そうとするとStopIteration例外を発生させる。</p>
<p>次に実際にカウントアップするイテレータを作成してみる。特に意味はないが、__iter__や__next__等の特殊メソッドを自作クラスでオーバーライドして自分が追加したい機能をどのように使用するか、そして大体__iter__と__next__メソッドの中身はこんな感じで実装されているんだという事を確認出来る。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">CountUpIterator</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> limit<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>limit <span class="token operator">=</span> limit
        self<span class="token punctuation">.</span>counter <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
    <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'__iter__ method called'</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> self
    <span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'__next__ method called'</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>counter <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>counter <span class="token operator">>=</span> self<span class="token punctuation">.</span>limit<span class="token punctuation">:</span>
            <span class="token keyword">raise</span> StopIteration<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>counter
</code></pre></div>
<p>__iter__自体は呼び出されたら <code>print()</code> で分かるようにしたのと 自身を返すだけなのでそこまで難しくない。</p>
<p>__next__は取り出しの状態管理する <code>self.counter</code> と <code>self.conter</code> の値が <code>self.limit</code> 以上になった際に例外 <code>StopIteration</code> が発生する。</p>
<p>上記のコードを実行してみる。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python">countup_iter <span class="token operator">=</span> CountUpIterator<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
countup_iter2 <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>countup_iter<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>countup_iter <span class="token keyword">is</span> countup_iter2<span class="token punctuation">)</span>

<span class="token comment">#実行結果</span>
__iter__method called
<span class="token boolean">True</span>
</code></pre></div>
<p><code>iter(countup_iter)</code> で 特殊メソッド __iter__が呼び出されてcontup_iter自身が戻り値で返ってくる。</p>
<p>そのため counter_iterとcounter_iter2は同じになる。</p>
<p>次は__next__メソッドを呼び出してみる。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>countup_iter<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>countup_iter2<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>countup_iter2<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>countup_iter<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">#実行結果</span>
__next__method called
<span class="token number">0</span>
__next__method called
<span class="token number">1</span>
__next__method called
<span class="token number">2</span>
__next__method called
StopItaration
</code></pre></div>
<p><code>self.count</code> を <code>-1</code> から始める事でカウントを0から行える。これで独自の__iter__と__next__メソッドを記述出来た。</p>
<p>ここまで来たら大体イテレータの意味が理解出来るようになったので、最初のジェネレータで出て来た文章に戻ろうと思う。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">generator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">yield</span> <span class="token number">1</span>
    <span class="token keyword">yield</span> <span class="token number">2</span>
    <span class="token keyword">yield</span> <span class="token number">3</span>
    <span class="token keyword">return</span> <span class="token string">"END"</span>

gg <span class="token operator">=</span> generator<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__iter__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#generator関数からイテレータを生成する。</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>gg<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>gg<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>gg<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">try</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>gg<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> StopIteration <span class="token keyword">as</span> e<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>value<span class="token punctuation">)</span>

<span class="token comment">#実行結果</span>
<span class="token number">1</span>
<span class="token number">2</span>
<span class="token number">3</span>
END
</code></pre></div>
<blockquote>
<p>実行するとジェネレータオブジェクトが返される。ジェネレータオブジェクトはイテレータを表す関数 <strong>iter</strong> を実装している。</p>
</blockquote>
<p>このたった2行を理解するのにとんでもない時間がかかったwww</p>
<p>generator関数のオブジェクトが返されてそれには__iter__メソッドが含まれているのでイテレータを取り出す事が出来るという事を言いたかったんだと思う。</p>
<h3>yieldとは???</h3>
<p>ジェネレータの中身の処理を一時的に止めると言われるがどういう事なのか??</p>
<p>これはreturnと比較する事で分かりやすくなります。</p>
<p>return：動作はシンプルで関数の処理を終了して、値を返す。</p>
<p>yeild：関数の処理をyeildが書かれた所で一旦停止して、値を返す。</p>
<p>比較したプログラムが下記になる。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
	c <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">200</span>
	<span class="token keyword">return</span> c

<span class="token keyword">def</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
	<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
		c <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">200</span>
		<span class="token keyword">yield</span> c

	c <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">20</span>
	<span class="token keyword">yield</span> c

test2 <span class="token operator">=</span> test2<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#generatorオブジェクト生成</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">(</span>test2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#test2のオブジェクトには__next__メソッドがある事を確認する。</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'1回目'</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>test2<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#next(test2)でもいい</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'2回目'</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>test2<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#next(test2)でもいい</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'3回目'</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>test2<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#next(test2)でもいい</span>

<span class="token comment">#実行結果</span>
<span class="token number">1</span>回目
<span class="token number">300</span>
<span class="token number">300</span> 
<span class="token number">2</span>回目
<span class="token number">300</span>
<span class="token number">30</span> <span class="token comment">#yieldの場合1回目と値が異なる。</span>
<span class="token number">3</span>回目
<span class="token number">300</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">"yieldIter.py"</span><span class="token punctuation">,</span> line <span class="token number">26</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&#x3C;</span>module<span class="token operator">></span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>test2<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#next(test2)でもいい</span>
StopIteration
</code></pre></div>
<p>yieldの回数以上に__next__メソッドで呼び出すとStopIterationエラーを返す。</p>
<p><strong>for文内でyieldが使われる場合</strong></p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        c <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">200</span>
        <span class="token keyword">yield</span> c
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'hello：</span><span class="token interpolation"><span class="token punctuation">{</span>i<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>

    c <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">20</span>
    <span class="token keyword">yield</span> c

test2 <span class="token operator">=</span> test2<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#generatorオブジェクト生成</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'1回目'</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>test2<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#next(test2)でもいい</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'2回目'</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>test2<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#next(test2)でもいい</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'3回目'</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>test2<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#next(test2)でもいい</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'4回目'</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>test2<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#next(test2)でもいい</span>

<span class="token comment">#実行結果</span>
<span class="token number">1</span>回目
<span class="token number">200</span>
<span class="token number">2</span>回目
hello：<span class="token number">0</span>
<span class="token number">201</span>
<span class="token number">3</span>回目
hello：<span class="token number">1</span>
<span class="token number">202</span>
<span class="token number">4</span>回目
hello：<span class="token number">2</span>
<span class="token number">30</span>
</code></pre></div>
<p>ループ文にyieldを入れるとループ回数分実行される。なのでループする回数と__next__での処理の進みがずれてややこしくなる。</p>
<p>イテレータがループした事覚えてるからyieldもそんな感じで実行された事を覚えてると勝手に思い込んでいたがどうや少し違うみたい。</p>
<p>1回目の__next__ではyieldの部分で一度ループを抜け処理を中断して、</p>
<p>2回目の__next__でprint()してまたyieldまで処理を進めてます。</p>
<p>__next__は2回目だけどprintが実行されたループのiの値が1回目の0のままだから本当に作業を中断した状態からの再開ってのがわかった。</p>
<h3>yieldで記述するメリット</h3>
<p>こうする事で一度に処理するのではなく少しずつ処理を行うことできる。メモリの使用量を節約できる。</p>
<p>記事で書かれていた例</p>
<blockquote>
<p>単純な例ですが、たとえば 1GB の巨大なテキストファイルがあるとします。そして、この巨大なファイルを読み込み、データを渡してくれる関数を作るとします。これを普通にやろうとすると、受け渡し用のメモリが 1GB という巨大なサイズになってしまいます。ところが yield を使えば、少量、たとえば 1 行づつデータを読み込み、その都度 yield すればいいので、メモリの使用量はほんの僅かで済んでしまいます。</p>
</blockquote>
<p><a href="http://ailaby.com/yield/">python の yield。サクッと理解するには return と比較</a></p>
<h3>yield fromの使い方</h3>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">generator1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">yield</span> <span class="token string">'one'</span>
 
<span class="token keyword">def</span> <span class="token function">generator2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">yield</span> <span class="token string">'two'</span>
 
<span class="token keyword">def</span> <span class="token function">generator</span><span class="token punctuation">(</span>g1<span class="token punctuation">,</span> g2<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">yield</span> <span class="token keyword">from</span> g1
    <span class="token keyword">yield</span> <span class="token keyword">from</span> g2
 
gen <span class="token operator">=</span> generator<span class="token punctuation">(</span>generator1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> generator2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 
<span class="token keyword">for</span> x <span class="token keyword">in</span> gen<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>

<span class="token comment">#実行結果</span>
one 
two
</code></pre></div>
<p>yieldを含む関数を引数に取ることで、 <code>yield from 引数に取った関数</code> で別の関数で呼ぶ事ができる。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">generator2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">yield</span> <span class="token number">1</span>
    <span class="token keyword">yield</span> <span class="token number">2</span>
    <span class="token keyword">yield</span> <span class="token number">3</span>
    <span class="token keyword">return</span> <span class="token string">"END"</span>

<span class="token keyword">def</span> <span class="token function">generator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    a <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token keyword">from</span> generator2<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> a

gg <span class="token operator">=</span> generator<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__iter__<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>gg<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>gg<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>gg<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">try</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>gg<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> StopIteration <span class="token keyword">as</span> e<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>value<span class="token punctuation">)</span>

<span class="token comment">#実行結果</span>
<span class="token comment">#実行結果</span>
<span class="token number">1</span>
<span class="token number">2</span>
<span class="token number">3</span>
END
</code></pre></div>
<p>yieldの説明前のコードに戻るけど、 <code>yield from</code> を使用してyieldを含んだ関数を呼んで実行できる。実行結果は同じ。 <code>yield from</code> は他のイテレータを指定する。</p>
<h3>yieldを使用して途中でイベントループを切り替える。（非同期処理ではない）</h3>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">import</span> asyncio
<span class="token keyword">import</span> time

<span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">yield</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"waiting for f(%d)"</span> <span class="token operator">%</span> tag<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token string">"hello %d"</span> <span class="token operator">%</span> tag

loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>
tasks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> tag <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    task <span class="token operator">=</span> f<span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token comment">#最初のyieldのおかげでタスクが3つ出来る。</span>
    tasks <span class="token operator">+=</span> <span class="token punctuation">[</span>task<span class="token punctuation">]</span>
res <span class="token operator">=</span> loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>asyncio<span class="token punctuation">.</span>gather<span class="token punctuation">(</span><span class="token operator">*</span>tasks<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#イベントループを処理が全て終了するまで実行</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>

<span class="token comment">#実行結果 1秒毎に結果が出力される。</span>
<span class="token comment"># yield 出力はされないが最初はyieldまで実行されている</span>
<span class="token comment"># yield</span>
<span class="token comment"># yield</span>
waiting <span class="token keyword">for</span> f<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
waiting <span class="token keyword">for</span> f<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
waiting <span class="token keyword">for</span> f<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
waiting <span class="token keyword">for</span> f<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
waiting <span class="token keyword">for</span> f<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
waiting <span class="token keyword">for</span> f<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
waiting <span class="token keyword">for</span> f<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
waiting <span class="token keyword">for</span> f<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
waiting <span class="token keyword">for</span> f<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token string">'hello 0'</span><span class="token punctuation">,</span> <span class="token string">'hello 1'</span><span class="token punctuation">,</span> <span class="token string">'hello 2'</span><span class="token punctuation">]</span>
</code></pre></div>
<p>上記のコードではまだ非同期処理とは言えずyieldでイベントループをyieldの所で切り替えているだけ実行には9秒ほどかかる。</p>
<p>yieldによってどのような動作になっているのかより詳細に見ていくためにコードを追加した。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">import</span> asyncio
<span class="token keyword">import</span> time

<span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'yield：</span><span class="token interpolation"><span class="token punctuation">{</span>tag<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'_の中身：</span><span class="token interpolation"><span class="token punctuation">{</span>_<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>
        <span class="token keyword">yield</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"waiting for f(%d)"</span> <span class="token operator">%</span> tag<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token string">"hello %d"</span> <span class="token operator">%</span> tag

loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>
tasks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> tag <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    task <span class="token operator">=</span> f<span class="token punctuation">(</span>tag<span class="token punctuation">)</span>
    tasks <span class="token operator">+=</span> <span class="token punctuation">[</span>task<span class="token punctuation">]</span>
res <span class="token operator">=</span> loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>asyncio<span class="token punctuation">.</span>gather<span class="token punctuation">(</span><span class="token operator">*</span>tasks<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>

<span class="token comment">#実行結果</span>
<span class="token keyword">yield</span>：<span class="token number">0</span><span class="token comment">#ここが最初のyield3行</span>
_の中身：<span class="token number">0</span>
<span class="token keyword">yield</span>：<span class="token number">1</span><span class="token comment">#ここが最初のyield3行</span>
_の中身：<span class="token number">0</span>
<span class="token keyword">yield</span>：<span class="token number">2</span><span class="token comment">#ここが最初のyield3行</span>
_の中身：<span class="token number">0</span>
<span class="token comment">#waiting for 手前までは一気に出力される。</span>
<span class="token comment">#手前で1秒待ってから次の処理に移るその際イベントループ自体が止まるので非同期処理にならない。</span>
waiting <span class="token keyword">for</span> f<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#loop.run_until_completeによってタスクが実行される。</span>

<span class="token keyword">yield</span>：<span class="token number">0</span>
_の中身：<span class="token number">1</span><span class="token comment">#ここでイベントループが0→1に切り替わる</span>

waiting <span class="token keyword">for</span> f<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#切り替わって2回目のforループのyieldまで処理を進める。この動作を繰り返す。</span>
<span class="token keyword">yield</span>：<span class="token number">1</span>
_の中身：<span class="token number">1</span><span class="token comment">#ここで再びイベントループが1→2に切り替わる。</span>

waiting <span class="token keyword">for</span> f<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">#f(2)の2回目のforループのyieldまで処理を進める。</span>
<span class="token keyword">yield</span>：<span class="token number">2</span>
_の中身：<span class="token number">1</span>

waiting <span class="token keyword">for</span> f<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token keyword">yield</span>：<span class="token number">0</span>
_の中身：<span class="token number">2</span>

waiting <span class="token keyword">for</span> f<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">yield</span>：<span class="token number">1</span>
_の中身：<span class="token number">2</span>

waiting <span class="token keyword">for</span> f<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token keyword">yield</span>：<span class="token number">2</span>
_の中身：<span class="token number">2</span>

waiting <span class="token keyword">for</span> f<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
waiting <span class="token keyword">for</span> f<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
waiting <span class="token keyword">for</span> f<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token string">'hello 0'</span><span class="token punctuation">,</span> <span class="token string">'hello 1'</span><span class="token punctuation">,</span> <span class="token string">'hello 2'</span><span class="token punctuation">]</span>
</code></pre></div>
<p>上記のイベントループ内の処理が複雑で理解出来ないから図にしてみた。処理は矢印の方向に向かって進む。</p>
<p>waiting for 手前までは一気に出力される。
手前で1秒待ってから次の処理に移るその際イベントループ自体が止まるので非同期処理にならない。</p>
<p><img src="https://storage.googleapis.com/zenn-user-upload/i72imo6p68buevthhee8xefl4fps" alt=""></p>
<p>上記の処理だと複雑で分かりにく人のためにイベントループ内のタスクを減らして <code>f(0)</code> だけにしてみた。こっちの方がシンプルで流れが見やすいと思う。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">import</span> asyncio

<span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'yield：</span><span class="token interpolation"><span class="token punctuation">{</span>tag<span class="token punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">{</span>_<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>
        <span class="token keyword">yield</span> 
    <span class="token keyword">return</span> <span class="token string">"hello %d"</span> <span class="token operator">%</span> tag

loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>
res <span class="token operator">=</span> loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>

<span class="token comment">#実行結果</span>
<span class="token keyword">yield</span>：<span class="token number">0</span> <span class="token number">0</span>
<span class="token keyword">yield</span>：<span class="token number">0</span> <span class="token number">1</span>
<span class="token keyword">yield</span>：<span class="token number">0</span> <span class="token number">2</span>
hello <span class="token number">0</span>
</code></pre></div>
<p>上記の処理をイベントループ自体を止めずに、個別のイベント処理に待機処理を与えて待機させる事にした。</p>
<p>実際に待機中に他のイベントループを処理するには <code>loop.call_later()</code> 関数を使用する。指定秒数だけ待った後に与えられた関数を実行する。</p>
<p>これで例えば1秒後に処理を再開するとセットしておけばイベントループを止める事なく次の処理を行う事ができる。そしてその処理はすぐに別のイベント処理の一秒後に処理を再開するまで進みそれをf(0)~f(2)まで行う。この処理はとても早く行われ1秒が経過する前に終わる。そして1秒後のf(0)の処理が再開されるころにはf(1)、f(2)の待機処理の1秒も経過しておりほぼ同時に <code>waiting for f(0)~f(2)</code> が出力される。</p>
<p>これで3つの処理が同時に進んだ様に錯覚する。実際には1つのスレッドでイベントを切り替えて処理しているだけなので完全な並列ではない。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">import</span> asyncio
<span class="token keyword">import</span> time

<span class="token keyword">def</span> <span class="token function">my_sleep</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">_cb_set_result</span><span class="token punctuation">(</span>fut<span class="token punctuation">)</span><span class="token punctuation">:</span>
        fut<span class="token punctuation">.</span>set_result<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span>
    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_running_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#現在実行中のイベントループを返すなければエラーが発生</span>
    future <span class="token operator">=</span> loop<span class="token punctuation">.</span>create_future<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#futureオブジェクトを作成する。</span>
    h <span class="token operator">=</span> loop<span class="token punctuation">.</span>call_later<span class="token punctuation">(</span>delay<span class="token punctuation">,</span> _cb_set_result<span class="token punctuation">,</span> future<span class="token punctuation">)</span><span class="token comment">#delay分待ってから_cd_set_resultを実行する。</span>
    <span class="token comment">#今回の場合は1秒後に_cd_set_resultが実行される。</span>
		<span class="token keyword">yield</span> <span class="token keyword">from</span> future <span class="token comment">#futureインスタンスがイテレータなのでyield fromを使用する。</span>

<span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">yield</span> <span class="token keyword">from</span> my_sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#なぜこれで1秒待つとまとめて3行出力されるのか分からん。</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"waiting for f(%d)"</span> <span class="token operator">%</span> tag<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token string">"hello %d"</span> <span class="token operator">%</span> tag

loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#イベントループ作成</span>
tasks <span class="token operator">=</span> <span class="token punctuation">[</span>f<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment">#3つf()のタスクを作成</span>
ret <span class="token operator">=</span> loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>asyncio<span class="token punctuation">.</span>gather<span class="token punctuation">(</span><span class="token operator">*</span>tasks<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>

<span class="token comment">#実行結果</span>
waiting <span class="token keyword">for</span> f<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
waiting <span class="token keyword">for</span> f<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
waiting <span class="token keyword">for</span> f<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token comment">#1秒後</span>
waiting <span class="token keyword">for</span> f<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
waiting <span class="token keyword">for</span> f<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
waiting <span class="token keyword">for</span> f<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token comment">#1秒後と間隔を開けて更新される。</span>
waiting <span class="token keyword">for</span> f<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
waiting <span class="token keyword">for</span> f<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
waiting <span class="token keyword">for</span> f<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token string">'hello 0'</span><span class="token punctuation">,</span> <span class="token string">'hello 1'</span><span class="token punctuation">,</span> <span class="token string">'hello 2'</span><span class="token punctuation">]</span>
</code></pre></div>
<p>それぞれの構文を見ていこうと思う。</p>
<p><code>asyncio.get_event_loop()</code> ：イベントループを作成する。カレントスレッドにカレントイベントループがなければ自動的にイベントループを作り，それをカレントイベントループに設定する。一度設定し，再度作っても同じカレントイベントループになる。</p>
<p>その証拠にloopとloop_2は全く同じものになる。</p>
<p>今は関係ないが、個別で別々のイベントループは作れないのだろうか???</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">import</span> asyncio

loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>
loop_2 <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>loop <span class="token keyword">is</span> loop_2<span class="token punctuation">)</span> 

<span class="token comment">#実行結果</span>
<span class="token boolean">True</span>
</code></pre></div>
<p><code>asyncio.new_event_loop()</code> ：これを使う事で個別のイベントループを作れそうだ。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">import</span> asyncio

loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>
loop_2 <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>new_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>loop <span class="token keyword">is</span> loop_2<span class="token punctuation">)</span> 

<span class="token comment">#実行結果</span>
<span class="token boolean">False</span>

</code></pre></div>
<p><code>asyncio.get_running_loop()</code> ：現在実行中のイベントループを返す。イベントループがなければ例外が発生する。</p>
<p><code>loop.run_until_complete(future)</code> ：引数future（Futureのインスタンス）が完了するまで実行する。引数がコルーチンの場合は，asyncio.Taskとして実行するまで予約される。Futureの戻り値か例外を返す。</p>
<p>Futureインスタンス</p>
<p>結果を代入する箱と思われがちだが、実際にはイテレータそのため、 <code>yield</code> ではなく <code>yield from</code> を使用する。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Future</span><span class="token punctuation">:</span>
    <span class="token comment">#....</span>
    <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">yield</span> self
</code></pre></div>
<p>こんな感じになってる。</p>
<p>正直最初の頃すぎて、忘れてしまっているが、ジェネレータを使わないfutureを引数に取ってイベントループを実行するバージョンでは、 <code>loop.call_soon()</code> を呼び出して関数 <code>f()</code> をイベントループに登録していましたが、ジェネレータでは <code>tasks = []</code> にイベントを登録して <code>run_until_complete()</code> に渡していました。 <code>run_until_complete()</code> では渡された引数がジェネレータオブジェクト（yieldが含まれた関数）の場合Taskインスタンスを生成して、それを生成時に内部で <code>loop.call_soon()</code> を実行する。</p>
<h2>async、awaitキーワードの登場</h2>
<p>やっとここで難しいジェネレータを抜け出し先ほどの分かりにくいコードをasync, awaitを使って書き換えていく。</p>
<p>前回はジェネレータオブジェクトをイベントループに登録していたが、今回はそのジェネレータがコルーチンに変わる。</p>
<p>コルーチン：いったん処理を中断した後、続きから処理を再開できる。先ほどやってきたyieldをもつジェネレータオブジェクトと変わりないです。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">import</span> asyncio
<span class="token keyword">import</span> time

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#ここで処理が中断して1秒後に再開する。</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"waiting for f(%d)"</span> <span class="token operator">%</span> tag<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token string">"hello %d"</span> <span class="token operator">%</span> tag

loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>
tasks <span class="token operator">=</span> <span class="token punctuation">[</span>f<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
ret <span class="token operator">=</span> loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>asyncio<span class="token punctuation">.</span>gather<span class="token punctuation">(</span><span class="token operator">*</span>tasks<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>
</code></pre></div>
<p>先ほどよりだいぶシンプルになった。</p>
<p><code>async</code> を前に付けた関数はコルーチンになる。そしてそれを先ほどのジェネレータのように <code>tasks = []</code> に格納できる。</p>
<h3>iTunesのapiに非同期でリクエスト投げる。</h3>
<p>ここからrequestsの処理を非同期にしていきたいと思う。</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">import</span> time
<span class="token keyword">import</span> json
<span class="token keyword">import</span> asyncio
<span class="token keyword">import</span> requests

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>
	res <span class="token operator">=</span> <span class="token keyword">await</span> loop<span class="token punctuation">.</span>run_in_executor<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">,</span> url<span class="token punctuation">)</span>
	<span class="token keyword">return</span> res<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>

songName <span class="token operator">=</span> <span class="token string">'愛のままに feat. 唾奇'</span>

urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f'https://itunes.apple.com/search?term=</span><span class="token interpolation"><span class="token punctuation">{</span>songName<span class="token punctuation">}</span></span><span class="token string">&#x26;media=music&#x26;entity=song&#x26;country=jp&#x26;lang=ja_jp&#x26;limit=10'</span></span><span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f'https://itunes.apple.com/search?term=</span><span class="token interpolation"><span class="token punctuation">{</span>songName<span class="token punctuation">}</span></span><span class="token string">&#x26;media=music&#x26;entity=song&#x26;limit=10'</span></span><span class="token punctuation">]</span>
loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>
tasks <span class="token operator">=</span> <span class="token punctuation">[</span>f<span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">]</span>
start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
ret <span class="token operator">=</span> loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>asyncio<span class="token punctuation">.</span>gather<span class="token punctuation">(</span><span class="token operator">*</span>tasks<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>
end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'実行時間：</span><span class="token interpolation"><span class="token punctuation">{</span>end<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>

<span class="token comment">#実行結果</span>
<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'resultCount'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'results'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'wrapperType'</span><span class="token punctuation">:</span> <span class="token string">'track'</span><span class="token punctuation">,</span> <span class="token string">'kind'</span><span class="token punctuation">:</span> <span class="token string">'song'</span><span class="token punctuation">,</span> <span class="token string">'artistId'</span><span class="token punctuation">:</span> <span class="token number">370539771</span><span class="token punctuation">,</span> <span class="token string">'collectionId'</span><span class="token punctuation">:</span> <span class="token number">1468067871</span><span class="token punctuation">,</span> <span class="token string">'trackId'</span><span class="token punctuation">:</span> <span class="token number">1468068067</span><span class="token punctuation">,</span> <span class="token string">'artistName'</span><span class="token punctuation">:</span> <span class="token string">'BASI'</span><span class="token punctuation">,</span> <span class="token string">'collectionName'</span><span class="token punctuation">:</span> <span class="token string">'切愛'</span><span class="token punctuation">,</span> <span class="token string">'trackName'</span><span class="token punctuation">:</span> <span class="token string">'愛のままに feat. 唾奇'</span><span class="token punctuation">,</span> <span class="token string">'collectionCensoredName'</span><span class="token punctuation">:</span> <span class="token string">'切愛'</span><span class="token punctuation">,</span> <span class="token string">'trackCensoredName'</span><span class="token punctuation">:</span> <span class="token string">'愛のままに feat. 唾奇'</span><span class="token punctuation">,</span> <span class="token string">'artistViewUrl'</span><span class="token punctuation">:</span> <span class="token string">'https://music.apple.com/jp/artist/basi/370539771?uo=4'</span><span class="token punctuation">,</span> <span class="token string">'collectionViewUrl'</span><span class="token punctuation">:</span> <span class="token string">'https://music.apple.com/jp/album/%E6%84%9B%E3%81%AE%E3%81%BE%E3%81%BE%E3%81%AB-feat-%E5%94%BE%E5%A5%87/1468067871?i=1468068067&#x26;uo=4'</span><span class="token punctuation">,</span> <span class="token string">'trackViewUrl'</span><span class="token punctuation">:</span> <span class="token string">'https://music.apple.com/jp/album/%E6%84%9B%E3%81%AE%E3%81%BE%E3%81%BE%E3%81%AB-feat-%E5%94%BE%E5%A5%87/1468067871?i=1468068067&#x26;uo=4'</span><span class="token punctuation">,</span> <span class="token string">'previewUrl'</span><span class="token punctuation">:</span> <span class="token string">'https://audio-ssl.itunes.apple.com/itunes-assets/AudioPreview123/v4/1a/7a/28/1a7a288f-5107-f412-9772-81481d3bf921/mzaf_4891237580224207650.plus.aac.p.m4a'</span><span class="token punctuation">,</span> <span class="token string">'artworkUrl30'</span><span class="token punctuation">:</span> <span class="token string">'https://is2-ssl.mzstatic.com/image/thumb/Music123/v4/0f/93/e2/0f93e249-6b57-6d55-8550-9f8a997ccd4a/source/30x30bb.jpg'</span><span class="token punctuation">,</span> <span class="token string">'artworkUrl60'</span><span class="token punctuation">:</span> <span class="token string">'https://is2-ssl.mzstatic.com/image/thumb/Music123/v4/0f/93/e2/0f93e249-6b57-6d55-8550-9f8a997ccd4a/source/60x60bb.jpg'</span><span class="token punctuation">,</span> <span class="token string">'artworkUrl100'</span><span class="token punctuation">:</span> <span class="token string">'https://is2-ssl.mzstatic.com/image/thumb/Music123/v4/0f/93/e2/0f93e249-6b57-6d55-8550-9f8a997ccd4a/source/100x100bb.jpg'</span><span class="token punctuation">,</span> <span class="token string">'collectionPrice'</span><span class="token punctuation">:</span> <span class="token number">2037.0</span><span class="token punctuation">,</span> <span class="token string">'trackPrice'</span><span class="token punctuation">:</span> <span class="token number">255.0</span><span class="token punctuation">,</span> <span class="token string">'releaseDate'</span><span class="token punctuation">:</span> <span class="token string">'2019-06-26T07:00:00Z'</span><span class="token punctuation">,</span> <span class="token string">'collectionExplicitness'</span><span class="token punctuation">:</span> <span class="token string">'notExplicit'</span><span class="token punctuation">,</span> <span class="token string">'trackExplicitness'</span><span class="token punctuation">:</span> <span class="token string">'notExplicit'</span><span class="token punctuation">,</span> <span class="token string">'discCount'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'discNumber'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'trackCount'</span><span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">'trackNumber'</span><span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token string">'trackTimeMillis'</span><span class="token punctuation">:</span> <span class="token number">266333</span><span class="token punctuation">,</span> <span class="token string">'country'</span><span class="token punctuation">:</span> <span class="token string">'JPN'</span><span class="token punctuation">,</span> <span class="token string">'currency'</span><span class="token punctuation">:</span> <span class="token string">'JPY'</span><span class="token punctuation">,</span> <span class="token string">'primaryGenreName'</span><span class="token punctuation">:</span> <span class="token string">'ヒップホップ／ラップ'</span><span class="token punctuation">,</span> <span class="token string">'isStreamable'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'resultCount'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'results'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'wrapperType'</span><span class="token punctuation">:</span> <span class="token string">'track'</span><span class="token punctuation">,</span> <span class="token string">'kind'</span><span class="token punctuation">:</span> <span class="token string">'song'</span><span class="token punctuation">,</span> <span class="token string">'artistId'</span><span class="token punctuation">:</span> <span class="token number">370539771</span><span class="token punctuation">,</span> <span class="token string">'collectionId'</span><span class="token punctuation">:</span> <span class="token number">1468067871</span><span class="token punctuation">,</span> <span class="token string">'trackId'</span><span class="token punctuation">:</span> <span class="token number">1468068067</span><span class="token punctuation">,</span> <span class="token string">'artistName'</span><span class="token punctuation">:</span> <span class="token string">'BASI'</span><span class="token punctuation">,</span> <span class="token string">'collectionName'</span><span class="token punctuation">:</span> <span class="token string">'Setsuai'</span><span class="token punctuation">,</span> <span class="token string">'trackName'</span><span class="token punctuation">:</span> <span class="token string">'Ainomamani (feat. Tsubaki)'</span><span class="token punctuation">,</span> <span class="token string">'collectionCensoredName'</span><span class="token punctuation">:</span> <span class="token string">'Setsuai'</span><span class="token punctuation">,</span> <span class="token string">'trackCensoredName'</span><span class="token punctuation">:</span> <span class="token string">'Ainomamani (feat. Tsubaki)'</span><span class="token punctuation">,</span> <span class="token string">'artistViewUrl'</span><span class="token punctuation">:</span> <span class="token string">'https://music.apple.com/us/artist/basi/370539771?uo=4'</span><span class="token punctuation">,</span> <span class="token string">'collectionViewUrl'</span><span class="token punctuation">:</span> <span class="token string">'https://music.apple.com/us/album/ainomamani-feat-tsubaki/1468067871?i=1468068067&#x26;uo=4'</span><span class="token punctuation">,</span> <span class="token string">'trackViewUrl'</span><span class="token punctuation">:</span> <span class="token string">'https://music.apple.com/us/album/ainomamani-feat-tsubaki/1468067871?i=1468068067&#x26;uo=4'</span><span class="token punctuation">,</span> <span class="token string">'previewUrl'</span><span class="token punctuation">:</span> <span class="token string">'https://audio-ssl.itunes.apple.com/itunes-assets/AudioPreview123/v4/1a/7a/28/1a7a288f-5107-f412-9772-81481d3bf921/mzaf_4891237580224207650.plus.aac.p.m4a'</span><span class="token punctuation">,</span> <span class="token string">'artworkUrl30'</span><span class="token punctuation">:</span> <span class="token string">'https://is2-ssl.mzstatic.com/image/thumb/Music123/v4/0f/93/e2/0f93e249-6b57-6d55-8550-9f8a997ccd4a/source/30x30bb.jpg'</span><span class="token punctuation">,</span> <span class="token string">'artworkUrl60'</span><span class="token punctuation">:</span> <span class="token string">'https://is2-ssl.mzstatic.com/image/thumb/Music123/v4/0f/93/e2/0f93e249-6b57-6d55-8550-9f8a997ccd4a/source/60x60bb.jpg'</span><span class="token punctuation">,</span> <span class="token string">'artworkUrl100'</span><span class="token punctuation">:</span> <span class="token string">'https://is2-ssl.mzstatic.com/image/thumb/Music123/v4/0f/93/e2/0f93e249-6b57-6d55-8550-9f8a997ccd4a/source/100x100bb.jpg'</span><span class="token punctuation">,</span> <span class="token string">'collectionPrice'</span><span class="token punctuation">:</span> <span class="token number">12.99</span><span class="token punctuation">,</span> <span class="token string">'trackPrice'</span><span class="token punctuation">:</span> <span class="token number">1.29</span><span class="token punctuation">,</span> <span class="token string">'releaseDate'</span><span class="token punctuation">:</span> <span class="token string">'2019-06-26T07:00:00Z'</span><span class="token punctuation">,</span> <span class="token string">'collectionExplicitness'</span><span class="token punctuation">:</span> <span class="token string">'notExplicit'</span><span class="token punctuation">,</span> <span class="token string">'trackExplicitness'</span><span class="token punctuation">:</span> <span class="token string">'notExplicit'</span><span class="token punctuation">,</span> <span class="token string">'discCount'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'discNumber'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'trackCount'</span><span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">'trackNumber'</span><span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token string">'trackTimeMillis'</span><span class="token punctuation">:</span> <span class="token number">266333</span><span class="token punctuation">,</span> <span class="token string">'country'</span><span class="token punctuation">:</span> <span class="token string">'USA'</span><span class="token punctuation">,</span> <span class="token string">'currency'</span><span class="token punctuation">:</span> <span class="token string">'USD'</span><span class="token punctuation">,</span> <span class="token string">'primaryGenreName'</span><span class="token punctuation">:</span> <span class="token string">'Hip-Hop/Rap'</span><span class="token punctuation">,</span> <span class="token string">'isStreamable'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
実行時間：<span class="token number">0.16942214965820312</span>
</code></pre></div>
<p>試しにリスト内のurlの数を2つ増やして2倍にしてみたが実行時間は <code>実行時間：0.17414307594299316</code> と変わらず、さらに2倍の8個にしてみたが実行時間は <code>実行時間：0.20545411109924316</code> と変わらず非同期処理になっている事がわかった。</p>
<h2>最後に</h2>
<p>正直requestsの非同期処理をするためだけに、ジェネレータやイテレータのくだりが必要だったのかと疑問は残るが、イベントループ内に登録された、イベント処理のどこで作業を中断して別のイベントに切り替えて処理を実行していくのかイメージ出来るようになったのでよかったと思う。さらに普段のプログラムも高速に出来て嬉しい限りである。</p>
<p>記事に関するコメント等は</p>
<p>🕊：<a href="https://twitter.com/Unemployed_jp">Twitter</a>
📺：<a href="https://www.youtube.com/channel/UCT3wLdiZS3Gos87f9fu4EOQ/featured?view_as=subscriber">Youtube</a>
📸：<a href="https://www.instagram.com/unemployed_jp/">Instagram</a>
👨🏻‍💻：<a href="https://github.com/wimpykid719?tab=repositories">Github</a>
😥：<a href="https://ja.stackoverflow.com/users/edit/22565">Stackoverflow</a></p>
<p>でも受け付けています。どこかにはいます。</p>
<h3>参照</h3>
<p><a href="https://teratail.com/questions/183869">リストとイテレータの違いについて｜teratail</a></p>
<p><a href="https://techacademy.jp/magazine/28379">Pythonにおけるiter()の利用方法を現役エンジニアが解説【初心者向け】</a></p>
<p><a href="https://www.atmarkit.co.jp/ait/articles/2002/18/news007.html#_ga=2.251195138.542036164.1610949913-1643654279.1610417785">［Pythonチートシート］特殊メソッド編</a></p>
<p><a href="https://blog.hirokiky.org/entry/2020/02/03/181938">Pythonのリストはイテレーターでない。わかりやすい（はずの）イテレーターとイテラブルの説明 - Make組ブログ</a></p>
<p><a href="https://python.keicode.com/refs/dir-function.php">Python の dir() 関数</a></p>
<p><a href="https://www.atmarkit.co.jp/ait/articles/1911/12/news011.html">［Python入門］イテレータとは</a></p>
<p><a href="http://ailaby.com/yield/">python の yield。サクッと理解するには return と比較</a></p>
<p><a href="https://www.sejuku.net/blog/23716">【Python入門】yield文の基本的な使い方を解説 | 侍エンジニアブログ</a></p>
<p><a href="https://qiita.com/ynakaDream/items/b63fab24bb30dea6ddb1">【Python】asyncio（非同期I/O）のイベントループをこねくり回す - Qiita</a></p>
<p><a href="https://qiita.com/yasuo-ozu/items/acf341297e05f2b1adc4">Pythonの非同期処理 <del>async, awaitを完全に理解する</del> - Qiita</a></p>
<p><a href="https://qiita.com/icoxfog417/items/07cbf5110ca82629aca0">Pythonにおける非同期処理: asyncio逆引きリファレンス - Qiita</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[苦手なJavaScriptで大嫌いな正規表現を克服する為のまとめ]]></title>
        <id>https://techblog-pink.vercel.app/posts/cab5a35f1a990e</id>
        <link href="https://techblog-pink.vercel.app/posts/cab5a35f1a990e"/>
        <updated>2020-12-21T15:00:00.000Z</updated>
        <summary type="html"><![CDATA[...]]></summary>
        <content type="html"><![CDATA[<h2>最初に</h2>
<p>これは無職の非エンジニアが参考書を元に苦手なJavaScriptで大嫌いな正規表現をやったら理解するのに１ヶ月かかった話である。</p>
<h3>未経験の方に</h3>
<p>正規表現をやったことない人ならこの記事を読めば早速、明日から正規表現を読むことが出来るようになると思う。</p>
<p>正規表現を大嫌いな人が理解するために書いた記事なので参考書でつまずいた箇所などがわかるまで細かく噛み砕いているのでわかりやすくまとまってると信じている。</p>
<h3>すでにエンジニアの方に</h3>
<p>Zennにいるような、つよつよエンジニアのみなさんなら当たり前の内容だと思うが初学者がどこでつまずき、どうやって教えるとわかって貰えるのか考える手助けになるかもしれない。参考書で分からない箇所が出ると<a href="#%E8%8B%B1%E5%8D%98%E8%AA%9E%E3%81%AE%E5%A2%83%E7%95%8C%E3%81%AE%E3%83%9E%E3%83%83%E3%83%81%E3%83%B3%E3%82%B0">心の叫び</a>も残しておいたからだ。そんな時、自分はGoogle先生、参考書、スタックオーバーフローに助けて貰った。</p>
<p>それでもし、未経験からエンジニアに転職出来た際には優しく教えて欲しい。いっちょ前にこのご時世なのでフルリモートを希望している。</p>
<h3>必要だと思った経緯</h3>
<p>大嫌いな正規表現をこれからやっていこうと思う。アプリの制作で文字列を扱うのでやむ終えず学んで行こうと思う。そして正規表現はどのプログラミング言語でも似たような記述（PythonとJavaScriptの正規表現を見ただけで言っている。）なので汎用性が高く言語が変わってもなくならない技術だと思い、学んでおいても損はないはず。</p>
<h2>単純なマッチングと置換</h2>
<p>まずは正規表現を使わずに単純な文字列の置換を行う。 <code>String.prototype</code> のメソッドを使う。</p>
<p>文字列中に特定の部分文字列があるかどうかを判断するだけなら、上記のメソッドで事足りる。</p>
<ul>
<li>startsWith：先頭にあるか</li>
<li>endWith：終端にあるか</li>
<li>includes：含むか</li>
<li>indexOf：何文字目から始まるか</li>
</ul>
<p>実際にコードに落とし込んでいく。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> input <span class="token operator">=</span> <span class="token string">"As I was going to Saint Ives"</span><span class="token punctuation">;</span><span class="token comment">//0~28番目まで文字がある。29文字ある。</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token method function property-access">startsWith</span><span class="token punctuation">(</span><span class="token string">"As"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token method function property-access">endsWith</span><span class="token punctuation">(</span><span class="token string">"Ives"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
<span class="token comment">/*スタートから9番目にgoingがあるのか？*/</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token method function property-access">startsWith</span><span class="token punctuation">(</span><span class="token string">"going"</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
<span class="token comment">/*</span>
<span class="token comment"></span>
<span class="token comment">スタートから数えて14番目がgoingの最後gになっているか</span>
<span class="token comment">これハマるね。後ろからじゃないんだ。</span>
<span class="token comment"></span>
<span class="token comment">*/</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token method function property-access">endsWith</span><span class="token punctuation">(</span><span class="token string">"going"</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>

<span class="token comment">/*文字列にgoingが含まれるか。これは良く使いそう。*/</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token method function property-access">includes</span><span class="token punctuation">(</span><span class="token string">"going"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token method function property-access">includes</span><span class="token punctuation">(</span><span class="token string">"going"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false 10文字目以降にあるか</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token method function property-access">indexOf</span><span class="token punctuation">(</span><span class="token string">"going"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//9 goingが何文字目から始まってるか</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token method function property-access">indexOf</span><span class="token punctuation">(</span><span class="token string">"going"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//-1 10文字目以降でgoingは何文字目か。ない場合は-1</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token method function property-access">indexOf</span><span class="token punctuation">(</span><span class="token string">"nope"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//-1</span>

<span class="token keyword">const</span> input2 <span class="token operator">=</span> <span class="token string">"セント・アイヴスはイギリスにある街の名前です。"</span><span class="token punctuation">;</span><span class="token comment">//0~22番目まで文字がある。23文字ある。</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>input2<span class="token punctuation">.</span><span class="token method function property-access">startsWith</span><span class="token punctuation">(</span><span class="token string">"セント"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>input2<span class="token punctuation">.</span><span class="token method function property-access">endWith</span><span class="token punctuation">(</span><span class="token string">"です。"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>input2<span class="token punctuation">.</span><span class="token method function property-access">startsWith</span><span class="token punctuation">(</span><span class="token string">"イギリス"</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true 9文字目（厳格）からはじめてイギリスの単語はあるか</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>input2<span class="token punctuation">.</span><span class="token method function property-access">includes</span><span class="token punctuation">(</span><span class="token string">"アメリカ"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>input2<span class="token punctuation">.</span><span class="token method function property-access">includes</span><span class="token punctuation">(</span><span class="token string">"町"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true 10文字目以降で町と言う文字があるか</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>input2<span class="token punctuation">.</span><span class="token method function property-access">indexOf</span><span class="token punctuation">(</span><span class="token string">"町"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//16 町は何文字目から始まるのか</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>input2<span class="token punctuation">.</span><span class="token method function property-access">indexOf</span><span class="token punctuation">(</span><span class="token string">"町"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//16 10文字目以降で最初から数えて何文字目に町はあるか</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>input2<span class="token punctuation">.</span><span class="token method function property-access">indexOf</span><span class="token punctuation">(</span><span class="token string">"アメリカ"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//-1</span>
</code></pre></div>
<p>上記にあげたメソッドで文字列を処理する場合は大文字、小文字を分けて使用する。分けて使用したくない場合は一度文字列を小文字に変換して使用する。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token method function property-access">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">startsWith</span><span class="token punctuation">(</span><span class="token string">"as"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
</code></pre></div>
<p>上記の操作を行っても元の文字列には影響を与えません。</p>
<h2>正規表現でのマッチング</h2>
<p>JavaScriptで正規表現関連の処理を行うにはクラスRegExpを利用する。RegExpのコンストラクタを使って正規表現を生成する事も出来ますが、通常は正規表現を /.../ で囲んだリテラル表記を使います。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> re1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">going</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span> <span class="token comment">//goingにマッチする正規表現</span>
<span class="token keyword">const</span> re2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"going"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//上記と同じ意味</span>
<span class="token keyword">const</span> re3 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">イギリス</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
</code></pre></div>
<p>DEFという文字列を含んでいるかを検査する。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx">str <span class="token operator">=</span> <span class="token string">"ABCDEFG"</span><span class="token punctuation">;</span>
re <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"DEF"</span><span class="token punctuation">,</span> <span class="token string">"ig"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// => true</span>
</code></pre></div>
<p>こういった感じに簡素に書き換える事も出来る。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx">str <span class="token operator">=</span> <span class="token string">"ABCDEF"</span><span class="token punctuation">;</span>
re <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">DEF</span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// => true</span>
</code></pre></div>
<ul>
<li>regexp.exec(str)</li>
<li>str.match(regexp)</li>
</ul>
<p>マッチングを行い、マッチした部分文字列（g フラグ指定時は配列）を返します。exec() で str を省略した場合は、RegExp.inputで指定された文字列に対してマッチングを行います。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx">re <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token charset"><span class="token charset-punctuation punctuation">[</span><span class="token range">0<span class="token range-punctuation operator">-</span>9</span><span class="token charset-punctuation punctuation">]</span></span><span class="token quantifier number">+</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token comment">//下記のコードは文字列を書く場所が違うだけで意味は同じ？</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token method function property-access">exec</span><span class="token punctuation">(</span><span class="token string">"abc123"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// => 123</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"abc123"</span><span class="token punctuation">.</span><span class="token method function property-access">match</span><span class="token punctuation">(</span>re<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// => 123</span>
</code></pre></div>
<p>RegExp.input(非推奨)</p>
<p>123にマッチした文字列をRegExpオブジェクトに格納する？？？</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">var</span> re <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">123</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
re<span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span><span class="token string">"abc123def"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token known-class-name class-name">RegExp</span><span class="token punctuation">.</span><span class="token property-access">input</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// => "abc123def"</span>
re<span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span><span class="token string">"abc456def"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// マッチしないので index は変化しない</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token known-class-name class-name">RegExp</span><span class="token punctuation">.</span><span class="token property-access">input</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// => "abc123def"</span>
</code></pre></div>
<p>まず <code>/\w{3,}/ig</code> と言う正規表現を例として使う。これは大文字小文字を区別せずに、3文字以上のすべての単語（word）にマッチする。なお単語は「英数字・_ （アンダースコア）」からなる文字列を指し漢字・仮名はマッチしない。これを使って次のような検索ができる。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> input <span class="token string">"As I was going to Saint Ives"</span><span class="token punctuation">;</span><span class="token comment">//0~28番目まである29文字（空白もカウント）</span>
<span class="token keyword">const</span> re <span class="token operator">/</span>\w<span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token operator">/</span>ig<span class="token punctuation">;</span>

<span class="token comment">//マッチした単語を配列にして返す。</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token method function property-access">match</span><span class="token punctuation">(</span>re<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//['was', 'going', 'Saint', 'Ives']</span>

<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token method function property-access">search</span><span class="token punctuation">(</span>re<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//5（最初に見つかる3文字以上の単語は5番目から始まる）</span>
<span class="token comment">/*</span>
<span class="token comment">下記のコードを実行するとlastIndexプロパティに値（最初に3文字以上の文字が始まる番地）</span>
<span class="token comment">が追加されます。この場合はwasのWが始まる場所なので5が代入されます。</span>
<span class="token comment">*/</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true (inputに格納された文字列が3文字以上に該当するか）</span>

<span class="token keyword">let</span> a <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token method function property-access">exec</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//execは文字位置をlastIndexに記憶する。</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>

<span class="token comment">/* 実行結果</span>
<span class="token comment"></span>
<span class="token comment">[ 'was', 'going', 'Saint', 'Ives' ]</span>
<span class="token comment">5</span>
<span class="token comment">true //ここでlastIndexが5になる。</span>
<span class="token comment">//そのため5番目以降で3文字から始まる文字goingが返却される。</span>
<span class="token comment">[ </span>
<span class="token comment">  'going',</span>
<span class="token comment">  index: 9,</span>
<span class="token comment">  input: 'As I was going to Saint Ives',</span>
<span class="token comment">  groups: undefined</span>
<span class="token comment">]</span>
<span class="token comment"></span>
<span class="token comment">*/</span>

<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//going</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token property-access">index</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//9</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token property-access">input</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//As I was going to Saint Ives</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>

<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token method function property-access">exec</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//['Saint', index: 18, input: 'As I was going to Saint Ives']</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token method function property-access">exec</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//['Ives', index: 24, input: 'As I was going to Saint Ives']</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token method function property-access">exec</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//null（24番目以降でもうマッチするのがない）</span>

<span class="token comment">//正規表現のリテラルを直接使うことが出来る。</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token method function property-access">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token charclass class-name">\w</span><span class="token quantifier number">{3,}</span></span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[ 'was', 'going', 'Saint', 'Ives']</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token method function property-access">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token charclass class-name">\w</span><span class="token quantifier number">{3,}</span></span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//gオプションなし</span>
<span class="token comment">//['was', index: 5, input: 'As I was going to Saint Ives']</span>

<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token method function property-access">search</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token charclass class-name">\w</span><span class="token quantifier number">{3,}</span></span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//5</span>
</code></pre></div>
<p>基本的には <code>match()</code> と <code>test()</code> が使用される。</p>
<h3><a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test#Using_test_on_a_regex_with_the_global_flag">グローバルフラグを持つ正規表現の test() の使用</a></h3>
<p>上記のコードと出力が違うのでとても<a href="https://ja.stackoverflow.com/questions/72303/javascript%e6%ad%a3%e8%a6%8f%e8%a1%a8%e7%8f%be%e3%81%aere-exec%e3%81%ae%e5%87%ba%e5%8a%9b%e7%b5%90%e6%9e%9c%e3%81%8c%e7%90%86%e8%a7%a3%e5%87%ba%e6%9d%a5%e3%81%aa%e3%81%84/72304#72304">ハマった。</a></p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> input <span class="token operator">=</span> <span class="token string">"As I was going to Saint Ives"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> re <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token charclass class-name">\w</span><span class="token quantifier number">{3,}</span></span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span><span class="token punctuation">;</span>

<span class="token keyword">let</span> a <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token method function property-access">exec</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//実行結果</span>
<span class="token punctuation">[</span>
  <span class="token string">'was'</span><span class="token punctuation">,</span>
  index<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
  input<span class="token operator">:</span> <span class="token string">'As I was going to Saint Ives'</span><span class="token punctuation">,</span>
  groups<span class="token operator">:</span> <span class="token keyword nil">undefined</span>
<span class="token punctuation">]</span>
</code></pre></div>
<p><code>test()</code> と <code>exec()</code> を使用する際はマッチするとlastIndexに値が加算される。そして次回再び実行するとlastIndexに格納された数値以降の番地からマッチするものを返す。再びマッチすればlastIndexは再び加算される。マッチしない値の場合は <code>false</code> となりlastIndexの値は <code>0</code> になる。</p>
<h2>正規表現での置換</h2>
<p>4文字以上の単語を <code>****</code> に置き換える。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> input <span class="token operator">=</span> <span class="token string">"As I was going to Saint Ives"</span>
<span class="token keyword">const</span> output <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token charclass class-name">\w</span><span class="token quantifier number">{4,}</span></span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span><span class="token punctuation">,</span> <span class="token string">'****'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// As I was **** to **** ****</span>
</code></pre></div>
<p>平仮名の「は」「を」「に」「で」を全角のスペースに置換する。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> input2 <span class="token operator">=</span> <span class="token string">"セント・アイブスはイギリスに存在する町の名前です。"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> output2 <span class="token operator">=</span> input2<span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token charset"><span class="token charset-punctuation punctuation">[</span>はをにで<span class="token charset-punctuation punctuation">]</span></span></span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'　'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>output2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//セント・アイブス　イギリス　存在する町の名前　す。</span>
</code></pre></div>
<h2>入力文字列の「消費」正規表現のアルゴリズム</h2>
<p>???よく分からない。</p>
<p>正規表現の一般的解釈「文字列中の条件を満たす部分文字列を見つけるもの」</p>
<p>ただ正規表現を「入力文字列を消費するためのパターン」と解釈する方が分かりやすい場合がある。</p>
<p>「XJANLIONATUREJXEELNP」</p>
<p>人間はこの中から英単語になる文字列を探すのが得意です。即座に「LION」「NATURE」「EEL」といったものをパッと見つける。（自分は出来なかった。）</p>
<p>これを正規表現にやらせます。人間とは少し違いハンデがありますが、すでに「LION」「NATURE」「EEL」があるのを知っている前提でそれらが文字列中のどこにあるのか探って行きます。</p>
<p>最初の文字Xから始めます。探している単語にXで始まるものはないので「マッチするものはない」と判断します。次にJ同様にマッチなし、Aに進む。こうして進んだ文字は「消費された」と呼ぶ。ここまでにX, J, Aが消費された。</p>
<p>Lまで来ると「これはLION」かもしれないと推測します。なのでLは「消費せず」次に進みます。I, O, Nがマッチします。これで「LION」と認識されます。その時に「マッチした！」となり、この単語（LION）が丸ごと消費されます。</p>
<p>LIONとNATUREは文字列中で「N」が重なっています。そして「N」は先ほど「LION」で消費されてしまったので戻って再度マッチするかどうか確認しません。なので「NATURE」を見つけることが出来ません。最後にEELを見つけて終了します。</p>
<p>上の例で「LION」の「O」を「X」に置換してみます。すると正規表現がL, Iは消費せずに進みます。そしてXでマッチしないと判定します。</p>
<p>すると正規表現はマッチの可能性があったLまで戻り消費して次に進む。このケースではLIONは見つからず、代わりにNATUREがマッチします。NがLIONの一部として消費されなかったためです。</p>
<p>正規表現アルゴリズム</p>
<ul>
<li>文字列は、左から右に消費される。</li>
<li>一旦、ある文字が消費されてしまったら、その文字に戻ることはない。</li>
<li>マッチするものがなければ、正規表は一文字ずつ進んでマッチするものを探す。</li>
<li>マッチしたものがあれば、正規表現はマッチした文字の全てを一度に消費し、その先の文字に進みマッチングを進める。（グローバルな正規表現に限る）</li>
</ul>
<h2>ORを表す正規表現</h2>
<p>メタ文字の説明になる。</p>
<p>複数のパターンのどれかとマッチさせる場合はORを表す「|」を使用する。</p>
<p>使用例：A|B|Cのように記述するとA, B, Cのいずれかにマッチしたらとなります。</p>
<p>具体的な使用例</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> html <span class="token operator">=</span> <span class="token string">'HTML with &#x3C;a href="/one">one link&#x3C;/a>, and some JavaScript.'</span> <span class="token operator">+</span> <span class="token string">'&#x3C;script src="stuff.js">&#x3C;/script>'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> matches <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token method function property-access">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">area<span class="token alternation keyword">|</span>a<span class="token alternation keyword">|</span>link<span class="token alternation keyword">|</span>script<span class="token alternation keyword">|</span>source</span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>matches<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//実行結果</span>
<span class="token punctuation">[</span>
  <span class="token string">'a'</span><span class="token punctuation">,</span>      <span class="token string">'link'</span><span class="token punctuation">,</span>
  <span class="token string">'a'</span><span class="token punctuation">,</span>      <span class="token string">'a'</span><span class="token punctuation">,</span>
  <span class="token string">'a'</span><span class="token punctuation">,</span>      <span class="token string">'a'</span><span class="token punctuation">,</span>
  <span class="token string">'Script'</span><span class="token punctuation">,</span> <span class="token string">'script'</span><span class="token punctuation">,</span>
  <span class="token string">'script'</span>
<span class="token punctuation">]</span>
</code></pre></div>
<p><code>ig</code> は大文字小文字を区別せず（i：ignore case）、全体を（g：global）検索することを示している。gがない場合は最初にマッチしたものだけが返される。</p>
<p>上記の正規表現は大文字小文字を区別せずに「area, a, link, script, source」のいずれかにマッチする文字列の集合を意味している。</p>
<h3>配置の順番にも気を付ける。</h3>
<p><code>(/area|a|link|script|source/ig)</code> の順番にも気を付ける必要があります。aの前にareaを置かないとareaの単語が来た際、先にaでマッチしてaが消費されるためareaにマッチすることが出来なくなる。</p>
<p>上記の正規表現ではhtmlのタグを検索するのには期待しない、他の文字にもマッチしてしまうので下記のように変更します。</p>
<p><code>(/&#x3C;area|&#x3C;a|&#x3C;link|&#x3C;script|&#x3C;source/&#x3C;ig)</code> これで期待通りのタグだけを抽出出来ます。</p>
<p>ただ正規表現だけで構文解析は難しい事も頭の片隅に置いておきましょう。</p>
<h2>文字集合</h2>
<p><code>(/0|1|2|3|4|5|6|7|8|9/g);</code> これだと大変なので <code>(/[0-9]/g);</code> とする事でより簡素に記述出来ます。</p>
<p>さらにアルファベット（a-z）、「.」、「-」も含めることが出来ます。</p>
<p><code>(/[0-9a-z\-.]/ig)</code> とする事でマッチさせることが出来ます。 <code>\</code> は特殊文字としてでなく普通の横棒と認識させるために前に置きます。iも指定する事で大小を無視します。文字集合の指定に順番による結果が変わる事はありません。</p>
<p>文字集合のもう一つ強力な機能として <code>^</code> （記号の読み方はキャレットまたはハット）があります。</p>
<p><code>(/[^　0-9a-z]/g)</code> とする事で空白、0<del>9、a</del>zの文字にマッチしなくなります。</p>
<p>片仮名、平仮名を取り除く正規表現を書いてみる。</p>
<p><code>(/[^0-9ァ-ヴぁ-ん。、]+/g);</code> で0~9、 <code>ァ-ヴ</code>片仮名（ほとんど）、<code>ぁ-ん</code> 平仮名（ほとんど）とマッチするので <code>^</code> が付いてる事もあり、マッチしたものを取り除くことができる。</p>
<h3>文字集合には略記法がある。（可読性さがるやん）</h3>
<p>略記号</p>
<table>
<thead>
<tr>
<th>文字</th>
<th>意味</th>
<th>備考</th>
</tr>
</thead>
<tbody>
<tr>
<td>\d</td>
<td>[0-9]</td>
<td>数字</td>
</tr>
<tr>
<td>\D</td>
<td>[^0-9]</td>
<td>数字以外</td>
</tr>
<tr>
<td>\s</td>
<td>ホワイトスペース文字</td>
<td>半角スペース、タブ、垂直タブ、改行文字、全角スペースなど</td>
</tr>
<tr>
<td>\S</td>
<td>非ホワイトスペース文字</td>
<td>半角スペース、タブ、垂直タブ、改行文字、全角スペースなど以外</td>
</tr>
<tr>
<td>\w</td>
<td>[a-zA-Z_]</td>
<td>「英単語」。ダッシュやピリオドには含まれない（ドメイン名、CSSのクラスなどのマッチングには不十分）</td>
</tr>
<tr>
<td>\W</td>
<td>[^a-zA-Z_]</td>
<td>「英単語」。ダッシュやピリオドには含まれない（ドメイン名、CSSのクラスなどのマッチングには不十分）以外</td>
</tr>
</tbody>
</table>
<p><code>\D</code> は電話番号等で無駄な記号等を取り除くのに役立ちます。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> phoneNumber1 <span class="token operator">=</span> <span class="token string">"(0269)99-9876"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token maybe-class-name">PhoneNumber2</span> <span class="token operator">=</span> <span class="token string">"0269-99-9875"</span><span class="token punctuation">;</span>

<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>phoneNumber1<span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token charclass class-name">\D</span></span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0269999876</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>phoneNumber2<span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token charclass class-name">\D</span></span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0269999875</span>
</code></pre></div>
<h3>繰り返し</h3>
<p>正規表現のメタ文字「+」を使うことで、「直前の文字」の「1回以上の繰り返し」にマッチさせることが出来ます。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> beer99 <span class="token operator">=</span> <span class="token string">"99 bottles of beer on the wall"</span> <span class="token operator">+</span> 
	<span class="token string">"take 1 down and pass it around -- "</span> <span class="token operator">+</span> 
	<span class="token string">"98 bottles of beer on the wall."</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> matches <span class="token operator">=</span> beer99<span class="token punctuation">.</span><span class="token method function property-access">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token charset"><span class="token charset-punctuation punctuation">[</span><span class="token range">0<span class="token range-punctuation operator">-</span>9</span><span class="token charset-punctuation punctuation">]</span></span><span class="token quantifier number">+</span></span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>matches<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//['99', '1', '98']</span>

<span class="token comment">//+がないと分割されて表示される。</span>
<span class="token punctuation">[</span> <span class="token string">'9'</span><span class="token punctuation">,</span> <span class="token string">'9'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'9'</span><span class="token punctuation">,</span> <span class="token string">'8'</span> <span class="token punctuation">]</span>
</code></pre></div>
<p>繰り返しの指定</p>
<table>
<thead>
<tr>
<th>文字</th>
<th>説明</th>
<th>例</th>
</tr>
</thead>
<tbody>
<tr>
<td>{n}</td>
<td>直前文字のn回繰り返し</td>
<td>/\d{5}/は5個の数字（例：米国郵便番号）にマッチする。</td>
</tr>
<tr>
<td>{n,}</td>
<td>直前文字のn回以上の繰り返し</td>
<td>/\d{5,}/は5個以上の数字にマッチする。</td>
</tr>
<tr>
<td>{n, m}</td>
<td>直前文字のn回以上, m回以下の繰り返し</td>
<td>/\d{2, 5}/は2個~5個の数字にマッチする。</td>
</tr>
<tr>
<td>?</td>
<td>直前文字の0回もしくは1回の出現{0, 1}と同じ</td>
<td>/[a-z]\d?/iは英字1文字の後ろに0個~1個の数字が続く文字列にマッチする。</td>
</tr>
<tr>
<td>*</td>
<td>直前文字の0回以上の繰り返し</td>
<td>/[a-z]\d*/iは英字1文字の後ろに0個以上の数字が続く文字列にマッチする。</td>
</tr>
<tr>
<td>+</td>
<td>直前文字の1回以上の繰り返し</td>
<td>/[a-z]\d+/iは英字1文字の後ろに1個以上の数字が続く文字列にマッチする。そしてa-zのような指定だと汎用性があるがaのみだとaa等にしかマッチしなくなるので直前に指定する文字が大事になってくる。</td>
</tr>
</tbody>
</table>
<p>メタ文字「.」とエスケープ</p>
<p>正規表現では <code>.</code> は改行以外あらゆるものにマッチする特殊文字で、特に入力文字列中の不要部分を飛ばすためによく用いられます。</p>
<p>例を考えて見ましょう。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> input <span class="token operator">=</span> <span class="token string">"Address: 333 Main St., Anywhere, NY, 55532. Phone: 555-555-2525."</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> match <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token method function property-access">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token charclass class-name">.</span><span class="token quantifier number">*</span><span class="token charclass class-name">\d</span><span class="token quantifier number">{5}</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span>

<span class="token comment">//実行結果</span>
<span class="token punctuation">[</span>
  <span class="token string">'Address: 333 Main St., Anywhere, NY, 55532'</span><span class="token punctuation">,</span>
  index<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  input<span class="token operator">:</span> <span class="token string">'Address: 333 Main St., Anywhere, NY, 55532. Phone: 555-555-2525.'</span><span class="token punctuation">,</span>
  groups<span class="token operator">:</span> <span class="token keyword nil">undefined</span>
<span class="token punctuation">]</span>
</code></pre></div>
<p>ここでつまずいてしまい。期待したのは <code>55532</code> のみだったので<a href="https://ja.stackoverflow.com/questions/72349/javascript%e3%81%ae%e6%ad%a3%e8%a6%8f%e8%a1%a8%e7%8f%be%e3%81%ae-d5-%e3%81%8c%e3%82%a4%e3%83%a1%e3%83%bc%e3%82%b8%e3%81%99%e3%82%8b%e5%8b%95%e4%bd%9c%e3%81%a8%e7%95%b0%e3%81%aa%e3%82%8b">スタックオーバーフローで訪ねた。</a></p>
<blockquote>
<p>任意の文字の任意の繰り返しの後、数字が5桁並んだところを終端とする文字列を指定していることになります。</p>
</blockquote>
<p>つまり <code>55532</code> を見つけるまでに消費した文字は全てマッチすることになる。</p>
<h3>ワイルドカード</h3>
<p>ピリオドは「改行を除くあらゆる文字」にマッチしますが、「改行を含めたあらゆる文字」にマッチさせるには[\s\S]を利用する方法が一般的です。「全てのホワイトスペースおよび、ホワイトスペース以外の全ての文字」となり全ての文字にマッチするようになります。だったら全ての文字を最初から用意しておいてくれたらいいのにと思います。</p>
<h3>グループ化</h3>
<p>グループ化すると部分表現を構成でき、それをひとつの単位のように（1文字であるかのように）扱うことができます。</p>
<p>グループ化する事で後から再び利用することが出来るようにグループ結果をキャプチャ出来ます。横文字多すぎてわからん。</p>
<p>まずはキャプチャなしのグループ説明から行います。こちらの方がパフォーマンスはいいです。</p>
<p>グループは <code>()</code> を使って指定しますが、キャプチャなしのグループは <code>(?:)</code> のように指定します</p>
<p>例を見る。ドメイン名のうち.com, .org, .eduを含むものだけにマッチさせたいとします。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token string">"Visit oreilly.com today!"</span><span class="token punctuation">;</span>
<span class="token comment">//a~z0~9の文字が1以上続いて.com, .org, .eduに大小関係なくマッチするものを全体から探す（複数あればマッチする）。</span>
<span class="token keyword">const</span> match <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token method function property-access">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token charset"><span class="token charset-punctuation punctuation">[</span><span class="token range">a<span class="token range-punctuation operator">-</span>z</span><span class="token range">0<span class="token range-punctuation operator">-</span>9</span><span class="token charset-punctuation punctuation">]</span></span><span class="token quantifier number">+</span><span class="token group punctuation">(?:</span><span class="token special-escape escape">\.</span>com<span class="token alternation keyword">|</span><span class="token special-escape escape">\.</span>org<span class="token alternation keyword">|</span><span class="token special-escape escape">\.</span>edu</span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 実行結果</span>
<span class="token punctuation">[</span><span class="token string">'oreilly.com'</span><span class="token punctuation">]</span>
</code></pre></div>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> matches <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token method function property-access">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token group punctuation">(?:</span>https<span class="token quantifier number">?</span>:<span class="token group punctuation">)</span><span class="token quantifier number">?</span><span class="token escape">\/</span><span class="token escape">\/</span><span class="token charset"><span class="token charset-punctuation punctuation">[</span><span class="token range">a<span class="token range-punctuation operator">-</span>z</span><span class="token range">0<span class="token range-punctuation operator">-</span>9</span><span class="token charset-punctuation punctuation">]</span></span><span class="token charset"><span class="token charset-punctuation punctuation">[</span><span class="token range">a<span class="token range-punctuation operator">-</span>z</span><span class="token range">0<span class="token range-punctuation operator">-</span>9</span>.-<span class="token charset-punctuation punctuation">]</span></span><span class="token quantifier number">+</span><span class="token charset"><span class="token charset-punctuation punctuation">[</span><span class="token range">a<span class="token range-punctuation operator">-</span>z</span><span class="token range">0<span class="token range-punctuation operator">-</span>9</span><span class="token charset-punctuation punctuation">]</span></span><span class="token quantifier number">+</span></span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>matches<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//実行結果 htmlは書いてないけど、aタグ等が3つほどあるのをイメージする。</span>
<span class="token punctuation">[</span><span class="token string">'http://insecure.com'</span><span class="token punctuation">,</span> <span class="token string">'https://secure.com'</span><span class="token punctuation">,</span> <span class="token string">'//anything.com'</span><span class="token punctuation">]</span>

</code></pre></div>
<p><code>(?:https?:)?</code> からみていく右の <code>?:)?</code> に注目してほしいニコちゃんマーク <code>:)</code>が隠れているのが分かるだろう。今のは全く関係ないので無視してくれ。ニコちゃんマークの左側にある <code>?</code> に注目してくれこれは <code>s?</code> に <code>s</code> に引っ付いている。意味は「sの0回もしくは1回の出現」を意味している。メタ文字（?）は左の文字に作用する。2つ目のニコちゃんマークの右側「?」はグループ「（?:https?:)」全体に適用される。「()内があるかないかの時にマッチする。」()内はhttpかhttpsにマッチするため2つを足すと</p>
<ul>
<li>空文字（「https?:」の0回出現）</li>
<li>https:</li>
<li>http</li>
</ul>
<p>いずれかにマッチする。</p>
<p>そしてこの <code>[a-z0-9][a-z0-9.-]+[a-z0-9]+</code> 一見助長過ぎる記述も意味がある。ドメインは最初英数字から始まるのが決まっていてその間に <code>-.</code> が使用される例えば <code>[abc-mart.com](http://abc-mart.com)</code> のような感じだそしてドメインの最後は英数字で終わるので最後も <code>[a-z0-9]+</code> で挟んであげる。</p>
<h2>最長マッチ、最短マッチ</h2>
<p>最長マッチだとHTMLで下記のようなDOMがあるとする。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> input <span class="token operator">=</span> <span class="token string">"hello&#x3C;i>test1&#x3C;/i>and&#x3C;i>test2&#x3C;/i>world."</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> output <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&#x3C;i><span class="token group punctuation">(</span><span class="token charclass class-name">.</span><span class="token quantifier number">*</span><span class="token group punctuation">)</span>&#x3C;<span class="token escape">\/</span>i></span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span><span class="token punctuation">,</span> <span class="token string">'&#x3C;strong>$1&#x3C;/strong>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//実行結果</span>
hello<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>strong</span><span class="token punctuation">></span></span><span class="token plain-text">test1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>i</span><span class="token punctuation">></span></span><span class="token plain-text">and</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>i</span><span class="token punctuation">></span></span><span class="token plain-text">test2</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>strong</span><span class="token punctuation">></span></span><span class="token plain-text">world.</span>
</code></pre></div>
<p><code>&#x3C;i></code> タグを全て <code>&#x3C;strong></code> タグに置き換えたかった。</p>
<p>だがなんか、思ってたのと違う。そうこれは最長マッチのため最初の <code>&#x3C;i></code> と最後の <code>&#x3C;/i></code> にマッチしている。上記の正規表現は最長マッチ</p>
<p>これを修正する方法は <code>*?</code> として最短マッチにする。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> output <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&#x3C;i><span class="token group punctuation">(</span><span class="token charclass class-name">.</span><span class="token quantifier number">*?</span><span class="token group punctuation">)</span>&#x3C;<span class="token escape">\/</span>i></span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span><span class="token punctuation">,</span> <span class="token string">'&#x3C;strong>$1&#x3C;/strong>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//実行結果</span>
hello<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>strong</span><span class="token punctuation">></span></span><span class="token plain-text">test1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>strong</span><span class="token punctuation">></span></span>and<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>strong</span><span class="token punctuation">></span></span><span class="token plain-text">test2</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>strong</span><span class="token punctuation">></span></span>world<span class="token punctuation">.</span>
</code></pre></div>
<h2>後方参照</h2>
<p><img>タグやalt属性等をまとめて正規表現を用いて取り出したい時があるでしょう。属性値の引用には「'」「"」も使用出来ますが、先頭と最後は対応しなければいけないです。その際に使用出来るのが後方参照です。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> html <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&#x3C;img alt='A "simple" example.'></span><span class="token template-punctuation string">`</span></span> <span class="token operator">+</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&#x3C;img alt="Don't abuse it!"></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> imageTags <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token method function property-access">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&#x3C;img alt=<span class="token group punctuation">(</span><span class="token charset"><span class="token charset-punctuation punctuation">[</span>'"<span class="token charset-punctuation punctuation">]</span></span><span class="token group punctuation">)</span><span class="token charclass class-name">.</span><span class="token quantifier number">*?</span><span class="token backreference keyword">\1</span>></span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
imageTags<span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span><span class="token parameter">imagetag</span> <span class="token arrow operator">=></span> <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>imagetag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>正規表現はalt=のあとに続く <code>(['"])</code> で「'」「"」のいずれかにマッチして、それが記憶される。続く <code>.*?</code> は0文字以上の文字に最短マッチして <code>\1</code> が最初に出現する所までマッチします。 <code>\1</code> が後方参照で最初の <code>(...)</code> この場合  <code>(['"])</code> でマッチしたものを記憶して <code>(...)</code> が出てくる順番で <code>\</code> の後ろの番号を指定します。今回の場合は一番目にマッチした物を後方でも使用したいので <code>\1</code> と指定します。</p>
<p>そして <code>\1</code> は今回では  <code>'</code> でマッチしているので <code>'</code> が出現する所までとなります。</p>
<h2>グループの置換</h2>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">let</span> chap2 <span class="token operator">=</span> <span class="token string">"第2章初めてのJavaScriptアプリ\n"</span>
			<span class="token operator">+</span> <span class="token string">"第1章では、JavaScriptの開発環境について説明しました。...\n"</span>
			<span class="token operator">+</span> <span class="token string">"詳しくは第23章を参照してください。...\n"</span>
			<span class="token operator">+</span> <span class="token string">"第3章では変数や定数について説明します。"</span><span class="token punctuation">;</span>
chap2 <span class="token operator">=</span> chap2<span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">第<span class="token group punctuation">(</span><span class="token charclass class-name">\d</span><span class="token quantifier number">+</span><span class="token group punctuation">)</span>章</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'$1章'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>chap2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//実行結果</span>
<span class="token number">2</span>章初めてのJavaScriptアプリ
<span class="token number">1</span>章では、JavaScriptの開発環境について説明しました。<span class="token spread operator">...</span>
詳しくは<span class="token number">23</span>章を参照してください。<span class="token spread operator">...</span>
<span class="token number">3</span>章では変数や定数について説明します
</code></pre></div>
<p>上記のコードは「第2章→2章」のように変換するコードです。replaceの第一引数では <code>(\d+)</code> と一桁以上の数字にマッチします。そして <code>$1</code> はマッチした数字に置き換わる。</p>
<p>replaceではマッチが進むごとに <code>$1</code> の値が変化していきます。 最初のマッチでは後方参照マッチしたグループの番号は <code>\1</code> であり  <code>$1</code> となる。次にマッチするとグループ番号は2となり <code>\2</code> となり  <code>$2</code> になる。このように第二引数の値が変化することがコードからは読み取れないので注意が必要です。</p>
<p>今度はhref以外の属性を取り除いて見ます。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">let</span> html1 <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&#x3C;a class='abc' href="/www.xx.yyy">サイトxx&#x3C;/a></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
<span class="token keyword">let</span> html2 <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&#x3C;a class='abc' href='/www.xx.yyy'>サイトxx&#x3C;/a></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>

<span class="token comment">/*グループの中にグループを入れて引用符とマッチさせる。*/</span>
r <span class="token operator">=</span> html1<span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&#x3C;a <span class="token charclass class-name">.</span><span class="token quantifier number">*?</span><span class="token group punctuation">(</span>href=<span class="token group punctuation">(</span><span class="token charset"><span class="token charset-punctuation punctuation">[</span>"'<span class="token charset-punctuation punctuation">]</span></span><span class="token group punctuation">)</span><span class="token charclass class-name">.</span><span class="token quantifier number">*?</span><span class="token backreference keyword">\2</span><span class="token group punctuation">)</span><span class="token charclass class-name">.</span><span class="token quantifier number">*?</span>></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">'&#x3C;a $1>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
r1 <span class="token operator">=</span> html2<span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&#x3C;a <span class="token charclass class-name">.</span><span class="token quantifier number">*?</span><span class="token group punctuation">(</span>href=<span class="token group punctuation">(</span><span class="token charset"><span class="token charset-punctuation punctuation">[</span>"'<span class="token charset-punctuation punctuation">]</span></span><span class="token group punctuation">)</span><span class="token charclass class-name">.</span><span class="token quantifier number">*?</span><span class="token backreference keyword">\2</span><span class="token group punctuation">)</span><span class="token charclass class-name">.</span><span class="token quantifier number">*?</span>></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">'&#x3C;a $1>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//実行結果</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/www.xx.yyy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">サイトxx</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>a</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>/www.xx.yyy<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token plain-text">サイトxx</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>a</span><span class="token punctuation">></span></span>
</code></pre></div>
<p>まず最初の <code>.*?</code> は hrefが最初から始まると限らないのでhrefがみつかる最短の間にあるほぼ全ての文字にマッチする。その次に現れる <code>.*?</code> はhref="ここにある文字列にマッチする"そして <code>\2</code> は <code>(["'})</code> にマッチする。 <code>\2</code> は全体を囲っている。 <code>(href=(["']).*?\2)</code> にマッチする。でマッチした部分が <code>&#x3C;a ここに代入></code> 代入される。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">let</span> html1 <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&#x3C;a class='abc' id="s" href="/www.xx.yyy">サイトxx&#x3C;/a></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
r <span class="token operator">=</span> html1<span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&#x3C;a <span class="token charclass class-name">.</span><span class="token quantifier number">*?</span><span class="token group punctuation">(</span>class=<span class="token group punctuation">(</span><span class="token charset"><span class="token charset-punctuation punctuation">[</span>"'<span class="token charset-punctuation punctuation">]</span></span><span class="token group punctuation">)</span><span class="token charclass class-name">.</span><span class="token quantifier number">*?</span><span class="token backreference keyword">\2</span><span class="token group punctuation">)</span><span class="token charclass class-name">.</span><span class="token quantifier number">*?</span><span class="token group punctuation">(</span>href=<span class="token group punctuation">(</span><span class="token charset"><span class="token charset-punctuation punctuation">[</span>"'<span class="token charset-punctuation punctuation">]</span></span><span class="token group punctuation">)</span><span class="token charclass class-name">.</span><span class="token quantifier number">*?</span><span class="token backreference keyword">\4</span><span class="token group punctuation">)</span><span class="token charclass class-name">.</span><span class="token quantifier number">*?</span>></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">'&#x3C;a $3 $1>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//実行結果</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/www.xx.yyy<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>abc<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token plain-text">サイトxx</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>a</span><span class="token punctuation">></span></span>
</code></pre></div>
<p>上記のコードはclassとhrefの順番を入れ替えるものです。</p>
<p>最初からclassとhrefという順番で出現する必要があります。</p>
<h3>$書き方オプション</h3>
<p>$を使用してさらに高度なマッチングがあります。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> input <span class="token operator">=</span> <span class="token string">"One two three"</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> r <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">two</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">'($`)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//実行結果</span>
<span class="token function"><span class="token maybe-class-name">One</span></span> <span class="token punctuation">(</span><span class="token maybe-class-name">One</span> <span class="token punctuation">)</span> three<span class="token comment">//Oneの後ろにある空白も含まれる。</span>

r <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token charclass class-name">\w</span><span class="token quantifier number">+</span></span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'($&#x26;)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//実行結果</span>
<span class="token punctuation">(</span><span class="token maybe-class-name">One</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>two<span class="token punctuation">)</span> <span class="token punctuation">(</span>three<span class="token punctuation">)</span>

r <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">two</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">"($')"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//実行結果</span>
<span class="token function"><span class="token maybe-class-name">One</span></span> <span class="token punctuation">(</span> three<span class="token punctuation">)</span> three<span class="token comment">//threeの手前にある空白も含まれる。</span>

r <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">two</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">"($$)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//実行結果</span>
<span class="token function"><span class="token maybe-class-name">One</span></span> <span class="token punctuation">(</span>$<span class="token punctuation">)</span> three
</code></pre></div>
<h2>関数を用いた置換</h2>
<p>最もいかれた正規表現の記述方法で複雑な正規表現がかみかぜ入れずに関数内に出現するので頭が爆発するは必須だ。これからそれをお題と共に書いていこうと思う。</p>
<p>お題「全てのリンクタグ<a>を特殊な形式に変換するプログラムを書く、class, id, hrefの属性を残し他は全て取り除く」</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> html <span class="token operator">=</span>
	<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">〇〇&#x3C;a onclick="alert('!!')" class="cl1" href="/foo" id="id1">XXX&#x3C;/a>△△</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">sanitizeATag</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//&#x3C; class="cl1" href="/foo" id="id1">XXX&#x3C;/a></span>

<span class="token keyword">function</span> <span class="token function">sanitizeATag</span><span class="token punctuation">(</span><span class="token parameter">aTag</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">/*(.*?)で囲まれた値がpartsに配列で入る。*/</span>
	<span class="token keyword">const</span> parts <span class="token operator">=</span> aTag<span class="token punctuation">.</span><span class="token method function property-access">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&#x3C;a<span class="token charclass class-name">\s</span><span class="token quantifier number">+</span><span class="token group punctuation">(</span><span class="token charclass class-name">.</span><span class="token quantifier number">*?</span><span class="token group punctuation">)</span>><span class="token group punctuation">(</span><span class="token charclass class-name">.</span><span class="token quantifier number">*?</span><span class="token group punctuation">)</span>&#x3C;<span class="token escape">\/</span>a></span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">parts[1]=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//parts[1]=onclick="alert('!!')" class="cl1" href="/foo" id="id1"</span>
	<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">parts[2]=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>parts<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//parts[2]=XXX</span>

	<span class="token keyword">const</span> attributes <span class="token operator">=</span> parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token charclass class-name">\s</span><span class="token quantifier number">+</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//空白で分割する。</span>
	<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[ `onclick="alert('!!')"`, 'class="cl1"', 'href="/foo"', 'id="id1"' ]</span>
	<span class="token keyword control-flow">return</span> <span class="token string">'&#x3C;a '</span> <span class="token operator">+</span> attributes<span class="token punctuation">.</span><span class="token method function property-access">filter</span><span class="token punctuation">(</span><span class="token parameter">attr</span> <span class="token arrow operator">=></span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token anchor function">^</span><span class="token group punctuation">(?:</span>class<span class="token alternation keyword">|</span>id<span class="token alternation keyword">|</span>href<span class="token group punctuation">)</span><span class="token charset"><span class="token charset-punctuation punctuation">[</span><span class="token charclass class-name">\s</span>=<span class="token charset-punctuation punctuation">]</span></span></span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span>attr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">join</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'>'</span> <span class="token operator">+</span> parts<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'&#x3C;/a>'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>参考書はコードだけ残し説明を丸投げしたので一行ずつ見ていこうと思う。</p>
<p><code>return</code> まではなんとか雰囲気で分かるがそこからは <code>.filter</code> や <code>.test</code> そして <code>.join</code> と今まで出て来なかったのをさらっと使用してやがる。</p>
<h3>.filter()メソッド</h3>
<p>引数にcallback関数を取ってその関数が <code>True</code> を返した値は配列に代入される。 <code>False</code> の場合は取り除かれる。</p>
<p><strong>使い方</strong></p>
<p><code>.filter(element => callback(element))</code></p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'spray'</span><span class="token punctuation">,</span> <span class="token string">'limit'</span><span class="token punctuation">,</span> <span class="token string">'elite'</span><span class="token punctuation">,</span> <span class="token string">'exuberant'</span><span class="token punctuation">,</span> <span class="token string">'destruction'</span><span class="token punctuation">,</span> <span class="token string">'present'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> result <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token method function property-access">filter</span><span class="token punctuation">(</span><span class="token parameter">word</span> <span class="token arrow operator">=></span> word<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">></span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// expected output: Array ["exuberant", "destruction", "present"]</span>
</code></pre></div>
<h3>.test()メソッド</h3>
<p>正規表現と指定された文字列の一致を調べる検索を実行します。一致するものがあれば <code>True</code> なければ <code>False</code> を返す。</p>
<p>今回の場合正規表現は <code>/^(?:class|id|href)[\s=]/i</code> となっており <code>[^]</code> と似ているがこれは <code>[]</code> 内での使用ではないため違う。文字列の先頭から検索するという意味になる。 先頭にマッチする</p>
<p>対象じゃないものが含まれればするーされる。例： <code>https</code> にマッチしたいとして、開始に <code>さhttps</code> と対象じゃない物が入ると後半でマッチしてもするーする。つまり最初は絶対に <code>https</code> から始まらないとダメらしい。</p>
<p><strong>行頭の最初の文字だけマッチさせる</strong></p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">kIt was the best of times, it was the woekst of times</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>

<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token method function property-access">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token anchor function">^</span><span class="token charclass class-name">\w</span><span class="token quantifier number">+</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p><strong>キャプチャグループ</strong></p>
<p><code>?:</code> の説明をする前にキャプチャグループについて説明する。</p>
<p>正規表現ではパターン全体にマッチした文字列を取得できるがパターンマッチしたさらにその一部の部分をキャプチャグループと呼ばれる <code>(...)</code> で囲うことで括弧内に書かれたパターンにマッチした文字列を取得することができる。</p>
<p>キャプチャグループを使用しない例</p>
<p>そのため下記のコードではパターン全体にマッチした文字列を取得してる。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token charclass class-name">\d</span><span class="token quantifier number">{4}</span>-<span class="token charclass class-name">\d</span><span class="token quantifier number">{2}</span>-<span class="token charclass class-name">\d</span><span class="token quantifier number">{2}</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>

<span class="token keyword">let</span> result <span class="token operator">=</span> regex<span class="token punctuation">.</span><span class="token method function property-access">exec</span><span class="token punctuation">(</span><span class="token string">'My birthday is 1994-07-25'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//実行結果</span>
<span class="token number">1994</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">25</span>
<span class="token punctuation">[</span>
  <span class="token string">'1994-07-25'</span><span class="token punctuation">,</span>
  index<span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">,</span>
  input<span class="token operator">:</span> <span class="token string">'My birthday is 1994-07-25'</span><span class="token punctuation">,</span>
  groups<span class="token operator">:</span> <span class="token keyword nil">undefined</span>
<span class="token punctuation">]</span>
</code></pre></div>
<p>.execメソッドは正規表現にマッチした文字列の情報を配列に格納して返す。</p>
<p>キャプチャグループ使用例</p>
<p>これでマッチした文字列の事をキャプチャと呼ぶ。下記のコードだと <code>[1]~[3]</code> を指す。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token group punctuation">(</span><span class="token charclass class-name">\d</span><span class="token quantifier number">{4}</span><span class="token group punctuation">)</span>-<span class="token group punctuation">(</span><span class="token charclass class-name">\d</span><span class="token quantifier number">{2}</span><span class="token group punctuation">)</span>-<span class="token group punctuation">(</span><span class="token charclass class-name">\d</span><span class="token quantifier number">{2}</span><span class="token group punctuation">)</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>

<span class="token keyword">let</span> result <span class="token operator">=</span> regex<span class="token punctuation">.</span><span class="token method function property-access">exec</span><span class="token punctuation">(</span><span class="token string">'My birthday is 1994-07-25'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 1994-07-25</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 1994</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 07</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 25</span>
</code></pre></div>
<p><strong>ここでようやく?:の登場</strong></p>
<p>マッチした文字列からさらに細かくグループ分けしてキャプチャを作成するのがキャプチャグループでした。</p>
<p>そこでキャプチャを作成しても利用しないパターンが出てきます。本来であればそのまま利用しなければ済む話なのですが、キャプチャが不要なものはキャプチャしないように設定する事でキャプチャを取得する記述をよりシンプルにしたい。そんな時に <code>?:</code> は利用します。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token group punctuation">(?:</span><span class="token charclass class-name">\d</span><span class="token quantifier number">{4}</span><span class="token group punctuation">)</span>-<span class="token group punctuation">(</span><span class="token charclass class-name">\d</span><span class="token quantifier number">{2}</span><span class="token group punctuation">)</span>-<span class="token group punctuation">(</span><span class="token charclass class-name">\d</span><span class="token quantifier number">{2}</span><span class="token group punctuation">)</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>

<span class="token keyword">let</span> result <span class="token operator">=</span> regex<span class="token punctuation">.</span><span class="token method function property-access">exec</span><span class="token punctuation">(</span><span class="token string">'My birthday is 1994-07-25'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 1994-07-25</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 07</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 25</span>
</code></pre></div>
<p><code>1994</code> はキャプチャされないので、使わないキャプチャが含まれるより検索等で（for文で回す時）の処理をする際に少しでも軽くなる。</p>
<p>説明がだいぶそれてしまったが今回の正規表現 <code>/^(?:class|id|href)[\s=]/i</code> では先頭から始め、マッチはするが「class, id, href」のキャプチャは作成しないということがわかった。そして次に <code>[]</code> 角括弧ないのいずれかにマッチする。この場合は <code>\s</code> 半角スペース、タブ、垂直タブ、改行文字、全角スペースそして <code>=</code> のいずれかにマッチする。 <code>i</code> は大小関係なくマッチする。</p>
<p>まとめると</p>
<p>先頭から始めて、大文字小文字関係なく「class, id, href」にマッチし（キャプチャは作成しない） その後の文字は半角スペース、タブ、垂直タブ、改行文字、全角スペース、=のいずれかになる物にマッチする。</p>
<p>マッチすれば <code>True</code> を返す。そしてfilterメソッドで <code>True</code> の要素は配列に格納される。</p>
<h3>joinメソッド</h3>
<p>配列の中身を足してくれる。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"テスト"</span><span class="token punctuation">,</span> <span class="token string">"てすと"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token method function property-access">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*</span>
<span class="token comment">左に配列で引数に結合する際の何を使用するか今回は空なので</span>
<span class="token comment">テストてすとの間に何もない。</span>
<span class="token comment">*/</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//実行結果</span>
テストてすと
</code></pre></div>
<p>関数の中では <code>return '&#x3C;a ' + attributes.filter(attr => /^(?:class|id|href)[\s=]/i.test(attr)).join(' ') + '>' + parts[2] + '&#x3C;/a>';</code> のように使用され空白で結合するようになっている。配列はfilterメソッドが作成したもので中身は <code>[ 'class="cl1"', 'href="/foo"', 'id="id1"' ]</code> こうなっている。なので結果は <code>&#x3C;a class="cl1" href="/foo" id="id1">XXX&#x3C;/a></code> が出力される。</p>
<h3>ここで話はreplace()の第二引数に関数を渡すことが出来る。</h3>
<p>とても長かった話が終わって突然ですが、正規表現の関数という事でreplace()の第二引数に関数を渡して処理をする方法を学ぶ。これを使うと先ほど作成した <code>sanitizeATag()</code> 関数の引数に渡す前に <code>&#x3C;a></code> タグのみに絞って渡すことが出来る。ただそんな事しなくても上記のコードの <code>aTag.match(/&#x3C;a\s+(.*?)>(.*?)&#x3C;\/a>/i);</code> この部分でaタグのみに絞られるのでなくていい。</p>
<p>一応、replace() 使うとこんな事も出来るよという感じで見て欲しい。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> html <span class="token operator">=</span>
	<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">〇〇&#x3C;a onclick="alert('!!')" class="cl1" href="/foo" id="id1">XXX&#x3C;/a>△△</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>

html<span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&#x3C;a <span class="token charclass class-name">.</span><span class="token quantifier number">*?</span>><span class="token group punctuation">(</span><span class="token charclass class-name">.</span><span class="token quantifier number">*?</span><span class="token group punctuation">)</span>&#x3C;<span class="token escape">\/</span>a></span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">match<span class="token punctuation">,</span> group1<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> origin</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&#x3C;a>タグが</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>offset<span class="token operator">+</span><span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">文字目から見つかった</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">リンク対象文字列は「</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>group1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">」</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">元々の文字列は「</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>origin<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">」</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">マッチしたのは「</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>match<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">」</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//実行結果</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>a</span><span class="token punctuation">></span></span><span class="token plain-text">タグが3文字目から見つかった</span>
<span class="token plain-text">リンク対象文字列は「XXX」</span>
<span class="token plain-text">元々の文字列は「〇〇</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>a</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'!!'</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cl1<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/foo<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">XXX</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>a</span><span class="token punctuation">></span></span><span class="token plain-text">△△」</span>
<span class="token plain-text">マッチしたのは「</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>a</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'!!'</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cl1<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/foo<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">XXX</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>a</span><span class="token punctuation">></span></span><span class="token plain-text">」</span>
</code></pre></div>
<p><code>String.prototype.replace</code> に渡す関数は、次の引数を順に受け取る。prototypeって何だろう？JavaScriptやってると結構出てくる。</p>
<ol>
<li>マッチした文字列全て（$&#x26;と同じ）</li>
<li>マッチしたグループ（グループが指定してある時）。グループの数と同じだけの引数（キャプチャ）を書く。</li>
<li>マッチした文字列のオフセット（0から始まる）</li>
<li>元の文字列（滅多に使われない）</li>
</ol>
<p>これを使って先ほどのコードにreplace()を組み込んで見ます。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> html <span class="token operator">=</span>
	<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">〇〇&#x3C;a onclick="alert('!!')" class="cl1" href="/foo" id="id1">XXX&#x3C;/a>△△</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>

<span class="token comment">//ここが新しい。</span>
<span class="token keyword">const</span> r <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&#x3C;a <span class="token charclass class-name">.</span><span class="token quantifier number">*?</span>&#x3C;<span class="token escape">\/</span>a></span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span><span class="token punctuation">,</span> sanitizeAtag<span class="token punctuation">)</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token comment">//&#x3C; class="cl1" href="/foo" id="id1">XXX&#x3C;/a></span>

<span class="token keyword">function</span> <span class="token function">sanitizeATag</span><span class="token punctuation">(</span><span class="token parameter">aTag</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">/*(.*?)で囲まれた値がpartsに配列で入る。*/</span>
	<span class="token keyword">const</span> parts <span class="token operator">=</span> aTag<span class="token punctuation">.</span><span class="token method function property-access">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&#x3C;a<span class="token charclass class-name">\s</span><span class="token quantifier number">+</span><span class="token group punctuation">(</span><span class="token charclass class-name">.</span><span class="token quantifier number">*?</span><span class="token group punctuation">)</span>><span class="token group punctuation">(</span><span class="token charclass class-name">.</span><span class="token quantifier number">*?</span><span class="token group punctuation">)</span>&#x3C;<span class="token escape">\/</span>a></span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">parts[1]=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//parts[1]=onclick="alert('!!')" class="cl1" href="/foo" id="id1"</span>
	<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">parts[2]=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>parts<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//parts[2]=XXX</span>

	<span class="token keyword">const</span> attributes <span class="token operator">=</span> parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token charclass class-name">\s</span><span class="token quantifier number">+</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//空白で分割する。</span>
	<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[ `onclick="alert('!!')"`, 'class="cl1"', 'href="/foo"', 'id="id1"' ]</span>
	<span class="token keyword control-flow">return</span> <span class="token string">'&#x3C;a '</span> <span class="token operator">+</span> attributes<span class="token punctuation">.</span><span class="token method function property-access">filter</span><span class="token punctuation">(</span><span class="token parameter">attr</span> <span class="token arrow operator">=></span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token anchor function">^</span><span class="token group punctuation">(?:</span>class<span class="token alternation keyword">|</span>id<span class="token alternation keyword">|</span>href<span class="token group punctuation">)</span><span class="token charset"><span class="token charset-punctuation punctuation">[</span><span class="token charclass class-name">\s</span>=<span class="token charset-punctuation punctuation">]</span></span></span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span>attr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">join</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'>'</span> <span class="token operator">+</span> parts<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'&#x3C;/a>'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>これでreplace()の第二引数にsanitizeAtagを渡す事ができました。sanitizeAtagの引数 <code>aTag</code> には 引数 <code>match</code> が渡る。</p>
<h2>行頭や行末とのマッチング</h2>
<p>先ほど先頭（行頭）でマッチングする <code>^</code> を紹介したがもう一つ <code>$</code> は行末にマッチする。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> input <span class="token operator">=</span> <span class="token string">"It was the best of times, it was the worst of times"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> beginning <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token method function property-access">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token anchor function">^</span><span class="token charclass class-name">\w</span><span class="token quantifier number">+</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*配列の先頭にしてるのはmatchが返すのが配列でそこにはマッチした文字以外の情報が含まれている。*/</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>beginning<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//先頭の文字列Itにマッチしてから文字が続くまでだから空白で区切られる。</span>
<span class="token keyword">const</span> end <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token method function property-access">match</span><span class="token punctuation">(</span><span class="token operator">/</span>\w<span class="token operator">+</span>$<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>end<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//times 同様にマッチするが後ろからになる。</span>
<span class="token keyword">const</span> everything <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token method function property-access">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token anchor function">^</span><span class="token charclass class-name">.</span><span class="token quantifier number">*</span><span class="token anchor function">$</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//文字列全体にマッチする。</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>everything<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> nomatch1 <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token method function property-access">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token anchor function">^</span>best</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>nomatch1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 先頭からのスタートにはないのでNullが返る。</span>
<span class="token keyword">const</span> nomatch2 <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token method function property-access">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">worst<span class="token anchor function">$</span></span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>nomatch2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//null</span>

<span class="token keyword">const</span> input2 <span class="token operator">=</span> <span class="token string">"あの頃が最高だったな~。まぁ、あの頃が最悪でもあったな〜。"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> beginning2 <span class="token operator">=</span> input2<span class="token punctuation">.</span><span class="token method function property-access">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token anchor function">^</span><span class="token charclass class-name">.</span><span class="token quantifier number">*?</span><span class="token charset"><span class="token charset-punctuation punctuation">[</span>はが<span class="token charset-punctuation punctuation">]</span></span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>beginning2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//あの頃が</span>
<span class="token keyword">const</span> end2 <span class="token operator">=</span> input2<span class="token punctuation">.</span><span class="token method function property-access">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token charset"><span class="token charset-punctuation punctuation">[</span><span class="token charset-negation operator">^</span>。<span class="token charset-punctuation punctuation">]</span></span><span class="token quantifier number">+</span>。<span class="token anchor function">$</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>end2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//まぁ、あの頃は最悪でもあったな〜。</span>

</code></pre></div>
<p>個人的には <code>input2.match(/[^。]+。$/);</code> ここの正規表現で引っかかった。</p>
<p>角括弧 <code>[]</code> の中で <code>^</code> を使用すると括弧内の文字以外という否定の意味になる。先頭を表すものではない事に注意が必要だ。</p>
<p>そのため上記の場合は <code>。</code> 以外となる。続きは <code>。</code> 以外つまり文字列等が1文字以上繰り返され最後は <code>。</code> から始まる。もちろん行末から検索をするので</p>
<p>まとめると</p>
<p><code>。</code> スタートで <code>。</code> 以外（。以外なので文字列、空白とかもマッチする）を一回以上繰り返す所までマッチする。</p>
<h3>改行で区切られた文字列を複数業として扱いたい場合は、フラグ「m (multiline)」を使う。</h3>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> input <span class="token operator">=</span> <span class="token string">"One Line\nTwo lines\nThree lines\nFour"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> beginnings <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token method function property-access">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token anchor function">^</span><span class="token charclass class-name">\w</span><span class="token quantifier number">+</span></span><span class="token regex-delimiter">/</span><span class="token regex-flags">mg</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>beginnings<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//改行ごとに先頭から文字列を抽出</span>
<span class="token keyword">const</span> endings <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token method function property-access">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token charclass class-name">\w</span><span class="token quantifier number">+</span><span class="token anchor function">$</span></span><span class="token regex-delimiter">/</span><span class="token regex-flags">mg</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>endings<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//改行ごとに後方からマッチする文字列を抽出</span>

<span class="token comment">//実行結果</span>
<span class="token punctuation">[</span> <span class="token string">'One'</span><span class="token punctuation">,</span> <span class="token string">'Two'</span><span class="token punctuation">,</span> <span class="token string">'Three'</span><span class="token punctuation">,</span> <span class="token string">'Four'</span> <span class="token punctuation">]</span>
<span class="token punctuation">[</span> <span class="token string">'Line'</span><span class="token punctuation">,</span> <span class="token string">'lines'</span><span class="token punctuation">,</span> <span class="token string">'lines'</span><span class="token punctuation">,</span> <span class="token string">'Four'</span> <span class="token punctuation">]</span>
</code></pre></div>
<h2>英単語の境界のマッチング</h2>
<p>ここ説明がよくわからなかったかたコードから見ていこうと思う。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> inputs <span class="token operator">=</span> <span class="token punctuation">[</span>
		<span class="token string">"john@doe.com"</span><span class="token punctuation">,</span> 
		<span class="token string">"john@doe.com is my email"</span><span class="token punctuation">,</span>
		<span class="token string">"my email is john@doe.com"</span><span class="token punctuation">,</span>
		<span class="token string">"use john@doe.com, my email"</span><span class="token punctuation">,</span>
		<span class="token string">"my email:john@doe.com."</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> emailMatcher <span class="token operator">=</span> 
	<span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token anchor function">\b</span><span class="token charset"><span class="token charset-punctuation punctuation">[</span><span class="token range">a<span class="token range-punctuation operator">-</span>z</span><span class="token charset-punctuation punctuation">]</span></span><span class="token charset"><span class="token charset-punctuation punctuation">[</span><span class="token range">a<span class="token range-punctuation operator">-</span>z</span><span class="token range">0<span class="token range-punctuation operator">-</span>9</span>._-<span class="token charset-punctuation punctuation">]</span></span><span class="token quantifier number">*</span>@<span class="token charset"><span class="token charset-punctuation punctuation">[</span><span class="token range">a<span class="token range-punctuation operator">-</span>z</span><span class="token charset-punctuation punctuation">]</span></span><span class="token charset"><span class="token charset-punctuation punctuation">[</span><span class="token range">a<span class="token range-punctuation operator">-</span>z</span><span class="token charset-punctuation punctuation">]</span></span><span class="token charset"><span class="token charset-punctuation punctuation">[</span><span class="token range">a<span class="token range-punctuation operator">-</span>z</span><span class="token range">0<span class="token range-punctuation operator">-</span>9</span>_-<span class="token charset-punctuation punctuation">]</span></span><span class="token quantifier number">+</span><span class="token special-escape escape">\.</span><span class="token charset"><span class="token charset-punctuation punctuation">[</span><span class="token range">a<span class="token range-punctuation operator">-</span>z</span><span class="token charset-punctuation punctuation">]</span></span><span class="token quantifier number">+</span><span class="token group punctuation">(?:</span><span class="token special-escape escape">\.</span><span class="token charset"><span class="token charset-punctuation punctuation">[</span><span class="token range">a<span class="token range-punctuation operator">-</span>z</span><span class="token charset-punctuation punctuation">]</span></span><span class="token quantifier number">+</span><span class="token group punctuation">)</span><span class="token quantifier number">?</span><span class="token anchor function">\b</span></span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> r <span class="token operator">=</span> inputs<span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token parameter">s</span> <span class="token arrow operator">=></span> s<span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span>emailMatcher<span class="token punctuation">,</span> <span class="token string">'&#x3C;a href="mailto:$&#x26;">$&#x26;&#x3C;/a>'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//実行結果</span>
<span class="token punctuation">[</span>
  <span class="token string">'&#x3C;a href="mailto:john@doe.com">john@doe.com&#x3C;/a>'</span><span class="token punctuation">,</span>
  <span class="token string">'&#x3C;a href="mailto:john@doe.com">john@doe.com&#x3C;/a> is my email'</span><span class="token punctuation">,</span>
  <span class="token string">'my email is &#x3C;a href="mailto:john@doe.com">john@doe.com&#x3C;/a>'</span><span class="token punctuation">,</span>
  <span class="token string">'use &#x3C;a href="mailto:john@doe.com">john@doe.com&#x3C;/a>, my email'</span><span class="token punctuation">,</span>
  <span class="token string">'my email:&#x3C;a href="mailto:john@doe.com">john@doe.com&#x3C;/a>.'</span>
<span class="token punctuation">]</span>
</code></pre></div>
<p>上記のコード説明も読者に任せるタイプだったのでやっていこうと思う。</p>
<p>早速 <code>/\b[a-z][a-z0-9._-]*@[a-z][a-z][a-z0-9_-]+\.[a-z]+(?:\.[a-z]+)?\b/ig;</code>こんなに長い正規表現を見せられて気絶しそうだった。 先ほど重い関数を乗り越えたと思ったらこれだから後半に畳み掛けるタイプの参考書だなと思う。</p>
<p>ただ上の方で紹介した<a href="#%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97%E3%81%AE%E7%BD%AE%E6%8F%9B">URLのマッチング</a>と似たような構成になっているので目を凝らせば読めないこともないと思う。これまで書いてきた技術を思いだせば読めると思う。</p>
<p>まず <code>\b</code> これは今まで出てきた <code>\w</code> （[a-zA-Z_]「英単語」。ダッシュ、ピリオドは含まれない。）等のメタ文字と同じだ。単語の区切りにマッチするという意味のわからない機能を兼ね備えている。</p>
<p>空白で区切ればいいのではと考えてしまう。マッチしたい単語の直後が空白かどうかを検索するみたいな正規表現で同じ機能実装できるじゃんと思ったが、実際には空白のみ出なく「。.」等も区切りとして認識される。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"Let it be."</span><span class="token punctuation">.</span><span class="token method function property-access">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token anchor function">\b</span>it<span class="token anchor function">\b</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"Let it。be."</span><span class="token punctuation">.</span><span class="token method function property-access">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token anchor function">\b</span>it<span class="token anchor function">\b</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"Let itt be."</span><span class="token punctuation">.</span><span class="token method function property-access">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token anchor function">\b</span>it<span class="token anchor function">\b</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//実行結果</span>
<span class="token punctuation">[</span> <span class="token string">'it'</span><span class="token punctuation">,</span> index<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> input<span class="token operator">:</span> <span class="token string">'Let it be.'</span><span class="token punctuation">,</span> groups<span class="token operator">:</span> <span class="token keyword nil">undefined</span> <span class="token punctuation">]</span>
<span class="token punctuation">[</span> <span class="token string">'it'</span><span class="token punctuation">,</span> index<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> input<span class="token operator">:</span> <span class="token string">'Let it。be.'</span><span class="token punctuation">,</span> groups<span class="token operator">:</span> <span class="token keyword nil">undefined</span> <span class="token punctuation">]</span>
<span class="token keyword null nil">null</span>
</code></pre></div>
<p>続きを見ていく区切り文字があって次にa-zの一文字が来る。その次はa-z、0-9、あらゆる文字、_（アンダーバー）、-（横棒）が0回以上繰り返され@まで続く。つまり <code>a@</code> みたいな1文字のメールアドレスにもヒットする。</p>
<p>なぜ最初にa-zで固定しているかと言うとメールアドレスの最初は１文字目は英文字というルールから来ている。もしメールアドレスの最初を数字から始めれるなら上記の正規表現の意味は私には分からない。</p>
<p>@の次は英文字1文字、そして再びa-z、0-9、あらゆる文字、_（アンダーバー）、-（横棒）が1回以上繰り返されドットまで続くなぜ0回以上ではなく1回以上なのか不明だが <code>@a.</code> というようなメールアドレスは作れないルールか何かに沿っているんだと思う。</p>
<p>ドットの次はa-zの1文字以上、次に.（ドット）、a-zが１文字以上続くのがある場合とない場合にマッチする。つまり <code>co.jp</code> と <code>.com</code> で終わってもマッチするようになっている。グループのキャプチャはしない。最後に区切り文字でマッチして大文字小文字関係なくグローバルに検索する。</p>
<p>一瞬 <code>(?:\.[a-z]+)?</code> の最後の <code>?</code> は最短マッチかと思ったけど違った最短マッチはあらゆるメタ文字（*, +, ?, {n}, {n,}, {n, m}）の後ろに付けるとそのメタ文字の機能を最短でのマッチにすることができる。今回はグループの後ろに付いているので <code>?</code> はメタ文字として直前文字の0回もしくは1回の出現となる。</p>
<p>この辺はかなりややこしい。同じ記号でも付ける位置が変わることで別の意味をなすことになる。</p>
<h3>mapメソッド</h3>
<p>与えられた配列から要素を取り出してコールバック関数に渡すなりして新しく返ってきた値で新しく配列を生成する。</p>
<p><code>forEach</code> との違いは <code>map</code> は返された値で配列を作る。 <code>forEach</code> の場合はその必要がない。</p>
<p>なので返ってきた値で配列を作成するなら <code>map</code> そうじゃないなら <code>forEach</code> を作るのが無難です。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// pass a function to map</span>
<span class="token keyword">const</span> map1 <span class="token operator">=</span> array1<span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token arrow operator">=></span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>map1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// expected output: Array [2, 8, 18, 32]</span>
</code></pre></div>
<p>上記のコードでは単純に配列の要素を1つずつreplaceメソッドに渡している。replaceには先ほどの正規表現渡しマッチした箇所を <code>&#x3C;a href="mailto:$&#x26;">$&#x26;&#x3C;/a></code> で置き換える。 <code>$&#x26;</code> にはマッチしたメールアドレスが入るので <code>&#x3C;a href="mailto:John@doe.com">john@doe.com&#x3C;/a></code> に置き換わる。</p>
<p>そのため出力結果が下記のようになる。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token punctuation">[</span>
  <span class="token string">'&#x3C;a href="mailto:john@doe.com">john@doe.com&#x3C;/a>'</span><span class="token punctuation">,</span>
  <span class="token string">'&#x3C;a href="mailto:john@doe.com">john@doe.com&#x3C;/a> is my email'</span><span class="token punctuation">,</span>
  <span class="token string">'my email is &#x3C;a href="mailto:john@doe.com">john@doe.com&#x3C;/a>'</span><span class="token punctuation">,</span>
  <span class="token string">'use &#x3C;a href="mailto:john@doe.com">john@doe.com&#x3C;/a>, my email'</span><span class="token punctuation">,</span>
  <span class="token string">'my email:&#x3C;a href="mailto:john@doe.com">john@doe.com&#x3C;/a>.'</span>
<span class="token punctuation">]</span>
</code></pre></div>
<h2>先読み</h2>
<p>「先読みは行頭・行末や単語の境界のメタ文字のように、入力文字列を消費しない」？？これ正規表現が文字列を消費しながらマッチすることを指して使ってる言葉だと思うんだけど消費しないとどんなメリットがあるのかいまいち理解できない。</p>
<p>これも最初の説明の意味が分からないから、コードから読んでいこうと思う。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">validpassword</span><span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword control-flow">return</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token charset"><span class="token charset-punctuation punctuation">[</span><span class="token range">A<span class="token range-punctuation operator">-</span>Z</span><span class="token charset-punctuation punctuation">]</span></span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">&#x26;&#x26;</span>
		<span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token charset"><span class="token charset-punctuation punctuation">[</span><span class="token range">0<span class="token range-punctuation operator">-</span>9</span><span class="token charset-punctuation punctuation">]</span></span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">&#x26;&#x26;</span>
		<span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token charset"><span class="token charset-punctuation punctuation">[</span><span class="token range">a<span class="token range-punctuation operator">-</span>z</span><span class="token charset-punctuation punctuation">]</span></span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">&#x26;&#x26;</span>
		<span class="token operator">!</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token charset"><span class="token charset-punctuation punctuation">[</span><span class="token charset-negation operator">^</span><span class="token range">a<span class="token range-punctuation operator">-</span>z</span><span class="token range">A<span class="token range-punctuation operator">-</span>Z</span><span class="token range">0<span class="token range-punctuation operator">-</span>9</span><span class="token charset-punctuation punctuation">]</span></span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//それ以外の文字が含まれない。</span>
<span class="token punctuation">}</span>

<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">vaildpassword</span><span class="token punctuation">(</span><span class="token string">"aiueo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">vaildpassword</span><span class="token punctuation">(</span><span class="token string">"3aiuEo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">vaildpassword</span><span class="token punctuation">(</span><span class="token string">"traveLer2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">vaildpassword</span><span class="token punctuation">(</span><span class="token string">"日本語3aB"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">vaildpassword</span><span class="token punctuation">(</span><span class="token string">"Poke3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">vaildpassword</span><span class="token punctuation">(</span><span class="token string">"Poké3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>
</code></pre></div>
<p>条件分岐を <code>return</code> で行い <code>True</code> か <code>False</code> を返す。</p>
<p>これを一つの正規表現にまとめたいとする。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">vaildpassword</span><span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword control-flow">return</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token charset"><span class="token charset-punctuation punctuation">[</span><span class="token range">A<span class="token range-punctuation operator">-</span>Z</span><span class="token charset-punctuation punctuation">]</span></span><span class="token charclass class-name">.</span><span class="token quantifier number">*</span><span class="token charset"><span class="token charset-punctuation punctuation">[</span><span class="token range">0<span class="token range-punctuation operator">-</span>9</span><span class="token charset-punctuation punctuation">]</span></span><span class="token charclass class-name">.</span><span class="token quantifier number">*</span><span class="token charset"><span class="token charset-punctuation punctuation">[</span><span class="token range">a<span class="token range-punctuation operator">-</span>z</span><span class="token charset-punctuation punctuation">]</span></span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>これは上手く行かない。</p>
<p>これにマッチするには、小文字の前に数字が、さらにその前に大文字が来なければなりません。さらに他の文字が入ってはいけないことをチェック出来ていない。</p>
<p>なぜこうなるのかというとそれは上記の正規表現が文字列を消費しながら検索を進めていくためである。</p>
<p>こういった場合に入力文字列を消費しない正規表現である「先読み（lookahead）」を利用できる。JavaScriptにおいては <code>(?=...)</code> のように指定します。「否定先読み」もあり、 <code>(?!...)</code> は後ろに指定の表現が続かないものだけにマッチします。</p>
<p>先読みを使うとパスワード認証の正規表現を、簡潔にまとめることができる。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">vaildpassword</span><span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword control-flow">return</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token group punctuation">(?=</span><span class="token charclass class-name">.</span><span class="token quantifier number">*</span><span class="token charset"><span class="token charset-punctuation punctuation">[</span><span class="token range">A<span class="token range-punctuation operator">-</span>Z</span><span class="token charset-punctuation punctuation">]</span></span><span class="token group punctuation">)</span><span class="token group punctuation">(?=</span><span class="token charclass class-name">.</span><span class="token quantifier number">*</span><span class="token charset"><span class="token charset-punctuation punctuation">[</span><span class="token range">0<span class="token range-punctuation operator">-</span>9</span><span class="token charset-punctuation punctuation">]</span></span><span class="token group punctuation">)</span><span class="token group punctuation">(?=</span><span class="token charclass class-name">.</span><span class="token quantifier number">*</span><span class="token charset"><span class="token charset-punctuation punctuation">[</span><span class="token range">a<span class="token range-punctuation operator">-</span>z</span><span class="token charset-punctuation punctuation">]</span></span><span class="token group punctuation">)</span><span class="token anchor function">^</span><span class="token charset"><span class="token charset-punctuation punctuation">[</span><span class="token range">a<span class="token range-punctuation operator">-</span>z</span><span class="token range">A<span class="token range-punctuation operator">-</span>Z</span><span class="token range">0<span class="token range-punctuation operator">-</span>9</span><span class="token charset-punctuation punctuation">]</span></span><span class="token quantifier number">+</span><span class="token anchor function">$</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//先ほどと同じように実行してみる。</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">vaildpassword</span><span class="token punctuation">(</span><span class="token string">"aiueo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">vaildpassword</span><span class="token punctuation">(</span><span class="token string">"3aiuEo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">vaildpassword</span><span class="token punctuation">(</span><span class="token string">"traveLer2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">vaildpassword</span><span class="token punctuation">(</span><span class="token string">"日本語3aB"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">vaildpassword</span><span class="token punctuation">(</span><span class="token string">"Poke3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">vaildpassword</span><span class="token punctuation">(</span><span class="token string">"Poké3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>
</code></pre></div>
<p>これを見たときに <code>/(?=.*[A-Z])(?=.*[0-9])(?=.*[a-z])^[a-zA-Z0-9]+$/</code> あれこれ重なってる部分あるんじゃないかなと思った。</p>
<p>前半・後半で下記のように分けて見る。</p>
<p><code>/(?=.*[A-Z])(?=.*[0-9])(?=.*[a-z])/</code> と <code>/^[a-zA-Z0-9]+$/</code> で分けれるのではと思ってしまった。</p>
<p>前半は先読みが使われていて、 <code>(?=.*[A-Z])</code> 何か文字列が0文字以上で次にA-Zのどれかが入る。んっ？最初はどんな文字でもよくて次にくるのがA-Zにマッチする？？単細胞の私はこれだと「あああK」とかにしかマッチしないんじゃないかと思う。文字が消費される場合はそれでいいのだが、今回は文字が消費されないので「あKああ」でもマッチする。なんなら「K」でもマッチする。なぜなら <code>*</code> が0文字以上なので最悪なくていいためです。「あ」これはマッチしないです。 <code>[A-Z]</code> がないためです。これと似たような感じで <code>(?=.*[0~9])</code> 、 <code>(?=.*[a-z])</code> と続きます。文字列が消費されないということで毎回最初から検索をかけているんだと思います。</p>
<p>後半では <code>/^[a-zA-Z0-9]+$/</code> となっておりa-z、A-Z、0-9の文字列いずれかが一文字以上で文字列全体でマッチするとなっています。なのであれっこれ前半のやつと被ってないかと思ってしまいますが、そんなことはありません。実際に分割してコードを実行して見ました。</p>
<p>前半</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">vaildpassword</span><span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword control-flow">return</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token group punctuation">(?=</span><span class="token charclass class-name">.</span><span class="token quantifier number">*</span><span class="token charset"><span class="token charset-punctuation punctuation">[</span><span class="token range">A<span class="token range-punctuation operator">-</span>Z</span><span class="token charset-punctuation punctuation">]</span></span><span class="token group punctuation">)</span><span class="token group punctuation">(?=</span><span class="token charclass class-name">.</span><span class="token quantifier number">*</span><span class="token charset"><span class="token charset-punctuation punctuation">[</span><span class="token range">0<span class="token range-punctuation operator">-</span>9</span><span class="token charset-punctuation punctuation">]</span></span><span class="token group punctuation">)</span><span class="token group punctuation">(?=</span><span class="token charclass class-name">.</span><span class="token quantifier number">*</span><span class="token charset"><span class="token charset-punctuation punctuation">[</span><span class="token range">a<span class="token range-punctuation operator">-</span>z</span><span class="token charset-punctuation punctuation">]</span></span><span class="token group punctuation">)</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//右側のboolean型は後半もある場合、実際の実行結果と比較しやすいように用意しました。</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">vaildpassword</span><span class="token punctuation">(</span><span class="token string">"aiueo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">vaildpassword</span><span class="token punctuation">(</span><span class="token string">"3aiuEo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">vaildpassword</span><span class="token punctuation">(</span><span class="token string">"traveLer2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">vaildpassword</span><span class="token punctuation">(</span><span class="token string">"日本語3aB"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">vaildpassword</span><span class="token punctuation">(</span><span class="token string">"Poke3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">vaildpassword</span><span class="token punctuation">(</span><span class="token string">"Poké3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>

<span class="token comment">//実際の実行結果</span>
<span class="token boolean">false</span>
<span class="token boolean">true</span>
<span class="token boolean">true</span>
<span class="token boolean">true</span>
<span class="token boolean">true</span>
<span class="token boolean">true</span>
</code></pre></div>
<p><code>console.log(vaildpassword("日本語3aB"));</code> と <code>console.log(vaildpassword("Poké3"));</code> の実行結果が <code>/(?=.*[A-Z])(?=.*[0-9])(?=.*[a-z])^[a-zA-Z0-9]+$/</code> とは異なります。</p>
<p>理由は「日本語、é」が入っていても <code>/.*/</code> ではマッチしてしまうからです。なので後半ではそれを取り除くために使われている文字列は「a-zA-Z0-9」のいずれかのみという指定をしています。</p>
<p>後半</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">vaildpassword</span><span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword control-flow">return</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token anchor function">^</span><span class="token charset"><span class="token charset-punctuation punctuation">[</span><span class="token range">a<span class="token range-punctuation operator">-</span>z</span><span class="token range">A<span class="token range-punctuation operator">-</span>Z</span><span class="token range">0<span class="token range-punctuation operator">-</span>9</span><span class="token charset-punctuation punctuation">]</span></span><span class="token quantifier number">+</span><span class="token anchor function">$</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//右側のboolean型は前半もある場合、実際の実行結果と比較しやすいように用意しました。</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">vaildpassword</span><span class="token punctuation">(</span><span class="token string">"aiueo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">vaildpassword</span><span class="token punctuation">(</span><span class="token string">"3aiuEo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">vaildpassword</span><span class="token punctuation">(</span><span class="token string">"traveLer2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">vaildpassword</span><span class="token punctuation">(</span><span class="token string">"日本語3aB"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">vaildpassword</span><span class="token punctuation">(</span><span class="token string">"Poke3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">vaildpassword</span><span class="token punctuation">(</span><span class="token string">"Poké3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>

<span class="token comment">//実際の実行結果</span>
<span class="token boolean">true</span>
<span class="token boolean">true</span>
<span class="token boolean">true</span>
<span class="token boolean">false</span>
<span class="token boolean">true</span>
<span class="token boolean">false</span>
</code></pre></div>
<p>逆にこの場合はa-zA-Z0-9のいずれかが使用されていればマッチするので条件がガバガバになってしまいます。</p>
<p>なので、前半の1文字ずつ含まれているか確認する動作が必要になります。</p>
<p>そのため、前半後半必要だということが分かりました。</p>
<h2>正規表現の動的生成</h2>
<p>記事の最初の方に正規表現のリテラルを使用する方が、RegExpのコンストラクタを使用するよりも一般的であると書かれていたが、その理由の一つとしてリテラル表現を使えば「\」をエスケープする必要がないという点があげられる。</p>
<p>よく意味が分からないがMDNによると、正規表現リテラルはスクリプトのロード時にコンパイルされるのに対し、コンストラクタを使用した場合は実行時にコンパイルされる。したがって、固定された正規表現を使う場合は、リテラルを使った方が効率よくなる。</p>
<p>まとめると</p>
<p>固定された正規表現ではリテラルの方が効率が良い。</p>
<p>RegExpのコンストラクタを本当に使用する場面は正規表現を動的に生成したい場合です。</p>
<p>例えばユーザが入力した文字列に対してマッチング操作を行うといった場合です。</p>
<p>次の例では、 <strong>ユーザ入力にしたいのですが、説明を簡素にするためにマッチする名前は変数（users、users2）に代入してあります。</strong></p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> users <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"mary"</span><span class="token punctuation">,</span> <span class="token string">"nick"</span><span class="token punctuation">,</span> <span class="token string">"arthur"</span><span class="token punctuation">,</span> <span class="token string">"sam"</span><span class="token punctuation">,</span> <span class="token string">"yvette"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> userRegex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">@(?:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>users<span class="token punctuation">.</span><span class="token method function property-access">join</span><span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)\\b</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>userRegex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// /@(?:mary|nick|arthur|sam|yvette)\b/g</span>

<span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token string">"User @arthur started the backup and 15:15, "</span> <span class="token operator">+</span>
						<span class="token string">"and @nick and @yvette restored it at 18:35."</span><span class="token punctuation">;</span>

<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token method function property-access">match</span><span class="token punctuation">(</span>userRegex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//["@arthur", "@nick", "@yvette"]</span>

<span class="token keyword">const</span> users2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"浦島太郎"</span><span class="token punctuation">,</span> <span class="token string">"一寸法師"</span><span class="token punctuation">,</span> <span class="token string">"桃太郎"</span><span class="token punctuation">,</span> <span class="token string">"金太郎"</span><span class="token punctuation">,</span> <span class="token string">"かぐや姫"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> userRegex2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(?:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>users2<span class="token punctuation">.</span><span class="token method function property-access">join</span><span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>userRegex2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// /(?:浦島太郎|一寸法師|桃太郎|金太郎|かぐや姫)/g</span>

<span class="token keyword">const</span> text2 <span class="token operator">=</span> <span class="token string">"浦島太郎がバックアップを開始（15:15）\n "</span> <span class="token operator">+</span>
						<span class="token string">"かぐや姫と金太郎がリストア（18:35）\n"</span><span class="token punctuation">;</span>

<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>text2<span class="token punctuation">.</span><span class="token method function property-access">match</span><span class="token punctuation">(</span>userRegex2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//["浦島太郎", "かぐや姫", "金太郎"]</span>
</code></pre></div>
<p><code>userRegex</code> は＠から始まり。配列に格納されたユーザ情報のいずれかに一致して、最後は文字の区切りで終わる正規表現をしており、注意する点は特殊文字として使用する <code>\b</code> をコンパイル前はただの文字列として認識して欲しいので <code>\\b</code> としている。キャプチャしない設定にすることで若干の効率アップを計っている。</p>
<p><code>userRegex2</code> は先ほどの物に＠と文字区切りを抜いて、配列内のいずれかにマッチすればマッチした部分が抽出される。</p>
<h2>おわりに</h2>
<p>とても長かった、正規表現で何度も挫けそうになった。アプリで少し正規表現を使用したいだけなのに、理解して使えるようにならないと気が済まない為ここまで広範囲に学ぶことになった。これでは一向にアプリが完成しそうにない。</p>
<p>今回、参考書の内容は理解したが、まだ全然使いこなせる段階ではないのでこの記事を何度も見返しながら自分で正規表現を組み立てて、プログラムに組み込んで行こうと思います。</p>
<p>他にも紹介されてない正規表現もあると思います。ある程度使いこなせるようになったら次の段階に進めたらと思います。</p>
<p>途中で自分の感想等が入ったりするので文章が「である。」と「です。ます。」が入り混じって気持ち悪い文章になっています。ご了承下さい。かなり長文なので、誤字脱字あると思います。見かけた際は教えてくださると助かります。</p>
<p>この記事を書くことで１ヶ月の間、正規表現と共に過ごすことが出来たので、昔ほど嫌悪感がなくなったことが嬉しい。</p>
<p>最後まで記事を読んで下さりありがとうございました。</p>
<p>記事に関するコメント等は</p>
<p>🕊：<a href="https://twitter.com/Unemployed_jp">Twitter</a>
📺：<a href="https://www.youtube.com/channel/UCT3wLdiZS3Gos87f9fu4EOQ/featured?view_as=subscriber">Youtube</a>
📸：<a href="https://www.instagram.com/unemployed_jp/">Instagram</a>
👨🏻‍💻：<a href="https://github.com/wimpykid719?tab=repositories">Github</a>
😥：<a href="https://ja.stackoverflow.com/users/edit/22565">Stackoverflow</a></p>
<p>でも受け付けています。どこかにはいます。</p>
<h3>参照</h3>
<p>コードの引用は下記の参照元からです。</p>
<p>一番参考している本です。</p>
<p>1)Ethan Brown. Learning JavaScript, 3rd Edition. O'Reilly. イーサン ブラウン ムシャ ヒロユキ ムシャ ルミ (訳) 2017. 「17章 正規表現」.『初めてのJavascript』. 第3版. オライリージャパン. pp 279-303.</p>
<p><a href="http://www.tohoho-web.com/js/regexp.htm#input">正規表現（RegExp） - とほほのWWW入門</a></p>
<p><a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/filter">Array.prototype.filter()</a></p>
<p><a href="http://www-creators.com/archives/2591">正規表現：「行頭」「行末」の表現と、応用例</a></p>
<p><a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec">RegExp.prototype.exec()</a></p>
<p><a href="https://www.javadrive.jp/regex-basic/writing/index3.html">キャプチャグループを使って正規表現パターンの一部にマッチした文字列を取得する</a></p>
<p>あんま関係ないけど面白い記事だった。</p>
<p><a href="http://crapp.hatenablog.com/entry/2015/02/12/220539">キャプチャしない正規表現は()にする・・・って、え？ - 負け犬プログラマーの歩み</a></p>
<p><a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test">RegExp.prototype.test()</a></p>
<p><a href="https://techacademy.jp/magazine/15333">JavaScriptで文字列の連結、join()を使う方法【初心者向け】</a></p>
<p><a href="https://www-creators.com/archives/3780">正規表現：ドット「.」の意味と使い方。</a></p>
<p><a href="https://qiita.com/ha_g1/items/d41febac011df4601544">正規表現の最短マッチ - Qiita</a></p>
<p><a href="https://www.translatejapan.com/translation/news/index3_2.php?no=141">ホンヤク社 - 正規表現「¥b」（単語の境界）編│原文ファイルのトリセツ</a></p>
<p><a href="https://qiita.com/shuhei/items/8ebbd8aecc806c4275b0">正規表現で単語の区切り - Qiita</a></p>
<p><a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/map">Array.prototype.map()</a></p>
<p><a href="https://techacademy.jp/magazine/15333">JavaScriptで文字列の連結、join()を使う方法【初心者向け】</a></p>
<p><a href="https://hiramatu-hifuka.com/onyak/onyak2/kigo-1.html">記号の読み方辞典（音訳の部屋）</a></p>
<p>この辺は正規表現を可視化してくれる。図で出してくれるけど、その図がいまいちよく分かんなくて結局分からない図が出てくるだけで使いこなせてない。</p>
<p><a href="https://regex101.com/#javascript">Regex101</a></p>
<p><a href="https://jex.im/regulex/#!flags=&#x26;re=(%3F%3D.*%5Ba-z%5D)">Regulex：JavaScript Regular Expression Visualizer</a></p>
<p>Javaだけど日本語で分かりやすい。</p>
<p><a href="https://regex-testdrive.com/ja/dotest">Regular Expression Test Drive</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JavaScriptでtry...catch構文を正しく使用する。]]></title>
        <id>https://techblog-pink.vercel.app/posts/2eebc0a7bae756828156</id>
        <link href="https://techblog-pink.vercel.app/posts/2eebc0a7bae756828156"/>
        <updated>2020-11-26T15:00:00.000Z</updated>
        <summary type="html"><![CDATA[...]]></summary>
        <content type="html"><![CDATA[<h2>最初に</h2>
<p>現在作成してるデスクトップアプリで受け取ったのが想定したURL以外の場合（空、ただの文字列、urlだけどアプリで使用しないURL例：goole.com等）に、エラー処理をしようと思ったので、JSのエラー処理について学んでみた。ただ正しくは例外処理と呼ぶらしい。記事を書きながら思ったのは上記の考え方でtry...catchを使用するのは少し違うと言う事です。</p>
<blockquote>
<p>JSの例外処理（exception handling）はエラーが起きた時に適切な処理を行うための機構です。エラー処理ではなく「例外処理」と呼ばれるのは、想定しているエラーではなく、想定していない例外的なケースのための処理と言う意味です。</p>
</blockquote>
<p>なので基本的にはディスク容量不足、ネットワークの不具合に使用されるのかな?</p>
<h2>Errorオブジェクト</h2>
<p>JSには組み込みのErrorオブジェクトがあり、エラー処理に利用出来ます。Errorのインスタンス生成時にエラーメッセージを指定することが出来ます。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> err <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Erroe</span><span class="token punctuation">(</span><span class="token string">'メールアドレスの形式が正しくありません'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>このErrorインスタンスを生成するだけでは何も起こらない。</p>
<p>メールアドレスが正しいかどうかをチェックする関数を作ります。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">validateEmail</span><span class="token punctuation">(</span><span class="token parameter">email</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword control-flow">return</span> email<span class="token punctuation">.</span><span class="token method function property-access">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">@</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token operator">?</span> <span class="token comment">/*三項演算子*/</span>
		email<span class="token operator">:</span> <span class="token comment">/* @が含まれる場合の戻り値 */</span>
		<span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'無効なメールアドレスです：${email}'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>???なんだ三項演算子って</p>
<p>if...elseのような条件から結果を出力出来る演算子だった。</p>
<p>今回の場合は <code>email.match(/@/)</code> で条件に一致つまり <code>email</code> の文字列に <code>@</code> が含まれていれば <code>True</code> が返るため <code>email</code> が実行される。 <code>console.log(email)</code> とかにすれば分かりやすかった。ただの変数だとは <code>email:</code> と書いてあるから何か特殊な構文かと思った。 <code>:</code> が演算子だった。</p>
<p>偽の場合は <code>new Error(</code>無効なアドレスです:${email}<code>);</code> が実行される。</p>
<p>このように自主的にエラーオブジェクトを生成してエラーを発生させる事も出来るが、一般的な利用方法ではない。</p>
<h2>try...catch構文</h2>
<p>こちらを用いるのが一般的です。先ほどの関数を用いる。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">validateEmail</span><span class="token punctuation">(</span><span class="token parameter">email</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword control-flow">return</span> email<span class="token punctuation">.</span><span class="token method function property-access">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">@</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token operator">?</span> <span class="token comment">/*三項演算子*/</span>
		email<span class="token operator">:</span> <span class="token comment">/* @が含まれる場合の戻り値 */</span>
		<span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'無効なメールアドレスです：${email}'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> email <span class="token operator">=</span> <span class="token keyword null nil">null</span><span class="token punctuation">;</span>

<span class="token keyword control-flow">try</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> validatedEmail <span class="token operator">=</span> <span class="token function">validateEmail</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>validatedEmail<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword control-flow">if</span><span class="token punctuation">(</span>validatedEmail <span class="token keyword">instanceof</span> <span class="token class-name">Error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">error</span><span class="token punctuation">(</span>validatedEmail<span class="token punctuation">.</span><span class="token property-access">message</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>
		<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">正しい形式のアドレス：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>validatedEmail<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword control-flow">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">エラー：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>err<span class="token punctuation">.</span><span class="token property-access">message</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p><code>instanceof</code> でインスタンスの状態を確認する。 <code>validatedEmail</code> にエラーオブジェクトが入っている場合は <code>True</code> を返す。</p>
<p><code>console.error</code> は <code>log</code>とほぼ同じだけどコンソールでエラーのような表示になる。 <code>message</code> にはエラーオブジェクトで生成された <code>無効なメールアドレスです：${email});</code> が格納されている。</p>
<p><code>catch</code> ではハッカーが通常の文字列以外、 <code>null</code> や数字、あるいはオブジェクトを設定した場合にエラーとなります。このような予期しないものに対してcatchと挟みます。</p>
<h3>Pythonとの違い</h3>
<p>try...catch構文はなく</p>
<p><code>except</code> にあらかじめ起こり得るエラー内容を想定して詳細に設定（下記のコードでは <code>ZeroDivisionError</code> ） して置かないといけない。Pythonでは全てのエラーに対して <code>except</code> する事を推奨していないためJSのような書き方が出来ない。</p>
<p>これも俗に言う宗派の違いだろうか...</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">divide</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">try</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%d/%d = %d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> x<span class="token operator">/</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">except</span> ZeroDivisionError<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ゼロ除算例外が発生しました。'</span><span class="token punctuation">)</span>

divide<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
divide<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
</code></pre></div>
<h2>最後に</h2>
<p>記事を書きながら思った。自分のケースでは例外処理と言うよりもまず先に条件式で詳細に縛りをいれた後にどうしても予期出来ないエラーをcatchするためにtry...catch構文を使用するんだと解釈に至った。
コンソールにエラーが出力されていたので、いきなり例外処理でなんとかしようと考えに至ったがどうやら甘い考えのようだ。</p>
<p>記事に関するコメント等は</p>
<p>🕊：<a href="https://twitter.com/Unemployed_jp">Twitter</a>
📺：<a href="https://www.youtube.com/channel/UCT3wLdiZS3Gos87f9fu4EOQ/featured?view_as=subscriber">Youtube</a>
📸：<a href="https://www.instagram.com/unemployed_jp/">Instagram</a>
👨🏻‍💻：<a href="https://github.com/wimpykid719?tab=repositories">Github</a>
😥：<a href="https://ja.stackoverflow.com/users/edit/22565">Stackoverflow</a></p>
<p>でも受け付けています。どこかにはいます。</p>
<h3>参照</h3>
<p>1)Ethan Brown.  Learning JavaScript, 3rd Edition. O'Reilly. イーサン ブラウン ムシャ ヒロユキ ムシャ ルミ (訳) 2017.  「11章 例外とエラー処理」.『初めてのJavascript』. 第3版. オライリージャパン. pp 191-193.</p>
<ol start="2">
<li></li>
</ol>
<p><a href="https://techacademy.jp/magazine/22299">Pythonの例外処理の基本try, exceptの使い方を現役エンジニアが解説【初心者向け】</a></p>
<ol start="3">
<li></li>
</ol>
<p><a href="https://zenn.dev/unemployed/articles/fa2fd531494fa806fb05">JS唯一の三項演算子の使い方</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JavaScriptの三項演算子の使い方]]></title>
        <id>https://techblog-pink.vercel.app/posts/fa2fd531494fa806fb05</id>
        <link href="https://techblog-pink.vercel.app/posts/fa2fd531494fa806fb05"/>
        <updated>2020-11-26T15:00:00.000Z</updated>
        <summary type="html"><![CDATA[...]]></summary>
        <content type="html"><![CDATA[<h2>最初に</h2>
<p>JSでの演算子について三項演算子がよく分からないのでサイ本の第5章を読んでいく。</p>
<p>式で計算した値は変数に代入するか引数として取らないと消えてしまう。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">let</span> x<span class="token punctuation">;</span>
<span class="token number">3</span> <span class="token operator">*</span> <span class="token number">5</span> <span class="token comment">//これだけだと値は消えてしまう。</span>
x <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">;</span> 
</code></pre></div>
<p><code>*</code> は演算子と呼ばれる物でこの前後に <code>3, 5</code> のような被演算子（オペラント = 式を構成する内の演算子じゃない方、変数なども該当する。）</p>
<h2>条件演算子（JS唯一の三項演算子）</h2>
<p>javascriptで唯一の三項演算子で、3つ被演算子（変数、定数等）これ以外の演算子では必須？の被演算子数は1か2です。条件演算子は、if...else文に相当する式です。</p>
<p>条件演算子の使用例</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> doIt <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> doIt <span class="token operator">?</span> <span class="token string">"Did it!"</span> <span class="token operator">:</span> <span class="token string">"Didn't do it."</span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 実行結果</span>
<span class="token comment">// Didn't do it.</span>
</code></pre></div>
<p>最初の被演算子 <code>doIt</code> （ <code>?</code> の前にあるやつ）が真と見なされる値の場合、式の結果は2つ目の被演算子 <code>Did it!</code> になる。偽の場合は <code>Didn't do it.</code> になる。今回の場合は <code>doIt = false</code> のため出力結果が <code>Didn't do it.</code> となる。</p>
<h2>まとめ</h2>
<p>if...else文と似ているがとても読みにくい。</p>
<p>参照</p>
<p>1)Ethan Brown. Learning JavaScript, 3rd Edition. O'Reilly. イーサン ブラウン ムシャ ヒロユキ ムシャ ルミ (訳) 2017. 「5章 式と演算子」.『初めてのJavascript』. 第3版. オライリージャパン. pp 96.</p>
<ol start="2">
<li></li>
</ol>
<p><a href="https://wa3.i-3-i.info/word13306.html">オペランド (operand)とは｜「分かりそう」で「分からない」でも「分かった」気になれるIT用語辞典</a></p>
<p>記事に関するコメント等は</p>
<p>🕊：<a href="https://twitter.com/Unemployed_jp">Twitter</a>
📺：<a href="https://www.youtube.com/channel/UCT3wLdiZS3Gos87f9fu4EOQ/featured?view_as=subscriber">Youtube</a>
📸：<a href="https://www.instagram.com/unemployed_jp/">Instagram</a>
👨🏻‍💻：<a href="https://github.com/wimpykid719?tab=repositories">Github</a>
😥：<a href="https://ja.stackoverflow.com/users/edit/22565">Stackoverflow</a></p>
<p>でも受け付けています。どこかにはいます。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonからJavascriptの非同期を学んだ時のまとめ。]]></title>
        <id>https://techblog-pink.vercel.app/posts/da3d92eb0d420643968f</id>
        <link href="https://techblog-pink.vercel.app/posts/da3d92eb0d420643968f"/>
        <updated>2020-11-16T15:00:00.000Z</updated>
        <summary type="html"><![CDATA[...]]></summary>
        <content type="html"><![CDATA[<h2>最初に</h2>
<p>Javascriptの非同期をやっていく上でこれがすごい大事な気がする。</p>
<p>JSは<strong>基本的に非同期処理を元に作成された言語</strong></p>
<p>そのためこれから使うcallback関数、Promis、await asyncでは関数を非同期に変換するというより、非同期に待機処理を追加して処理を上手くコントロールするという使い方になる。</p>
<p>他の言語ではこれが逆になるから、少し混乱するのかもしれない。</p>
<h2>コールバック関数を使った非同期</h2>
<p><code>setTimeout</code> を使用する事で処理が一度中断して、その後時間が来たら実行される。それまでは別の処理が行われるので非同期処理になったと言える。</p>
<p>Javascriptでのcallback 非同期</p>
<p><strong>簡単な例：関数を定義してコールバックに渡す。</strong></p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"setTimeoutの前："</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"これは関数のfの中："</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token number">10</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10秒後にfを実行。コールバック</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"setTimeoutの後"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"これもsetTimeoutの後"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*</span>
<span class="token comment">setTimeoutの前：Wed Apr 14 2021 09:35:39 GMT+0900 (日本標準時)</span>
<span class="token comment">VM65:7 setTimeoutの後</span>
<span class="token comment">VM65:8 これもsetTimeoutの後</span>
<span class="token comment">undefined</span>
<span class="token comment">//10秒後に表示される。</span>
<span class="token comment">VM65:3 これは関数のfの中：Wed Apr 14 2021 09:35:49 GMT+0900 (日本標準時)</span>
<span class="token comment">*/</span>
</code></pre></div>
<p><strong>無名関数で定義する</strong></p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"setTimeoutの前："</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span>
	<span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"setTimeoutに指定された無名関数の中："</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// ここまでsetTimeoutの第一引数（無名関数）</span>
	<span class="token number">10</span><span class="token operator">*</span><span class="token number">1000</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"setTimeoutの後"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"これもsetTimeoutの後"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//実行結果は出力される文字列は違うが同じ</span>
</code></pre></div>
<p><strong>アロー関数で</strong>定義する。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"setTimeoutの前："</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"アロー関数の中："</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"setTimeoutの後"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"これもsetTimeoutの後"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//実行結果は出力される文字列は違うが同じ</span>
</code></pre></div>
<p><strong>setIntervalとclearInterval</strong></p>
<p>分が切り替わるまでに繰り返しで実行するので最初に実行する時間次第で実行出来る回数が変わる。</p>
<p>例：18:00:00ならたくさん実行出来るが、18:00:50だとちょっとしか実行出来ない。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> start <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> intervalId <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword control-flow">if</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token method function property-access">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!==</span> start<span class="token punctuation">.</span><span class="token method function property-access">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">++</span>i<span class="token operator">></span><span class="token number">10</span><span class="token punctuation">)</span>
		<span class="token keyword control-flow">return</span> <span class="token function">clearInterval</span><span class="token punctuation">(</span>intervalId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//ここで10回以上・分が切り替わるとclearIntervalでプログラムが止まる。</span>
	<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>now<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<h2>PythonとJavaScript でのコールバック比較</h2>
<p>再起処理でまとめて、一回の処理みたいに扱う事で処理が同期的に行われるように工夫している。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">adding</span><span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span> num</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//最初は0</span>
	<span class="token function">callback</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//wait(num=>{n++; ....},num};ここでnumをインクリメント</span>
<span class="token punctuation">}</span>

<span class="token comment">//callback()と引数を忘れるとNan（Not a number）が表示される。</span>

<span class="token comment">//waitのコールバック関数の中でさらにwaitを呼んでそれを繰り返す。</span>
<span class="token function">adding</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
	num<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token function">adding</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
		num<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token function">adding</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
				num<span class="token operator">++</span><span class="token punctuation">;</span>

		<span class="token punctuation">}</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//実行結果</span>
<span class="token number">0</span>
<span class="token number">1</span>
<span class="token number">2</span>
</code></pre></div>
<p>Pythonでのcallback 同期</p>
<div class="remark-highlight"><pre class="language-python"><code class="language-python">num <span class="token operator">=</span> <span class="token number">0</span>

<span class="token keyword">def</span> <span class="token function">say</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">:</span>
	<span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
	<span class="token keyword">return</span> callback<span class="token punctuation">(</span>num<span class="token punctuation">)</span>

<span class="token comment">#無名関数を使用してないので関数が2つになる。</span>
<span class="token keyword">def</span> <span class="token function">adding</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>
	num <span class="token operator">+=</span> <span class="token number">1</span>
	<span class="token keyword">return</span> num

num <span class="token operator">=</span> say<span class="token punctuation">(</span>adding<span class="token punctuation">,</span> num<span class="token punctuation">)</span>
num <span class="token operator">=</span> say<span class="token punctuation">(</span>adding<span class="token punctuation">,</span> num<span class="token punctuation">)</span>
num <span class="token operator">=</span> say<span class="token punctuation">(</span>adding<span class="token punctuation">,</span> num<span class="token punctuation">)</span>

<span class="token comment">#実行結果</span>
<span class="token number">0</span>
<span class="token number">1</span>
<span class="token number">2</span>
</code></pre></div>
<p>Pythonの場合は <code>say</code> で呼ばれた <code>adding</code> の <code>return</code> が実行されるまで次の処理にはいかないが、JSの場合は待たずに次の処理に行ってしまう。上記のコード例ではあまり違いを提示出来てなくて申し訳ないが、言語として根本的に仕様が違う。JSは非同期でPythonは同期処理そのためJSコードをPythonに変換してコードを記述する際は時折処理を待機させる必要が出てくる。</p>
<p>そのためJSでfetch投げたりしても、レスポンス待たずに次の処理に移行する。</p>
<p>例 ※実際には動作しない。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token comment">//サーバ取得</span>
<span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">getDataFromServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//レスポンス待たずに次の処理へ</span>

<span class="token comment">//取得したデータ加工</span>
res<span class="token punctuation">.</span><span class="token method function property-access">doDomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//ここでエラーが発生する。</span>

<span class="token comment">//全く関係ない他の処理</span>
<span class="token function">doSomethingElse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>コールバック関数を用いた非同期を実行する。（setTimeoutを使用して）</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span> num</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token comment">//setTimeoutではアロー関数（無名関数）で引数がない別の関数を</span>
	<span class="token comment">//コールバックとして取る。その中でwaitがcallbackとして受け取った無名関数を処理する。</span>
	<span class="token comment">//0.1秒後に実行される。</span>
	<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
		<span class="token comment">//1秒後に出力される。</span>
		<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//先に出力される。</span>
<span class="token punctuation">}</span>

<span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
	<span class="token comment">//無名関数をwaitのcallbackにする。</span>
	<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">'callback function is called'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//0をnumの引数として取る。</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//実行結果</span>
<span class="token number">0</span>
<span class="token number">0</span>
callback <span class="token keyword">function</span> is called

</code></pre></div>
<p>コールバックチェーンにしてみる。これは地獄らしい。別名：コールバック地獄</p>
<p>こちらは <code>setTimeout</code> で非同期処理になっているが、実行の仕方が再帰処理のため同期的な処理になっている。そして、再帰処理で行わなければ処理は上手く行かなくなる。</p>
<p><strong>コールバック地獄1</strong></p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span> num</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
		<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//最初は0</span>
		<span class="token function">callback</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//wait(num=>{n++; ....},num};ここでnumをインクリメント</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//callback()と引数を忘れるとNan（Not a number）が表示される。</span>

<span class="token comment">//waitのコールバック関数の中でさらにwaitを呼んでそれを繰り返す。</span>
<span class="token function">wait</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
	num<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token function">wait</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
		num<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token function">wait</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
				num<span class="token operator">++</span><span class="token punctuation">;</span>

		<span class="token punctuation">}</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//最初は一番外側に書かれた処理が行われるので最初の値は0になる。</span>
</code></pre></div>
<p>一行にしてみた。外側から内側に処理が向かっていく感じ</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token function">wait</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token arrow operator">=></span><span class="token punctuation">{</span>num<span class="token operator">++</span><span class="token punctuation">;</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token arrow operator">=></span><span class="token punctuation">{</span>num<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token arrow operator">=></span><span class="token punctuation">{</span>num<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//num 1</span>
<span class="token function">wait</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token arrow operator">=></span><span class="token punctuation">{</span>num<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token arrow operator">=></span><span class="token punctuation">{</span>num<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//num 2</span>
<span class="token function">wait</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token arrow operator">=></span><span class="token punctuation">{</span>num<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//num 3</span>

</code></pre></div>
<p>コールバック地獄2</p>
<ol>
<li>3個のファイルを読み込み</li>
<li>そのファイル内容を合体させて4つ目のファイルに書き出す</li>
</ol>
<p>fsの使い方</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx">fs<span class="token punctuation">.</span><span class="token method function property-access">readFile</span><span class="token punctuation">(</span>ファイルパス<span class="token punctuation">,</span> 文字コード<span class="token punctuation">,</span> コールバック関数<span class="token punctuation">)</span>
fs<span class="token punctuation">.</span><span class="token method function property-access">writeFile</span><span class="token punctuation">(</span>ファイルパス<span class="token punctuation">,</span> ファイルの中身<span class="token punctuation">,</span> コールバック関数<span class="token punctuation">)</span>
</code></pre></div>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token comment">/*Nodeで実行*/</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
fs<span class="token punctuation">.</span><span class="token method function property-access">readFile</span><span class="token punctuation">(</span><span class="token string">'a.txt'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> dataA</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword control-flow">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
	fs<span class="token punctuation">.</span><span class="token method function property-access">readFile</span><span class="token punctuation">(</span><span class="token string">'b.txt'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> dataB</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword control-flow">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
		fs<span class="token punctuation">.</span><span class="token method function property-access">readFile</span><span class="token punctuation">(</span><span class="token string">'c.txt'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> dataC</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword control-flow">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token operator">:</span>
			fs<span class="token punctuation">.</span><span class="token method function property-access">writeFile</span><span class="token punctuation">(</span><span class="token string">'d.txt'</span><span class="token punctuation">,</span> dataA<span class="token operator">+</span>dataB<span class="token operator">+</span>dataC<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword control-flow">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
</code></pre></div>
<p>上記のコードを例外スローしようとすると大変です。</p>
<p>実行結果はエラーを起こし、例外処理をしているように見えるが例外処理は行われずにエラーになっている。</p>
<p>これは <code>try...catch</code> はブロックが同じ関数でしか機能しないというのが原因です。</p>
<p>エラーが出力されるのは <code>fs.readFile</code> のコールバック関数内で <code>try...catch</code> ブロックとは別の所にある。これを解決するために後述されるプロミスが登場する。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token comment">/*Node 実行*/</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span>'fs<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">readSketchyFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//関数名：怪しいファイルを読み込む意味</span>
	<span class="token keyword control-flow">try</span> <span class="token punctuation">{</span>
		fs<span class="token punctuation">.</span><span class="token method function property-access">readFile</span><span class="token punctuation">(</span><span class="token string">'does_not_exist.txt'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword control-flow">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword control-flow">throw</span> err<span class="token punctuation">;</span>
			<span class="token keyword control-flow">else</span> <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">'無事に読み込めました'</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword control-flow">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">'警告：マイナーな問題発生。実行を継続します。'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">readSketchyFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div>
<h2>スコープと非同期の実行</h2>
<p>下記のコードは一見カウントダウン5, 4, 3, 2, 1, Go と出力されそうですが、実際には-1が6回出力される。forループは最後まで実行され、iの値は-1になる。そして、コールバックが実行されるのはその後になる。コールバックは実行時に <code>i</code> は既に <code>-1</code> になっている。</p>
<p>ここでスコープと非同期の実行がどのように関連しているか理解する。</p>
<ol>
<li>countdownを起動する時、変数 <code>i</code> を含むクロージャを生成する。</li>
<li>forループ内で生成する無名関数のコールバックの全ては同じ <code>i</code> にアクセスする。</li>
</ol>
<p>問題はforループの中で <code>i</code> が2つの方法で使われている。タイムアウトの時間を計算するのにのに <code>i</code> を使う際は想定通りに動作します。 <code>((5-i)*1000)</code> は最初は0、2度目に1秒（1000）3度目に2秒（2000）と行った感じになる。この計算は同期的に行われる。setTimeoutの呼び出しも同期的に行われる。非同期に行われるのはsetTimeoutに渡された無名関数でそこで問題が起きている。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">countdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> i<span class="token punctuation">;</span> <span class="token comment">//iをループの外で定義している。</span>
	<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"カウントダウン："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword control-flow">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>i<span class="token operator">===</span><span class="token number">0</span> <span class="token operator">?</span> <span class="token string">"GO!"</span> <span class="token operator">:</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">countdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>上記の問題が起きる理由はブロックスコープの外側にある変数 <code>i</code> にアクセスする事で起こる。setTimeoutの処理が先に終わり、その後時間が経って処理が行われる際にアクセスする変数が <code>i</code> になっていてその時には 中身が <code>-1</code> になっているので予期しない動作に繋がる。 解決するにはforループの外側にある <code>let i;</code> の定義をforループ内に定義する。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">countdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"カウントダウン："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword control-flow">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>i<span class="token operator">===</span><span class="token number">0</span> <span class="token operator">?</span> <span class="token string">"GO!"</span> <span class="token operator">:</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">countdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p><strong>IIFE</strong>で解決する場合</p>
<p>参考にした。</p>
<p><a href="https://stackoverflow.com/questions/40490950/explaining-iife-inside-loop">Explaining IIFE Inside Loop</a></p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">countdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"カウントダウン："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
  <span class="token keyword control-flow">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>i<span class="token operator">===</span><span class="token number">0</span> <span class="token operator">?</span> <span class="token string">"GO!"</span> <span class="token operator">:</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">countdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div>
<h2>プロミスとは</h2>
<p>プロミスはコールバックを不要にしてくれるものではない。プロミスによってコールバックが定型的なパターンで処理され、コールバックだけだと見つかりにくいバグや分かりにくい記述をなくしてくれる。</p>
<p>プロミスのアイデアは非同期な処理をする関数を呼び出すとオブジェクトPromiseのインスタンスが返される。このとき返されるプロミスは非同期な処理をラップしている。そのプロミスは完了(fulfilled 成功)されるか破棄(rejected 失敗)されるのいずれかが起きる事が保証される。完了も破棄もされていない状態を保留（pending)という。</p>
<p>プロミスは非同期処理の内容を記述した関数を引数に指定してPromiseのインスタンスを生成する。</p>
<h2>プロミスの生成</h2>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>非同期処理を記述した関数<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//その引数にとった関数の引数は2つ必要とする。</span>

<span class="token comment">//実際のコードにすると</span>
<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>
	<span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">onFulfilled<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token spread operator">...</span><span class="token comment">/*非同期処理を記述*/</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">)</span>

<span class="token comment">//onFulifilledは処理が正常に終了して結果が得られた場合に実行させる。</span>
<span class="token comment">//onRejectedは処理の結果エラーが起きた場合に実行させるものプロミスが失敗した。</span>
</code></pre></div>
<p><strong>カウントダウンのプログラムをプロミスで書き換える</strong></p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">countdown</span><span class="token punctuation">(</span><span class="token parameter">seconds</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>
		<span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">onFulfilled<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword control-flow">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span>seconds<span class="token punctuation">;</span> i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					<span class="token keyword control-flow">if</span><span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">'...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token keyword control-flow">else</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"GO!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>seconds<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">countdown</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
</code></pre></div>
<p>上記のままではプロミスのメリットがないので、カウントダウンが成功した際の処理を追加していく。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">countdown</span><span class="token punctuation">(</span><span class="token parameter">seconds</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>
		<span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">onFulfilled<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword control-flow">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span>seconds<span class="token punctuation">;</span> i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					<span class="token keyword control-flow">if</span><span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">'...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token keyword control-flow">else</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"GO!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>seconds<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">countdown</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span>
	<span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*成功（fulfilled)時に行う処理を記述する。*/</span>
		<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"カウントダウン成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/*失敗（rejected)時に行う処理を記述する。*/</span>
		<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"カウントダウンでエラーが起こった："</span> <span class="token operator">+</span> err<span class="token punctuation">.</span><span class="token property-access">message</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//実行結果</span>
<span class="token comment">//5...</span>
<span class="token comment">//4...</span>
<span class="token comment">//3...</span>
<span class="token comment">//2...</span>
<span class="token comment">//1...</span>
<span class="token comment">//GO!</span>
<span class="token comment">//カウントダウン成功</span>
</code></pre></div>
<p>上記の例では戻されたプロミスを変数には代入せずにメソッドthenを直接呼び出している。（このメソッドのことを「thenハンドラ」と呼ぶ事がある。）</p>
<p>上で書いたようなプロミスはfulfilledあるいはrejectedのいずれかで、関数が両方呼び出されることはなく、呼び出されるとしてもいずれか一方だけになる。</p>
<p>プロミスにはメソッドcatchがありこれを使うとハンドラの処理を成功と失敗の場合の2つに分ける事ができる。下記の例ではプロミスを変数に一旦保存する。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">countdown</span><span class="token punctuation">(</span><span class="token parameter">seconds</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>
		<span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">onFulfilled<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword control-flow">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span>seconds<span class="token punctuation">;</span> i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					<span class="token keyword control-flow">if</span><span class="token punctuation">(</span>i<span class="token operator">===</span><span class="token number">13</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"この数は不吉過ぎます"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token keyword control-flow">if</span><span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">'...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token keyword control-flow">else</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"GO!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>seconds<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token function">countdown</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
p<span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"カウントダウン成功"</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
p<span class="token punctuation">.</span><span class="token keyword control-flow">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"カウントダウンでエラーが起こった："</span> <span class="token operator">+</span> err<span class="token punctuation">.</span><span class="token property-access">message</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//実行結果</span>
<span class="token number">15.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token number">14.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token property-access">カウントダウンでエラーが起こった：この数は不吉過ぎます</span>
<span class="token function"><span class="token maybe-class-name">Uncaught</span></span> <span class="token punctuation">(</span><span class="token keyword">in</span> promise<span class="token punctuation">)</span> <span class="token known-class-name class-name">Error</span><span class="token operator">:</span> この数は不吉過ぎます
    at <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>anonymous</span><span class="token punctuation">></span></span><span class="token plain-text">:6:35</span>
<span class="token plain-text">(anonymous) @ VM52:6</span>
<span class="token plain-text">Promise.then (async)</span>
<span class="token plain-text">(anonymous) @ VM52:16</span>
<span class="token plain-text">12...</span>
<span class="token plain-text">11...</span>
<span class="token plain-text">10...</span>
<span class="token plain-text">9...</span>
<span class="token plain-text">8...</span>
<span class="token plain-text">7...</span>
<span class="token plain-text">6...</span>
<span class="token plain-text">5...</span>
<span class="token plain-text">4...</span>
<span class="token plain-text">3...</span>
<span class="token plain-text">2...</span>
<span class="token plain-text">1...</span>
<span class="token plain-text">GO!</span>
</code></pre></div>
<p>13になった時に失敗しますが、関数自体は止まりません。 <code>onRejected, onFulfilled</code> を呼んだだけでは関数は止まらない。プロミスは状態を管理するだけで、内部の処理については感知しない。既にsetTimeoutで処理の実行が予約されているのでカウントダウンは続く。</p>
<p>なので関数が成功あるいは失敗したら停止するようにプログラムを変更する。</p>
<p>処理を止める必要になった時に保留中のsetTimeoutを全てクリアする。例えばsetTimeoutから返されるIDを全て覚えておいて、clearTimeoutを呼び出す。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">countdown</span><span class="token punctuation">(</span><span class="token parameter">seconds</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">onFulfilled<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> timeoutIds <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword control-flow">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span>seconds<span class="token punctuation">;</span> i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			timeoutIds<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>
				<span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					<span class="token keyword control-flow">if</span><span class="token punctuation">(</span>i<span class="token operator">===</span><span class="token number">13</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
						timeoutIds<span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span>clearTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
						<span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">という数は不吉過ぎます</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token punctuation">}</span>
					<span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
						<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">'...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token punctuation">}</span>
					<span class="token keyword control-flow">else</span><span class="token punctuation">{</span>
						<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"GO!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
						<span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token punctuation">}</span>
				<span class="token punctuation">}</span><span class="token punctuation">,</span> 
				<span class="token punctuation">(</span>seconds<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token function">countdown</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
p<span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"カウントダウン成功"</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
p<span class="token punctuation">.</span><span class="token keyword control-flow">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"カウントダウンでエラーが起こった："</span> <span class="token operator">+</span> err<span class="token punctuation">.</span><span class="token property-access">message</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//実行結果</span>
<span class="token number">15.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token number">14.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token property-access">カウントダウンでエラーが起こった：</span><span class="token number">13</span>という数は不吉過ぎます
</code></pre></div>
<h2>上記の内容の復習でPromiseを使って処理を待機させる。</h2>
<p>上記のコールバック地獄1のコードをpromiseを使って書き換えていく。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token comment">//引数なしの無名関数をアロー関数で書いてる。</span>
	<span class="token comment">//と思わせてPromiseではresolve, rejectを引数として取る。</span>
	<span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
		<span class="token comment">//このアロー関数の中で非同期処理を書いていく。</span>
		<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
			<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//最初は0</span>
			<span class="token comment">//ここが呼ばれた時点で次の処理に移る。callbackと同じ機能エラーを出す時はrejectで呼び出す？？</span>
			<span class="token function">resolve</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//wait(num=>{n++; ....},num};ここでnumをインクリメント</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//waitの処理が終わった後の処理はthenで行う。</span>
<span class="token comment">//resolveで渡した引数がthenメソッドのコールバック関数の引数となる。</span>
<span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
	num<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token comment">//thenメソッドの中の関数の戻り値にPromiseを渡す事でこの処理も非同期で行われる。</span>
	<span class="token keyword control-flow">return</span> <span class="token function">wait</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre></div>
<p>同期処理のように処理が終了してから別の処理を行なわせたい（チェーンする）場合は <code>then</code> を使用する。これはコールバック地獄をより分かりやすい形にする事ができる。処理自体は非同期を同期にする。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token comment">//引数なしの無名関数をアロー関数で書いてる。</span>
	<span class="token comment">//と思わせてPromiseではresolve, rejectを引数として取る。</span>
	<span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
		<span class="token comment">//このアロー関数の中で非同期処理を書いていく。</span>
		<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
			<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//最初は0</span>
			<span class="token comment">//ここが呼ばれた時点で次の処理に移る。callbackと同じ機能エラーを出す時はrejectで呼び出す？？</span>
			<span class="token function">resolve</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//wait(num=>{n++; ....},num};ここでnumをインクリメント</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//waitの処理が終わった後の処理はthenで行う。</span>
<span class="token comment">//resolveで渡した引数がthenメソッドのコールバック関数の引数となる。</span>
<span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
	num<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token comment">//thenメソッドの中の関数の戻り値にPromiseを渡す事でこの処理も非同期で行われる。</span>
	<span class="token comment">//戻り値は次のthenメソッドの引数として渡される。</span>
	<span class="token comment">// returnで返さずにwait(num)と記述するとチェーンが切れ非同期になる。</span>
	<span class="token keyword control-flow">return</span> <span class="token function">wait</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
		num<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token keyword control-flow">return</span> <span class="token function">wait</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
		num<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token keyword control-flow">return</span> <span class="token function">wait</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
		num<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token keyword control-flow">return</span> <span class="token function">wait</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
		num<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token keyword control-flow">return</span> <span class="token function">wait</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">//実行結果</span>
<span class="token number">0</span>
<span class="token number">1</span>
<span class="token number">2</span>
<span class="token number">3</span>
<span class="token number">4</span>

</code></pre></div>
<p>今度はrejectを使用してエラーをハンドリングしていく。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token comment">//引数なしの無名関数をアロー関数で書いてる。</span>
	<span class="token comment">//と思わせてPromiseではresolve, rejectを引数として取る。</span>
	<span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
		<span class="token comment">//このアロー関数の中で非同期処理を書いていく。</span>
		<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
			<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//最初は0</span>
			<span class="token keyword control-flow">if</span><span class="token punctuation">(</span>num <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
				<span class="token function">reject</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span><span class="token keyword control-flow">else</span><span class="token punctuation">{</span>
				<span class="token comment">//ここが呼ばれた時点で次の処理に移る。callbackと同じ機能エラーを出す時はrejectで呼び出す？？</span>
				<span class="token function">resolve</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//wait(num=>{n++; ....},num};ここでnumをインクリメント</span>
			<span class="token punctuation">}</span>
			
		<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//waitの処理が終わった後の処理はthenで行う。</span>
<span class="token comment">//resolveで渡した引数がthenメソッドのコールバック関数の引数となる。</span>
<span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
	num<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token comment">//thenメソッドの中の関数の戻り値にPromiseを渡す事でこの処理も非同期で行われる。</span>
	<span class="token comment">//戻り値は次のthenメソッドの引数として渡される。</span>
	<span class="token comment">// returnで返さずにwait(num)と記述するとチェーンが切れ非同期になる。</span>
	<span class="token keyword control-flow">return</span> <span class="token function">wait</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
		num<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token keyword control-flow">return</span> <span class="token function">wait</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
		num<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token keyword control-flow">return</span> <span class="token function">wait</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
		num<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token keyword control-flow">return</span> <span class="token function">wait</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
		num<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token keyword control-flow">return</span> <span class="token function">wait</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword control-flow">catch</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
		num<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">error</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//実行結果</span>
<span class="token number">0</span>
<span class="token number">1</span>
<span class="token number">2</span>
<span class="token number">3</span> error
</code></pre></div>
<h2>プロミスのチェイン</h2>
<p>上記の <code>then</code> を使用し複数の非同期処理を順番に実行して、前の処理が完了してからその結果を次の処理で使う。この一連の動作をプロミスのチェインと呼ぶ。これは非同期を同期に処理する事を意味する。これを行うのに昔は上記でも出てきたコールバック地獄を使って実装していた。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">doSomethingElse</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">newResult</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">doThirdThing</span><span class="token punctuation">(</span>newResult<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">finalResult</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">'Got the final result: '</span> <span class="token operator">+</span> finalResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span> failureCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span> failureCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> failureCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>プロミスチェインを使えば</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword control-flow">return</span> <span class="token function">doSomethingElse</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">newResult</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword control-flow">return</span> <span class="token function">doThirdThing</span><span class="token punctuation">(</span>newResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">finalResult</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">'Got the final result: '</span> <span class="token operator">+</span> finalResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token keyword control-flow">catch</span><span class="token punctuation">(</span>failureCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//アロー関数を使うと</span>
<span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token arrow operator">=></span> <span class="token keyword control-flow">return</span> <span class="token function">doSomething</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token parameter">newResult</span> <span class="token arrow operator">=></span> <span class="token keyword control-flow">return</span> <span class="token function">doThirdThing</span><span class="token punctuation">(</span>newResult<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token parameter">finalResult</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">'Got the final result: '</span> <span class="token operator">+</span> finalResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token keyword control-flow">catch</span><span class="token punctuation">(</span>failureCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>※コールバック関数で処理を返すことを忘れないで下さい。コールバック関数からその処理結果を利用する事ができなくなる。アロー関数の場合は <code>() => x</code> は <code>() => {return x;}</code> の省略形で返している。</p>
<h2>catch後のチェーン</h2>
<p>失敗、つまり catchの後にチェーンすることも可能。チェーン内の動作が失敗した場合新たに処理を始めるのに使用できる。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
	<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">'Initial'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
	<span class="token keyword control-flow">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Something failed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">'Do this'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token keyword control-flow">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
	<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">'Do that'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
	<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">'Do this whatever happened before'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>チェインを使用してカウントダウン後にロケットを打ち上げるようにする。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">countdown</span><span class="token punctuation">(</span><span class="token parameter">seconds</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">onFulfilled<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> timeoutIds <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword control-flow">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span>seconds<span class="token punctuation">;</span> i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			timeoutIds<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>
				<span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					<span class="token keyword control-flow">if</span><span class="token punctuation">(</span>i<span class="token operator">===</span><span class="token number">13</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
						timeoutIds<span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span>clearTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
						<span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">という数は不吉過ぎます</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token punctuation">}</span>
					<span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
						<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">'...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token punctuation">}</span>
					<span class="token keyword control-flow">else</span><span class="token punctuation">{</span>
						<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"GO!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
						<span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token punctuation">}</span>
				<span class="token punctuation">}</span><span class="token punctuation">,</span> 
				<span class="token punctuation">(</span>seconds<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">onFulfilled<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"発射!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token string">"周回軌道に乗った!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/*超高速ロケット*/</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">countdown</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span>launch<span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/*関数launch内のonFulfilledの引数がmsgに渡る*/</span>
		<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//カウントダウンが13以上だとonRejectedが実行され下記のcatchに処理が移る。</span>
	<span class="token punctuation">.</span><span class="token keyword control-flow">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">error</span><span class="token punctuation">(</span><span class="token string">"管制塔、管制塔。トラブル発生..."</span> <span class="token operator">+</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">//実行結果</span>
<span class="token number">11.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token number">10.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token number">9.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token number">8.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token number">7.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token number">6.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token number">5.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token number">4.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token number">3.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token number">2.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token number">1.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token constant">GO</span><span class="token operator">!</span>
発射<span class="token operator">!</span>
周回軌道に乗った<span class="token operator">!</span>

</code></pre></div>
<p>もう一つチェイニングの例を見る。3つのファイル（a.txt, b.txt, c.txt)を非同期に読み込んで、準備ができたところでd.txtに3つのファイル内容を書き込むプログラム。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token string">'use strict'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token parameter">fileName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>
		<span class="token punctuation">(</span><span class="token parameter">onFulfilled<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
			<span class="token comment">//console.log(data);</span>
			<span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">//console.error("readFile error:" + fileName + err);</span>
				<span class="token function">onRejected</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			<span class="token function">onFulfilled</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token parameter">fileName<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>
		<span class="token punctuation">(</span><span class="token parameter">onFulfilled<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
			fs<span class="token punctuation">.</span><span class="token method function property-access">writeFile</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
				<span class="token keyword control-flow">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
					<span class="token comment">//console.error("writeFile error:" + fileName + err);</span>
					<span class="token function">onRejected</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
				<span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token string">"OK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//ファイルを同期的に読んで行って最後に合体させる。</span>

<span class="token keyword">let</span> allData <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
<span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">fileData</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//a.txtを読み込んだら、allDataに格納して、次にb.txtを読み込む。</span>
	allData <span class="token operator">+=</span> fileData<span class="token punctuation">;</span>
	<span class="token keyword control-flow">return</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">"b.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">fileData</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	allData <span class="token operator">+=</span> fileData<span class="token punctuation">;</span>
	<span class="token keyword control-flow">return</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">"c.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">fileData</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//全てのファイルを読み込んだらallDataをd.txtに書き込む。</span>
	allData <span class="token operator">+=</span> fileData<span class="token punctuation">;</span>
	<span class="token keyword control-flow">return</span> <span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">"d.txt"</span><span class="token punctuation">,</span> allData<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">mes</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"ファイルの合体に成功しました。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token keyword control-flow">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
	<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">error</span><span class="token punctuation">(</span><span class="token string">"エラーが起こりました:"</span> <span class="token operator">+</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<h2>Promise.allの使い方</h2>
<p>非同期で処理をたくさん走らせて全ての並列処理が終わったタイミングで何かする場合は <code>Promise.all</code> を使用する。前のプログラムでファイルを同期的に読み込んでいたので、同時に読み込んだ方が効率的になる。それを実現するのに <code>Promise.all</code> を使用する。</p>
<p>Promiseにはallという名前のメソッドがあり、配列内の全プロミスがresolveすると全体がresolveすることになっている。実際に先ほどのファイルを読み込んだプログラムを並列に読み込み、全て揃った所でファイルに書き込むように設定する。ファイルの読み込まれる順番は <code>b.txt</code> が最初になるかも知れないし、 <code>c.txt</code> かも知れないですが、その結果は配列に順番通りに返ってくる。</p>
<p><code>results[0]</code> は <code>a.txt</code> が入る。そしてその中の一つでも失敗している場合は、すぐに値の全体で失敗したことになる。</p>
<p><code>Promise.race</code> を使用すれば複数の処理に競争させ、もっとも早く成功、あるいは失敗したものが返される。早く処理できたものを採用する事が出来る。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token comment">//プロミスに配列で関数を渡す。</span>
<span class="token known-class-name class-name">Promise</span><span class="token punctuation">.</span><span class="token method function property-access">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">"b.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">"c.txt"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">results</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//その結果も配列で戻ってくる。</span>
	<span class="token keyword">const</span> allData <span class="token operator">=</span> results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> results<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> results<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword control-flow">return</span> <span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">"d.txt"</span><span class="token punctuation">,</span> allData<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">mes</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"ファイルの合体に成功しました。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token keyword control-flow">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
	<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">error</span><span class="token punctuation">(</span><span class="token string">"エラーが起こりました："</span> <span class="token operator">+</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre></div>
<p>次の例ではファイルの読み込み時間をランダムに送らせて、3つのファイルのうち一つを <code>d.txt</code> に書き込むようにする。0以上1未満の少数をランダムに返す。下記の例ではたとえc.txtが読み込めなくても、全体の処理はエラーにならない。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token parameter">fileName<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">onFulfilled<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
		fs<span class="token punctuation">.</span><span class="token method function property-access">writeFile</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
			err <span class="token operator">?</span> <span class="token function">onRejected</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token string">'OK'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token parameter">fileName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">onFulfilled<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> period <span class="token operator">=</span> <span class="token known-class-name class-name">Math</span><span class="token punctuation">.</span><span class="token method function property-access">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">;</span>
		<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fileName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>period<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
			fs<span class="token punctuation">.</span><span class="token method function property-access">readFile</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
				err <span class="token operator">?</span> <span class="token function">onRejected</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token punctuation">[</span>fileName<span class="token punctuation">,</span> data<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span> period<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> selected<span class="token punctuation">;</span>
<span class="token known-class-name class-name">Promise</span><span class="token punctuation">.</span><span class="token method function property-access">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">"b.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">"c.txt"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">results</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	selected <span class="token operator">=</span> results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword control-flow">return</span> <span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">"d.txt"</span><span class="token punctuation">,</span> results<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">mes</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">ファイル</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>selected<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">の内容が書き込まれました。\n----</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token keyword control-flow">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
	<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">error</span><span class="token punctuation">(</span><span class="token string">"エラーが起こりました："</span> <span class="token operator">+</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p><code>Promise.all</code> ブラウザで実行出来る形式のサンプル。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token comment">//この関数を非同期で並列に走らせる。</span>
<span class="token keyword">function</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token comment">//引数なしの無名関数をアロー関数で書いてる。</span>
	<span class="token comment">//と思わせてPromiseではresolve, rejectを引数として取る。</span>
	<span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
		<span class="token comment">//このアロー関数の中で非同期処理を書いていく。</span>
		<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
			<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//最初は0</span>
			<span class="token keyword control-flow">if</span><span class="token punctuation">(</span>num <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
				<span class="token function">reject</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span><span class="token keyword control-flow">else</span><span class="token punctuation">{</span>
				<span class="token comment">//ここが呼ばれた時点で次の処理に移る。callbackと同じ機能エラーを出す時はrejectで呼び出す？？</span>
				<span class="token function">resolve</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//wait(num=>{n++; ....},num};ここでnumをインクリメント</span>
			<span class="token punctuation">}</span>
			
		<span class="token punctuation">}</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token known-class-name class-name">Promise</span><span class="token punctuation">.</span><span class="token method function property-access">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">1500</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token parameter">nums</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
	<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">//実行結果</span>
<span class="token number">1000</span>
<span class="token number">1500</span>
<span class="token number">2000</span>
<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">1500</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">]</span>
<span class="token comment">//全ての処理が実行されたのちに配列が返ってくる。</span>
</code></pre></div>
<p><code>Promise.race</code> を使ってみる。</p>
<p><code>race</code> を使って 一つの処理が終わったタイミングで <code>then</code> を呼ぶ事ができる。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token known-class-name class-name">Promise</span><span class="token punctuation">.</span><span class="token method function property-access">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">1500</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token parameter">nums</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
	<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>nums <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//実行結果</span>
<span class="token number">1000</span>
<span class="token number">1001</span> <span class="token comment">//ここでthenが呼び出された。numsは一つしか値がないので配列になっていない。</span>
<span class="token number">1500</span>
<span class="token number">2000</span>
</code></pre></div>
<h2>未確定の（unsettled）プロミスを防止する。</h2>
<p>プロミスは非同期のコードを単純にしてくれ複数回コールバックが呼ばれてしまう問題を回避してくれるが、その処理は <code>onFulfilled, onRejected</code> も呼ばれない処理の場合、未確定のままエラーも出力しない問題がある。そして全体が複雑になると未確定の問題は出力されないのでわからなくなる。</p>
<p>これを防ぐ方法の一つがプロミスに足してタイムアウトを指定する事。然るべき時間内にプロミスが確定しない場合は、自動的にrejectする。その時間は任意で決める必要がある。長い処理ならそれ以上にタイムアウトは長くする必要がある。</p>
<p>先ほどのロケットのプログラムの <code>launch()</code> 、書き換えて2回に一回は打ち上げに失敗するようにする。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">onFulfilled<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword control-flow">if</span><span class="token punctuation">(</span><span class="token known-class-name class-name">Math</span><span class="token punctuation">.</span><span class="token method function property-access">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&#x3C;</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span><span class="token punctuation">;</span> <span class="token comment">//ここを追加した。</span>
		<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"発射!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token string">"周回軌道に乗った!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/*超高速ロケット*/</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//失敗した場合の実行結果</span>
<span class="token number">3.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token number">2.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token number">1.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token constant">GO</span><span class="token operator">!</span>
</code></pre></div>
<p>失敗時、 <code>onRejected</code> も呼ばないしメッセージも出力せず単に終了するだけになる。</p>
<p>プロミスにタイムアウトをアタッチする関数addTimeoutを加える。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">addTimeout</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span>
										period</span>
										<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword control-flow">if</span><span class="token punctuation">(</span>period <span class="token operator">===</span> <span class="token keyword nil">undefined</span><span class="token punctuation">)</span> period <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
	<span class="token keyword control-flow">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token spread operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">onFulfilled<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">//setTimeoutの第3引数は渡した関数の引数になる。</span>
			<span class="token keyword">const</span> timeoutId <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>onRejected<span class="token punctuation">,</span> period<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"プロミス タイムアウト"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token function">fn</span><span class="token punctuation">(</span><span class="token spread operator">...</span>args<span class="token punctuation">)</span>
				<span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token spread operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					<span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeoutId<span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token spread operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span><span class="token punctuation">)</span>
				<span class="token punctuation">.</span><span class="token keyword control-flow">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token spread operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//lunch関数はonRejectedを呼び出していないのでここが実行される事はない。</span>
					<span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeoutId<span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token spread operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">countdown</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token function">addTimeout</span><span class="token punctuation">(</span>launch<span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/*関数launch内のonFulfilledの引数がmsgに渡る*/</span>
		<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//カウントダウンが13以上だとonRejectedが実行され下記のcatchに処理が移る。</span>
	<span class="token punctuation">.</span><span class="token keyword control-flow">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">error</span><span class="token punctuation">(</span><span class="token string">"管制塔、管制塔。トラブル発生..."</span> <span class="token operator">+</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">//実行結果（Math.ramdomが5以下の場合）</span>
<span class="token number">3.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token number">2.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token number">1.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token constant">GO</span><span class="token operator">!</span>
管制塔、管制塔。トラブル発生<span class="token spread operator">...</span><span class="token known-class-name class-name">Error</span><span class="token operator">:</span> プロミス タイムアウト
</code></pre></div>
<p>上記のコードは50%で <code>周回軌道に乗った</code> の文字列が出力される。残り50%で <code>管制塔、管制塔。トラブル発生...プロミス タイムアウト</code> が出力される。引数の <code>...args</code> は受け取る関数にいかなる引数があっても受け取れるように残余引数というのを指定している。 <code>...</code> を任意の変数名に付ける事で何個の引数でも受け取れるようになる。空の場合は <code>[]</code> が入る。</p>
<h2>ジェネレータ</h2>
<p>ジェネレータを使用すると関数とその呼び出し側と双方向のやり取りが可能になります。ジェネレータは本来同期的に動作しますがプロミスと同時に使うとJavaScriptの非同期コードを管理するのに強力なテクニックを使えるようになる。</p>
<p>非同期コードの難しい所をもう一度振り返ると人間は同期的な処理の方が得意である。しかしこれではパフォーマンス上に問題が出るのでこのようなことに対処するのにジェネレータは役に立つ。</p>
<p>「コールバック地獄」の例では3つのファイルを読み込み、しばらく待ってから4番目のファイルに書く。</p>
<p>人間に取っては次の「擬似コードのように順番にやる方が分かりやすい。</p>
<p>ジェネレータを使用すると下記のような擬似コードみたいにコードを実行出来る。</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">dataA = ファイル&#x26;#39;a.txt&#x26;#39;を読み込み
dataB = ファイル&#x26;#39;b.txt&#x26;#39;を読み込み
dataC = ファイル&#x26;#39;c.txt&#x26;#39;を読み込み
読み込みが完了してからdataA + dataB + dataCを&#x26;#39;d.txt&#x26;#39;に書き出し</code></pre></div>
<p>ジェネレータで上記の文を実装していく。それに必要となるのが「ジェネレーターランナー」になる。ジェネレータはもともと非同期ではないが、非同期の呼び出しを扱う方法を知っている関数（ジェネレーターランナー）を作る事が出来る。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">grun</span><span class="token punctuation">(</span><span class="token parameter">g</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> it <span class="token operator">=</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">iterate</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> x <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token method function property-access">next</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2回目の呼び出し以降で引数がyieldに入る。</span>
		<span class="token keyword control-flow">if</span><span class="token punctuation">(</span><span class="token operator">!</span>x<span class="token punctuation">.</span><span class="token property-access">done</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//イテレータが残っている時はtrue</span>
			<span class="token keyword control-flow">if</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token property-access">value</span> <span class="token keyword">instanceof</span> <span class="token class-name">Promise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//x.valueに最初はPromise関数にしたreadFileを呼び出した。保留のプロミスオブジェクトがで入る。</span>
				<span class="token comment">//thenでx.valueが読み込んだファイルになるまで待機する。ファイルを見込んだらiterateを再び呼んで再帰的に処理をする。</span>
				<span class="token comment">//その際に変数に読み込んだファイルを格納する。</span>
				x<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span>iterate<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword control-flow">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token arrow operator">=></span> it<span class="token punctuation">.</span><span class="token keyword control-flow">throw</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>
				<span class="token function">setTimeout</span><span class="token punctuation">(</span>iterate<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token parameter">fileName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>
		<span class="token punctuation">(</span><span class="token parameter">onFulfilled<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
			fs<span class="token punctuation">.</span><span class="token method function property-access">readFile</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">,</span>
				<span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> err <span class="token operator">?</span> <span class="token function">onRejected</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token parameter">fileName<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>
		<span class="token punctuation">(</span><span class="token parameter">onFulfilled<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
			fs<span class="token punctuation">.</span><span class="token method function property-access">writeFile</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token arrow operator">=></span> err <span class="token operator">?</span> <span class="token function">onRejected</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token string">"OK"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">fileReadAndWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> dataA <span class="token operator">=</span> <span class="token keyword control-flow">yield</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'a.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> dataB <span class="token operator">=</span> <span class="token keyword control-flow">yield</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'b.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> dataC <span class="token operator">=</span> <span class="token keyword control-flow">yield</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'c.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword control-flow">yield</span> <span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">'d.txt'</span><span class="token punctuation">,</span> dataA<span class="token operator">+</span>dataB<span class="token operator">+</span>dataC<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">grun</span><span class="token punctuation">(</span>fileReadAndWrite<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>今度は上記の処理を並列で処理していこうと思う。今は非同期処理をジェネレータで制御して同期的にファイルを読み込むようした。それを今度は <code>Promisse.all</code> を使ってファイルを読み込む段階までは非同期（並列）で処理して全てのファイルが読み込まれたら、それを足して出力する処理を書いていく。こうする事でファイル読み込みは同時に読み込まれ効率が上がる。</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">dataA = ファイル&#x26;#39;a.txt&#x26;#39;を読み込み
dataB = ファイル&#x26;#39;b.txt&#x26;#39;を読み込み
dataC = ファイル&#x26;#39;c.txt&#x26;#39;を読み込み
読み込みが完了してからdataA + dataB + dataCを&#x26;#39;d.txt&#x26;#39;に書き出し</code></pre></div>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">fileReadAndWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword control-flow">yield</span> <span class="token known-class-name class-name">Promise</span><span class="token punctuation">.</span><span class="token method function property-access">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'a.txt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
																	<span class="token method function property-access">readFile</span><span class="token punctuation">(</span><span class="token string">'b.txt'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'c.txt'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword control-flow">yield</span> <span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">'d.txt, data[0]+data[1]+data[2]'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">grun</span><span class="token punctuation">(</span>fileReadAndWrite<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<h3>ジェネレータランナーの例外処理</h3>
<p>上記のコードに例外処理を追加する。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">fileReadAndWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword control-flow">try</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword control-flow">yield</span> <span class="token known-class-name class-name">Promise</span><span class="token punctuation">.</span><span class="token method function property-access">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'a.txt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
																		<span class="token method function property-access">readFile</span><span class="token punctuation">(</span><span class="token string">'b.txt'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'c.txt'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword control-flow">yield</span> <span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">'d.txt, data[0]+data[1]+data[2]'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword control-flow">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">error</span><span class="token punctuation">(</span><span class="token string">"エラーが起こりました："</span> <span class="token operator">+</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">grun</span><span class="token punctuation">(</span>fileReadAndWrite<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<h2>await asyncを使った非同期</h2>
<p>ルール</p>
<ol>
<li>awaitを付けると戻り値が返るまで待機する。</li>
<li>awaitを使用した関数の先頭にasyncを付ける。この関数は非同期であると示す。</li>
</ol>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">sample</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">//awaitを付ける事でasyncFn()の戻り値が来るまでnum++は実行されない。</span>
	
	<span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token keyword control-flow">await</span> <span class="token function">asyncFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	num<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token keyword control-flow">return</span> num<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//上記のコードをプロミスで記述する場合</span>
<span class="token comment">//asyncFn()が実行された時点でthenメソッドが呼ばれる。</span>
<span class="token function">asyncFn</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
	num<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token keyword control-flow">return</span> num<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div>
<p>先ほど使用したPromiseの関数async awaitで非同期にする。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
		<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
			<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword control-flow">if</span><span class="token punctuation">(</span>num <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
				<span class="token function">reject</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span><span class="token keyword control-flow">else</span><span class="token punctuation">{</span>
				<span class="token function">resolve</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">0</span>
	<span class="token keyword control-flow">try</span><span class="token punctuation">{</span>
		num <span class="token operator">=</span> <span class="token keyword control-flow">await</span> <span class="token function">wait</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
		num<span class="token operator">++</span><span class="token punctuation">;</span>
		num <span class="token operator">=</span> <span class="token keyword control-flow">await</span> <span class="token function">wait</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
		num<span class="token operator">++</span><span class="token punctuation">;</span>

	<span class="token punctuation">}</span><span class="token keyword control-flow">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword control-flow">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Error is occured'</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token punctuation">}</span>
	<span class="token keyword control-flow">return</span> num<span class="token punctuation">;</span><span class="token comment">//Promiseでラップされた値が返る。</span>
<span class="token punctuation">}</span>

<span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//戻り値がPromiseなのでそのままthenメソッドが使用できる。</span>
</code></pre></div>
<h3>参照</h3>
<p>1)Ethan Brown. Learning JavaScript, 3rd Edition. O'Reilly. イーサン ブラウン ムシャ ヒロユキ ムシャ ルミ (訳) 2017. 「14章 非同期プログラミング」.『初めてのJavascript』. 第3版. オライリージャパン. pp 229-256.</p>
<p>下記の動画を学習しながら、疑問に思った事をまとめて記事にしました。この方udemyで講師をしている方で動画がとても丁寧で分かりやすい（しかも無料!!）のでJavascriptで非同期を学ぶなら絶対おすすめです。</p>
<p><a href="https://www.youtube.com/watch?v=3gvl2DswvEg">【JavaScript】非同期操作について学ぼう１（コールバック関数）</a></p>
<p><a href="https://www.youtube.com/watch?v=HITHoT9mQco">【JavaScript】非同期操作について学ぼう２（Promise関数）</a></p>
<p><a href="https://www.youtube.com/watch?v=53N-nUVK9EI">【JavaScript】非同期操作について学ぼう３（Await／Async関数）</a></p>
<p>記事に関するコメント等は</p>
<p>🕊：<a href="https://twitter.com/Unemployed_jp">Twitter</a>
📺：<a href="https://www.youtube.com/channel/UCT3wLdiZS3Gos87f9fu4EOQ/featured?view_as=subscriber">Youtube</a>
📸：<a href="https://www.instagram.com/unemployed_jp/">Instagram</a>
👨🏻‍💻：<a href="https://github.com/wimpykid719?tab=repositories">Github</a>
😥：<a href="https://ja.stackoverflow.com/users/edit/22565">Stackoverflow</a></p>
<p>でも受け付けています。どこかにはいます。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[今朝 Google chromeがお亡くなりになった。]]></title>
        <id>https://techblog-pink.vercel.app/posts/870ae0a63d0ccc18253c</id>
        <link href="https://techblog-pink.vercel.app/posts/870ae0a63d0ccc18253c"/>
        <updated>2020-11-02T15:00:00.000Z</updated>
        <summary type="html"><![CDATA[**その日は突然やってきた。何気ない朝だった。**普段プログラミングの勉強も兼ねて、chromeでseleniumを用いてスクレイピングをしている。今朝もいつも通り、スクリプトに機能を追加して走らせたが、機能追加によるものとは違い何かいつもと違う挙動を見せた。空耳であると思わ...]]></summary>
        <content type="html"><![CDATA[<p><strong>その日は突然やってきた。何気ない朝だった。</strong></p>
<p>普段プログラミングの勉強も兼ねて、chromeでseleniumを用いてスクレイピングをしている。今朝もいつも通り、スクリプトに機能を追加して走らせたが、機能追加によるものとは違い何かいつもと違う挙動を見せた。空耳であると思われるが、何かボキっと鈍い音が聞こえた。</p>
<p>クラッシュレポートが画面に表示される。もちろんappleに送信はしない。</p>
<p>そしてもう一度スクリプトを走らせる。</p>
<p>ターミナルにエラーが出力され、chromeが起動出来ない的なメッセージが表示されている。</p>
<p>きっとプロセスが終了出来てないんだろう、その時はそんな風に軽々しく考えていた。</p>
<p><code>$ ps</code>とコマンドを打つ。やはりchromedriverとgoogle chromeというプロセスが起動していた。<code>$killall chromedriver</code>でプロセスを切る。続けて普段なら<code>$killall chrome</code>も行うのだが、<strong>notfound</strong>と表示された。</p>
<p>そして、デスクトップに目をやると普段のchromeアイコンが無残な姿に変貌していた。</p>
<p><img src="https://storage.googleapis.com/zenn-user-upload/5mdg3xr4a7m672syesq5n03vnzxa" alt="chromeアイコン"></p>
<p>こんな姿今まで見たことない。そしてクリックしてもクラッシュレポートが表示されるのみでchromeを起動する事が出来なかった。ここでようやく事の重大さに気付く。これではらちが明かないと思いMacを再起動する。ガシャーンと音を立て起動するMacの画面を見て我々は血の気が引いていくのを感じた。そこには先ほどと変わらない無慈悲なアイコンのChromeがDockに鎮座している。そして再び彼を呼び起そうとクリックするも彼は目を覚ます事はなかった。ここで彼が逝ってしまった事を悟る。我々は何度か叫びクリックして彼を呼び起そうとした。ダメだった。何度もクラッシュレポートが表示され彼が旅立った事を教える。</p>
<p>その後、何か蘇生方法はないかとgoogle先生・chromeのコミュニティの元を訪れたが、我々と同じ症状を示す文献は見られなかった。だがその中で再インストールすることに考えをシフトしていく。そして修正方法を見つける。この方法を用いる事で完全に作業前と同じ状態でchromeを蘇らせることに成功する。</p>
<p>もちろん、ブックマーク、同期設定、各々ユーザ、タブ、履歴、セッション等々に関するまで全て元通りになる。とても鮮やかで華麗な方法のため大抵のクラッシュ後、再インストールを検討しなければならない、chromeに適応出来るだろう。自分でも見事だと思うので記事にした。</p>
<p>ここまで茶番に付き合って頂き「ありがとう」と礼を述べる。</p>
<p>ちなみにこちらがクラッシュ時のappleに送信予定だったエラーレポートだ。</p>
<p>原因がわかる方がいたら教えて欲しい。</p>
<p>個人的にはchromeのアップデートが知らずに予定されていて（普段chromeを付けっ放しでアップデートが更新されていなかった。）スクリプトを起動する際にchromeを終了し、その直後更新が完了する前にスクリプトでchromeを起動してしまい、上手く更新作業がされずにクラッシュしたと考察する。</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">Process: Google Chrome [811]

Path: /Applications/Google Chrome.app/Contents/MacOS/Google Chrome

Identifier: Google Chrome

Version: ???

Code Type: X86-64 (Native)

Parent Process: ??? [1]

Responsible: Google Chrome [811]

User ID: ***

Date/Time: 2020-11-03 11:27:21.661 +0900

OS Version: Mac OS X 10.13.6 (17G65)

Report Version: 12

Anonymous UUID: ***

Sleep/Wake UUID: ***

Time Awake Since Boot: 3700 seconds

Time Since Wake: 750 seconds

System Integrity Protection: enabled

Crashed Thread: 0

Exception Type: EXC_CRASH (Code Signature Invalid)

Exception Codes: 0x0000000000000000, 0x0000000000000000

Exception Note: EXC_CORPSE_NOTIFY

Termination Reason: Namespace CODESIGNING, Code 0x1

kernel messages:

VM Regions Near 0 (cr2):

- -&#x26;gt;

__TEXT 000000010093a000-0000000100962000 [ 160K] r-x/r-x SM=COW

Thread 0 Crashed:

0 ??? 0x0000000100cb119c _dyld_start + 0

Thread 0 crashed with X86 Thread State (64-bit):

rax: 0x0000000000000000 rbx: 0x0000000000000000 rcx: 0x0000000000000000 rdx: 0x0000000000000000

rdi: 0x0000000000000000 rsi: 0x0000000000000000 rbp: 0x0000000000000000 rsp: 0x00007ffeef2c5bc0

r8: 0x0000000000000000 r9: 0x0000000000000000 r10: 0x0000000000000000 r11: 0x0000000000000000

r12: 0x0000000000000000 r13: 0x0000000000000000 r14: 0x0000000000000000 r15: 0x0000000000000000

rip: 0x0000000100cb119c rfl: 0x0000000000000200 cr2: 0x0000000000000000

Logical CPU: 0

Error Code: 0x00000000

Trap Number: 0

Binary Images:

0x10093a000 - 0x100961fff +??? (0) &#x26;lt;B9E032C2-2131-360D-B147-BB24643AF0C2&#x26;gt; (null)

0x100cb0000 - 0x100cfaacf +??? (551.4) &#x26;lt;8A72DE9C-A136-3506-AA02-4BA2B82DCAF3&#x26;gt; (null)

External Modification Summary:

Calls made by other processes targeting this process:

task_for_pid: 0

thread_create: 0

thread_set_state: 0

Calls made by this process:

task_for_pid: 0

thread_create: 0

thread_set_state: 0

Calls made by all processes on this machine:

task_for_pid: 1837

thread_create: 0

thread_set_state: 0

VM Region Summary:

ReadOnly portion of Libraries: Total=596K resident=0K(0%) swapped_out_or_unallocated=596K(100%)

Writable regions: Total=8408K written=0K(0%) resident=0K(0%) swapped_out=0K(0%) unallocated=8408K(100%)

VIRTUAL REGION

REGION TYPE SIZE COUNT (non-coalesced)

=========== ======= =======

STACK GUARD 56.0M 2

Stack 8192K 2

__DATA 240K 5

__LINKEDIT 136K 3

__TEXT 460K 3

shared memory 8K 3

=========== ======= =======

TOTAL 64.8M 12</code></pre></div>
<h2>Chromeが起動しなくなった時の修正方法</h2>
<p>1：~/Library/Application\ Support/Google/Chrome
にデータが入ってるので、一度デスクトップに移動
2：Chromeを削除して再インストール
3：インストール後の起動する前にChromeフォルダを元の場所に戻す。
4：前回の作業状態のまま起動する。</p>
<p>iTunesのデータを移行する際も似たような方法で行っていたので一か八かで実行したら使えた。</p>
<p>この方法を思いつくのに4時間ほど溶かしてしまったのと、chromeが壊れた事にショックで寝込みそうだったのでこの記事で多くのchromeクラッシャーが救われたら嬉しい。chromeがクラッシュして起動できなくなる状態が頻繁に起こるのか疑問だが、自分と同じ状態に陥った人の助けになればと思う。</p>
<h3>参照</h3>
<p><a href="https://support.google.com/chrome/thread/29645181?hl=en">Google Chrome Can't Open On MacBook - Google Chrome Community</a></p>
<p>記事に関するコメント等は</p>
<p>🕊：<a href="https://twitter.com/Unemployed_jp">Twitter</a>
📺：<a href="https://www.youtube.com/channel/UCT3wLdiZS3Gos87f9fu4EOQ/featured?view_as=subscriber">Youtube</a>
📸：<a href="https://www.instagram.com/unemployed_jp/">Instagram</a>
👨🏻‍💻：<a href="https://github.com/wimpykid719?tab=repositories">Github</a>
😥：<a href="https://ja.stackoverflow.com/users/edit/22565">Stackoverflow</a></p>
<p>でも受け付けています。どこかにはいます。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[シンプルに生のJavascriptでSVGを外部ファイル化する方法（jQuery, Ajax通信を使用しない）]]></title>
        <id>https://techblog-pink.vercel.app/posts/01d776f261b181af5a3c</id>
        <link href="https://techblog-pink.vercel.app/posts/01d776f261b181af5a3c"/>
        <updated>2020-09-29T15:00:00.000Z</updated>
        <summary type="html"><![CDATA[SVGをindex.htmlに直書きするのが嫌でネットで調べたら、PHPかjQueryのload()、JavascriptのXHttpRequest()しかなかった（ローカル内でget通信するのは気持ち悪い）ので自分なりにベストプラクティスを考えてみた。...]]></summary>
        <content type="html"><![CDATA[<p>SVGを<code>index.html</code>に直書きするのが嫌でネットで調べたら、PHPかjQueryの<code>load()</code>、Javascriptの<code>XHttpRequest()</code>しかなかった（ローカル内でget通信するのは気持ち悪い）ので自分なりにベストプラクティスを考えてみた。</p>
<h2>まえがき</h2>
<p>私は新卒2ヶ月で会社を辞めて、今無職である。今日がちょうど無職になってから91日目である。詳しくはideatrendに上げた<a href="https://zenn.dev/unemployed/articles/d43097ebbc49629f6ee9">記事</a>に書いてある。
そして前職はエンジニアとは関係なく、今は趣味プログラマーで在宅でクラウドワークスでもらったPythonで書かれたシステムのコード解析・エラー改修を継続して行ってる。ほぼボランティアに近い。CS学士ない、文系卒、エンジニア職の未経験の人間が書いている。</p>
<p>なのでこの記事は知見の共有として成り立てばこれほど嬉しい事はないが、こんな方法考えたけど、これってセキュリティ的とかエンジニアとしてはこういった書き方はしないな等、確かめる意味合いが強いので現役のエンジニアからアドバイスが頂けると嬉しい。</p>
<h3>Javascriptでしか書けない理由</h3>
<p>現在、Youtubeの動画をダウンロードできるPythonスクリプトをデスクトップアプリにしようとしている。eelというelectronライクなライブラリーを使用してコードを書いてるためフロントエンドにhtml, css, jsが使用できる。eelの裏ではbottleが動作しているみたいなのでflaskみたいにtemplate構文が使用できればPHPの<code>incluude()</code>みたなことができるかもしれないが、最近ES6を勉強したのでせっかくならその知識を生かせないかと考えた次第である。</p>
<h2>コード</h2>
<p>まえがきが長い割に内容はシンプルなので、コードを提示してから説明する。</p>
<p><strong>index.html</strong>
ここはターゲットとする<code>h1</code>タグがあればいい。</p>
<div class="remark-highlight"><pre class="language-html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&#x3C;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>head</span><span class="token punctuation">></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>title</span><span class="token punctuation">></span></span>AddSVG<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>title</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>head</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>body</span><span class="token punctuation">></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>h1</span><span class="token punctuation">></span></span>Hello world🔥<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>h1</span><span class="token punctuation">></span></span>

	<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>svgs/object-svgs.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>script</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scripts/addsvg.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>script</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>body</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>html</span><span class="token punctuation">></span></span>
</code></pre></div>
<p><strong>object-svg.js</strong>
SVGファイルで保存するのではなく、JSのオブジェクトにSVGで必要な要素を文字列リスト形式で格納する。これを<code>svg.returnAll()</code>でまとめて返す構造になっている。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> svgs <span class="token operator">=</span> <span class="token punctuation">{</span>
		<span class="token comment">//allの中にsvgのパスを格納していけば外部ファイルに追加していける。</span>
		all<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'\</span>
<span class="token string">					&#x3C;defs>\</span>
<span class="token string">						&#x3C;symbol id="download" viewBox="0 0 164 45">\</span>
<span class="token string">							&#x3C;path d="M0 3C0 1.34315 1.33152 0 2.98838 0C15.6933 0 52.8204 0 82 0C111.114 0 148.441 0 161.007 0C162.664 0 164 1.34315 164 3V42C164 43.6569 162.657 45 161 45H3C1.34314 45 0 43.6569 0 42V3Z" />\</span>
<span class="token string">						&#x3C;/symbol>\</span>
<span class="token string">					&#x3C;/defs>\</span>
<span class="token string">				'</span>
			<span class="token punctuation">]</span><span class="token punctuation">,</span>
		
		<span class="token function-variable function">returnAll</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">all</span><span class="token punctuation">.</span><span class="token method function property-access">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">sum<span class="token punctuation">,</span> svg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword control-flow">return</span> sum <span class="token operator">+</span> svg
			<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>
			
		<span class="token punctuation">}</span> 
		
	<span class="token punctuation">}</span>
</code></pre></div>
<p><strong>addsvg.js</strong>
ここで大事なのは<code>document.createElementNS()</code>これで<code>svg</code>タグを作成しないとsvgが上手く読み込めなくなる。<code>document.createElement()</code>で作成したsvgタグで囲っても上手く読み込まれない。出来上がる<code>html</code>ファイルに検証をかけても2つの違いは分らないため、ここで時間を浪費した。
下記のコードで<code>h1</code>タグの上部すなわち<code>body</code>の直下に配置することができる。なぜか<code>insertAfter()</code>がなくて<code>body</code>直下にできなかった。</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> svgAll <span class="token operator">=</span> svgs<span class="token punctuation">.</span><span class="token method function property-access">returnAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">function</span> <span class="token function">addElement</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
		<span class="token comment">// 新しい div 要素を作成します </span>
		<span class="token keyword">const</span> newDiv <span class="token operator">=</span> <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">createElementNS</span><span class="token punctuation">(</span><span class="token string">"http://www.w3.org/2000/svg"</span><span class="token punctuation">,</span> <span class="token string">"svg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
		newDiv<span class="token punctuation">.</span><span class="token property-access">innerHTML</span> <span class="token operator">=</span> svgAll<span class="token punctuation">;</span> 
		<span class="token keyword">const</span> h1 <span class="token operator">=</span> <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token property-access">body</span><span class="token punctuation">.</span><span class="token method function property-access">insertBefore</span><span class="token punctuation">(</span>newDiv<span class="token punctuation">,</span> h1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

		
	<span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">addEventListener</span><span class="token punctuation">(</span><span class="token string">'DOMContentLoaded'</span><span class="token punctuation">,</span> addElement<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<h3>参照</h3>
<p><a href="https://developer.mozilla.org/ja/docs/Web/API/Document/createElementNS">document.createElementNS()-MDN</a></p>
<p><a href="https://developer.mozilla.org/ja/docs/Web/API/Document/createElement">document.createElement()-MDN</a></p>
<p><a href="https://web-tsuku.life/insertbefore-add-element/">insetBeforeで要素を追加する。</a></p>
<p><a href="https://webcache.googleusercontent.com/search?q=cache:ot_nH2XDM2EJ:https://www.task-notes.com/entry/20161020/1476974565+&#x26;cd=5&#x26;hl=ja&#x26;ct=clnk&#x26;gl=jp">insertBefore() と appendChild() </a></p>
<p><a href="https://omachizura.com/2015/08/javascript-dom-string.html">innerHTMLで文字列をDOMElementに変換する</a></p>
<p><a href="https://prokatsu.com/javascript_linebreak/">javascriptで文字列を複数業に分ける方法</a></p>
<h4>ネットにあったやり方</h4>
<p><a href="https://www.weblab.co.jp/staff/creator/8059.html">【脱jQuery】.load()で別ページから共通パーツを読み込むのをネイティブに書き換え</a></p>
<p>最後まで読んで下さりありがとうございました。</p>
<p>周りに応援してくれる人がいないので、コメントや少しでもサポートして下さると、とても嬉しいです。</p>
<p>この知見について、現場で使用したりするのか等コメントを頂けると学習の糧になります。
よろしくお願いします。</p>
<p>記事に関するコメント等は</p>
<p>🕊：<a href="https://twitter.com/Unemployed_jp">Twitter</a>
📺：<a href="https://www.youtube.com/channel/UCT3wLdiZS3Gos87f9fu4EOQ/featured?view_as=subscriber">Youtube</a>
📸：<a href="https://www.instagram.com/unemployed_jp/">Instagram</a>
👨🏻‍💻：<a href="https://github.com/wimpykid719?tab=repositories">Github</a>
😥：<a href="https://ja.stackoverflow.com/users/edit/22565">Stackoverflow</a></p>
<p>でも受け付けています。どこかにはいます。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[未経験でプログラミング出来るようになったけど、エンジニアになれそうにない。]]></title>
        <id>https://techblog-pink.vercel.app/posts/d43097ebbc49629f6ee9</id>
        <link href="https://techblog-pink.vercel.app/posts/d43097ebbc49629f6ee9"/>
        <updated>2020-09-29T15:00:00.000Z</updated>
        <summary type="html"><![CDATA[...]]></summary>
        <content type="html"><![CDATA[<h2>この記事の読み方</h2>
<p>もしかすると別のプラットフォームに載せた方が良いかもしれないが、サービスのUIが好きでいつかこんなサービス作ってみたいと思ったので、ここで書かせて下さい。</p>
<p>自分が文系・未経験からどうやってプログラミングを習得したのかの知見について共有したくて書いている。個人的にはProgate何周も回すやり方とは違うのでこういった方法もあるのではと伝えたい。</p>
<p>それで申し訳ないのが結構、序盤が自分の自己紹介・自分語りがすごいので習得方法を知りたい方は各項目を飛ばして、学習ロードマップの<strong>プログラミング出来るまでにやった事</strong>を読むのをおすすめする。そこに短くまとめてある。</p>
<h2>現在の状態</h2>
<p>新卒で入社した会社をたった3ヶ月で辞めてしまった。今日は無職になって91日目である。簡単に言うと上司と合わなかった、業務量が多くて将来的にこなせないと思ったからだ。たった3ヶ月だがとてもしんどかった。</p>
<p>毎日何をしているかと言うと、プログラミングかYoutubeにあげる動画編集をしている。YoutubeではSupremeという人気ブランドを自動購入するBotを作成している。転売業者が入ってきて（彼らもBotを使用してる）欲しくても買えないアイテムが購入できるか挑戦している。今のところ惨敗している。</p>
<p>それとクラウドワークスで取引した会社から直接案件をもらいPythonで書かれたシステムのコード解析・エラー改修を行なっている。</p>
<p>一回の修正で、2~3行コード修正して5000円貰える。修正箇所を探すのに何時間も掛かったので、最初は時給にしたらアルバイトの最低賃金よりも低くかった。それが月に2件くらいある。</p>
<h2>プログラミングを始めたきっかけ</h2>
<p>ここでは中学・高校・大学と時間を進めてどんな感じでプログラミングを始めたか話していく。</p>
<h3>中学でapple製品を手にする。</h3>
<p>パソコンを使うようになったのは中学2年生の頃、友人がiPhone3GにYoutubeから音楽入れて聞いているのを見ていいなと思って、初めてのapple製品iPod touchの第三世代32GBを購入してからだ。
あのサイズで当時のPS3 320GBと同じ価格だったのでとても高い買い物をしたのを覚えている。</p>
<p>これがパソコンを使うきっかけだったと思う。</p>
<p>最初は友人に頼んでipod touchにYoutubeの動画をダウンロードして転送していた。その動画をipod touchで視聴していた。当時家にWifiはなく自宅周辺で鍵のないWifiを見つけて、知らない人の自宅前でアプリをダウンロードしていた。</p>
<h3>高校では自作パソコンを組み、html, cssに触れる。</h3>
<p>その後、自作でパソコンを作り、デスクトップをお洒落にカスタマイズするのにハマり、それがWebのサイトをお洒落にすることに流れていった。Googleの無料で作れるブログ作った。Bloggerで見た目を調節するにはhtml, cssを編集することを知り、その後はサーバを借りてwordpressでブログを書くようになり、テーマを一から自作するまでになった。</p>
<p>しかし、プログラミングに触れる事はなかった。やりたいと思って、雑誌みたいなのを手に取ったが全く分らずやめてしまった。頭はよくない方で中学の中間テストなどは後ろから数えた方が早かった。数学が全く出来なかった。今でも全然出来ない。昔より思考する事ができるようにはなったと思うが、どうしても途中でそれ以上考えが展開出来なくなってしまう。おそらく短期記憶が弱くて展開に必要な情報を留めておけず、そこで躓いてるようなイメージ。なのであまり深く考察する事が出来ない。それはプログラミングにおいても少し複雑な処理をするだけでも、紙に書きながらでないと上手く考えられない。それですぐにコードを書く事が出来ずいつも時間がかかる。</p>
<h3>大学ではついに身の程を知らずに、Googleのインターンに応募する。</h3>
<p>ここでは夢に見たGoogleに身の程をわきまえずに挑戦して散っていきます。後で調べて知ることになるが、Googleのコーディングテストは異次元だった。今ではまともに出来ない事がわかるが、当時はそれすら分からなかった。</p>
<h4>学部編</h4>
<p>高校を卒業して、文系大学に進学する。理由は大学のパンフレットでプログラミングが学べるみたいな事が書いてあって、SE養成コースがあった。シリコンバレーにApple・Google本社に視察（自費）にいける、文系・理系の垣根を超えて学ぶなども謳ってあり幼稚だった自分はこれでGAFAに一歩近づける（実際には物理的な距離が近くなった、だけだった。）と思って、進学を決めた。</p>
<p>就活の際に自分の学部が文系なのか理系なのか分らなくて困る事になったが、今思うと100%文系の学科だった。数学を使用する機会はほとんどなかった。そして授業はフルで入れたはずなのに全然なく、1年生の時でさえ週に2日は午前中に帰宅していた。（自分でそうしたので悪いのは自分です。）</p>
<p>授業では全45回に渡りC++, Java, VBに触れる機会があったが、そこでは講師著書の本（3000円くらい）を購入させられ、基礎的な事しかやらずコマンドプロンプトに▲をひたすら並べて、でかいゼルダの模様みたいなのを作成したりする程度だった。</p>
<p>これで一回の授業が3000円なので3000 * 45 = 135000円 + 教科書代いいビジネスだと思う。巷で噂の高額プログラミングスクールといい勝負である。普段使用するソフトウェアからはほど遠い出来栄えで正直ここからどうやってアプリを作成するのか当時は想像する事も出来なかった。</p>
<p>結局プログラミングが出来るようになりたくて、Udacityという無料のプログラミング講座を見つけた。<a href="https://classroom.udacity.com/courses/cs101">Intro to Computer Science（人による日本語翻訳あり）</a>という講座でPythonの構文を一から丁寧に紹介してくれた。10分くらいで大学15回分くらいの内容が終わった。講義の目標はPythonでweb検索エンジンを作成しようというのがあって実際にクローラも作成した。大学で受講したどの講義よりも、濃厚であった。頭で考えた事をコードに翻訳する事ができるようになり、<strong>考える力</strong>を手に入れた気分だった。やっとまともにプログラミングをしていると感じた。途中で難しくて挫折したりしてやらない期間が出来て、完全に終わるまで2年くらい経ってたと思う。</p>
<p>途中身の程も知らずGoogleのサマーインターンに拙い英語かつ自作のテンプレート履歴書（マテリアルデザイン風）を送りつけて見事に返信が来なかった。卒業制作では講義でやった事を元にフロントエンドも作成して実際に使える検索エンジンとして提出した。ページランクは文献の数式が理解出来ず、実装出来なかった。数学を勉強していつか実装しようと思う。</p>
<h4>就活編</h4>
<p>ここでエンジニアを目指しインターネットでSIer・SESと言う言葉を見つける。</p>
<p>日本に住むエンジニアの90%は上記に属するらしい。そして文系・未経験はこの一択しかないと言う事も記事には書いてあった。事業内容はプロジェクト毎に別の会社に行き案件をこなすと言うものだった。派遣と何が違うのか分からなかった。調べるとSIer・SESに関する恐ろしいエピソード、技術力は育たない、ほとんどコードを書かない等書かれていた。デスマーチ等の恐ろしい業界用語も見つけた。なのでなるべくそれらの会社ではなく自社開発をしている企業に絞って就活をした。結局周りに少なくてSIer・SESも受けていた。</p>
<p>udacityのおかげで就活では〇-teamのプログラミングテストに合格する事が出来た。ただ志望動機を述べる事が出来なくて面接で落とされる結果になる。</p>
<p>ベンチャー企業で働くほど意識も高くなかったのが原因だと思う。Googleなんて夢のまた夢だろう。その後も面接で「プログラミングをやるの好きですか？」等の質問に「当時も今もコード書くことはわりと苦痛で、出来上がったプログラムが動作するをみているのが好き、出来上がった時の達成感は他の物事では得る事が出来ないくらい気持ちが良い。」など答えて15社くらい不採用だった。</p>
<p>教養のテストでは毎回弾かれてたし問題が他にもあるのだろう。短い期間に大量に履歴書を作成するのが苦痛だった志望動機・自己PR相手に自分を伝える事がこんなにも大変だと思わなかった。就活の時期にまだ検索エンジンを制作仕切ってなくて、自信を持って話せるエピソードを探すのも大変だった。</p>
<p>当時は子供向けのプログラミング教室でアルバイトしていたのでその事について話していた。
言語もScratchと呼ばれるMITが開発したブロックをつなぎ合わせてプログラムを制作するもので、プログラミングに素養がない人も3日くらいの講習を受けてアルバイトとして働けるものだった。週に1回多くても2回という低頻度かつ、教える際も自分の理解の範囲内でエラーが起きたりしていたので居心地がよくアルバイトの中で一番長く務めた。就職の際も「うちで働きなよ」と言って貰えたが、将来不安だったので断った。先に内定を貰っていた友達からは「贅沢言うなよ」と言われ、傷付いたのを覚えている。上手く説明できず言われっ放しだった。その後、同じ学科の先輩が正社員となったが、その人がいなくても教室が回せるとかの理由で自己都合退職に追い込まれて辞めるを見た。結局卒業するまで内定は貰えず、2年間は別ごとをやりながら、空き時間にプログラミングをする事になる。</p>
<h4>社会人編</h4>
<p>それで今年になって将来安泰と思える仕事に就職したが、結局3ヶ月で早期退職することになった。親には本当に申し訳ないと思う。私立大だけでも400万課金して出来上がったのが、これだから目も当てられないと思う。Googleどころから一般の仕事も出来なかった。大学の頃から他の人と比べてなんとなく、大量の文章を書いたり、仕事をこなせない感じはあったけどまさかここまでとは思わなかった。アウトプットが凄く苦手だと感じる。今は何時間もかけてこの文章を書いてるから、疲れたら休憩してるけど、仕事だとそうもいかない。</p>
<h2>やってる事</h2>
<p>そこから91日経って、今はYoutubeをダウンロードするデスクトップアプリをPythonで作成してる。</p>
<p>フロントはeelというElectronライクなライブラリーを使用してフロントをhtml, css, jsで作成、バックエンドをPythonで作成する予定である。</p>
<p>UI/UXにはこだわりたくてUdemyで</p>
<ul>
<li><a href="https://www.udemy.com/course/javascriptes6/">１：【世界で3万人が受講】JavaScriptエンジニアのためのES6完全ガイド</a>、</li>
<li><a href="https://www.udemy.com/course/front-dev-tutorial/">２：【HTML/CSS/JavaScript】 フロントエンドエンジニアになりたい人の Webプログラミング入門</a>、</li>
<li><a href="https://www.udemy.com/course/javascriptes6/">３：【JavaScript＆CSS】ガチで学びたい人のためのWEB開発徹底実践（フロントエンド編）</a></li>
</ul>
<p>3つ購入してやりきった。最後の一つだけで十分だと思ったので手前、2つは余裕があればで良いと思う。</p>
<p><strong>おすすめ順は：3 > 1 > 2</strong></p>
<p><strong>2</strong>の講師がYoutubeチャンネルで無料で見られる<a href="https://www.youtube.com/watch?v=_PyuylNk64o&#x26;list=PLh6V6_7fbbo_M3CqTeJvuXB08--fibyBu">Github・git入門</a>はSourceTreeを使用しながら視覚的に<code>git add</code>、<code>git commit</code>が何をしているのか見れるので、とても分かりやすくおすすめである。</p>
<p>ここで学んだ事を使ってソフトにアニメーションなどを実装して使っていて、気持ちが良いアプリを作成したい。
機能としては</p>
<ol>
<li>複数動画を同時ダウンロード、</li>
<li>プログレスバー等</li>
</ol>
<p>を実装したいのだがこれらに躓いている。複数ダウンロードでは同期処理では遅いため、非同期処理を使用し、その間にプログレスバーの値を取得しながら処理を続けないといけない。
非同期処理を使ったのはSupreme Botの商品検索で初めて使い未だに詳しくは分らない。まだ構文が馴染んだ感じがしないため、使いこなせない。
スタックオーバーフロー、Pytubeの開発者のGithub issueで値が取り出せないとコメントを残したが、まだ回答は付いていない。独学で学んでいるのでつまづいたら、この2択しかない。たまにすぐ聞けるメンターまたは師匠・恩師と呼ばれる人が周りにいたらなと思う。</p>
<p><strong>追記</strong>
<a href="https://zenn.dev/unemployed/articles/3c8a872a210ded">【独学・未経験】Pythonデスクトップアプリを作成したから見て欲しい。 （ポートフォリオ ）</a>
完成した。</p>
<h2>学習ロードマップ</h2>
<p>これをやってる最中に定期的な収入を得るようになっていたい。勉強したい事を学びながら人生を送れたらすごいいいなと思う。出来なかった事が出来るようになる感覚が好きなのかもしれない。</p>
<h3>プログラミング習得でやった事</h3>
<p>HTML, CSSに触れる → <a href="https://classroom.udacity.com/courses/cs101">Udacity</a>で講座を受ける → 自作のDBを使わないwebアプリを作る、スクレイプした情報を表示するだけ等。（スタックオーバーフローを使いまくる）→ Udemyで気になる講座をやる。</p>
<h3>やりたい事</h3>
<p>予定（デスクトップアプリを作成する） → 予定（Gatsby使用してブログシステムを作成したい） →　予定（Django使用してデータベースを使ったECサイトを作成したい） → 予定（数学を勉強し直したい） →　予定（Courseraアンドリュー先生の機械学習講座を受けたい：一度挫折してる）</p>
<p><strong>追記：2021/5/12</strong></p>
<ul>
<li>デスクトップアプリ：<a href="https://zenn.dev/unemployed/articles/3c8a872a210ded">【独学・未経験】Pythonデスクトップアプリを作成したから見て欲しい。 （ポートフォリオ ）</a></li>
<li>ブログ：<a href="https://zenn.dev/unemployed/articles/nextjs-build-techblog">【無料運用】Zennの投稿記事を使ったブログをNext.js, Tailwindcss, TypeScript, Vercelで構築した。</a></li>
</ul>
<p>今の所やりたい事を順調にやっている。ブログはGatsbyではなくNext.jsで作成しているが、Next.jsの方がダウンロード数も多くGatsbyに比べて参考に出来る記事が多いと思った。Next.jsのチュートリアルは英語でもとても分かりやすい。GatsbyがSSGしか使えないのに対して、Next.jsではSSG・SSRも使える。選択肢は多い方が汎用性があると思った。そしてGatsbyを使用するにはGraphQL習得する必要もあって学習コストが高いかなと思った。その結果Next.jsを使用することにした。</p>
<h2>最後に</h2>
<p>ここまで読んで下さり、ありがとうございました。</p>
<p>近いうちに再就職出来たらと考えてます。厚生年金を積み立てなければならないし、昨日も国民年金を納めたがやはり高いので就職はしないとやっていけないと思っている。</p>
<p>記事に関するコメント等は</p>
<p>🕊：<a href="https://twitter.com/Unemployed_jp">Twitter</a>
📺：<a href="https://www.youtube.com/channel/UCT3wLdiZS3Gos87f9fu4EOQ/featured?view_as=subscriber">Youtube</a>
📸：<a href="https://www.instagram.com/unemployed_jp/">Instagram</a>
👨🏻‍💻：<a href="https://github.com/wimpykid719?tab=repositories">Github</a>
😥：<a href="https://ja.stackoverflow.com/users/edit/22565">Stackoverflow</a></p>
<p>でも受け付けています。どこかにはいます。</p>
]]></content>
    </entry>
</feed>